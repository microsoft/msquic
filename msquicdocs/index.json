{
  "README.html": {
    "href": "README.html",
    "title": "",
    "keywords": "MsQuic is a Microsoft implementation of the IETF QUIC protocol. It is cross-platform, written in C and designed to be a general purpose QUIC library. MsQuic also has C++ API wrapper classes and exposes interop layers for both Rust and C#. Protocol Features QUIC has many benefits when compared to existing \"TLS over TCP\" scenarios: All packets are encrypted and handshake is authenticated with TLS 1.3. Parallel streams of (reliable and unreliable) application data. Exchange application data in the first round trip (0-RTT). Improved congestion control and loss recovery. Survives a change in the clients IP address or port. Stateless load balancing. Easily extendable for new features and extensions. Library Features MsQuic has several features that differentiates it from other QUIC implementations: Optimized for client and server. Optimized for maximal throughput and minimal latency. Asynchronous IO. Receive side scaling (RSS) support. UDP send and receive coalescing support. Documentation For platform support details, see the Platforms docs. For release details, see the Release docs. For performance data, see the Performance dashboard. For building the library, see the Build docs. For testing the library, see the Testing docs. For using the API, see the API docs or the Sample. For deploying QUIC, see the Deployment docs. For diagnosing issues, see the Diagnostics docs and the Trouble Shooting Guide. For other frequently asked questions, see the FAQs. Contributing For information on contributing, please see our contribution guidelines. Feel free to take a look at our Good First Issues list if you're looking for somewhere to start. If you'd just like to talk, come chat with us on Discord."
  },
  "docs/API.html": {
    "href": "docs/API.html",
    "title": "MsQuic API",
    "keywords": "MsQuic API The MsQuic API is written in C (like the rest of the libary) and is cross platform. It is also possible to invoke from any other language that supports calling C (such as C# or Rust). The primary API header can be found in the inc directory: msquic.h Terminology Term Definition app The application that is calling into MsQuic. client The app that initiates a connection. server The app that accepts a connection from a peer. handle A pointer to an MsQuic object. endpoint One side of a connection; client or server. peer The other side of a connection. callback handler The function pointer the app registers with an MsQuic object. app context or context A (possibly null) pointer registered with an MsQuic object. It is passed to callback handlers. event An upcall to a callback handler. High Level Overview Object Model graph LR; App-->API; API-->Registration; Registration-->Configuration; Registration-->Listener; Registration-->Connection; Connection-->Stream; The API supports both server and client applications. All functionality is exposed primarily via a set of different objects: Api - The top level handle and function table for all other API calls. Registration – Manages the execution context for all child objects. An app may open multiple registrations but ideally should only open one. Configuration – Abstracts the configuration for a connection. This generally consists both of security related and common QUIC settings. Listener – Server side only, this object provides the interface for an app to accept incoming connections from clients. Once the connection has been accepted, it is independent of the listener. The app may create as many of these as necessary. Connection – Represents the actual QUIC connection state between the client and server. The app may create (and/or accept) as many of these as necessary. Stream – The layer at which application data is exchanged. Streams may be opened by either peer of a connection and may be unidirectional or bidirectional. For a single connection, as many streams as necessary may be created. (For more details on the inner design of MsQuic see: TLS) Versioning MsQuic API follows semantic versioning rules for updating the library version number (seen here). The MAJOR version must change when: The signature of an existing function changes. The position of any functions in the API function table changes. The behavior of an existing function changes that breaks existing clients. The MINOR version may change when: New values are added to existing flags or enums. New functions are added to the end of the API function table. The behavior of an existing function changes but can either be controlled via a flags field or doesn't break existing clients. The PATCH version only changes when a servicing fix is made to an existing release. Execution Mode In general, MsQuic uses a callback model for all asynchronous events up to the app. This includes things like connection state changes, new streams being created, stream data being received, and stream sends completing. All these events are indicated to the app via the callback handler, on a thread owned by MsQuic. Apps are expected to keep any execution time in the callback to a minimum. MsQuic does not use separate threads for the protocol execution and upcalls to the app. Therefore, any significant delays on the callback will delay the protocol. Any significant time or work needed to be completed by the app must happen on its own thread. This doesn't mean the app isn't allowed to do any work in the callback. In fact, many things are expressly designed to be most efficient when the app does them on the callback. For instance, closing a handle to a connection or stream is ideally implemented in the \"shutdown complete\" indications. One important aspect of this design is that all blocking calls invoked on a callback always happen inline (to prevent deadlocks), and will supercede any calls in progress or queued from a separate thread. Settings and Configuration MsQuic supports a variety of configuration options available to both application developers and administrators deploying MsQuic. See Settings for a detailed explanation of these settings and configuration options. API Objects Library Function Table There are only two top level functions: MsQuicOpenVersion - Initializes the MsQuic library and returns a the API function table. MsQuicClose - Cleans up the function table and releases the library reference from the previous MsQuicOpenVersion call. When the app is done with the MsQuic library, it must call MsQuicClose and pass in the function table it received from MsQuicOpenVersion. This allows for the library state to be cleaned up. Please note, there is no explicit start/stop API for this library. Each API function table has a reference on the QUIC library: the library is initialized when the first call to MsQuicOpenVersion succeeds and uninitialized when the last call to MsQuicClose completes. An app should therefore beware of repeatedly calling MsQuicOpenVersion and MsQuicClose, as library setup/cleanup can be expensive. Registration Generally, each app only needs a single registration. The registration represents the execution context where all logic for the app's connections run. The library will create a number of worker threads for each registration, shared for all the connections. This execution context is not shared between different registrations. A registration is created by calling RegistrationOpen and deleted by calling RegistrationClose. Configuration TODO A configuration is created by calling ConfigurationOpen and deleted by calling ConfigurationClose. Listener To create a QUIC server, a server must create a listener via ListenerOpen. This will return a new listener handle that is ready to start accepting incoming connections. Then, the server must call ListenerStart to get callbacks for new incoming connections. ListenerStart takes the network address and ALPNs the server wants to listener on. When a new connection is started by a client, the server will get a callback allowing it to accept the connection. This happens via the QUIC_LISTENER_EVENT_NEW_CONNECTION callback event, which contains all the currently known information in the QUIC_NEW_CONNECTION_INFO struct. The server then returns either a success or failure status to indicate if the connection was accepted or not. If the server accepts the connection, it now has ownership of the connection object. It must set the callback handler via SetCallbackHandler before the callback returns. Additionally, when it’s done with the connection, the app must call ConnectionClose on the connection to clean it up. For an accepted connection to actually continue with its handshake, the server must call ConnectionSetConfiguration to configure the necessary security (TLS) parameters. This may be called either on the callback (before it returns) or later on a different thread. When the server wishes to stop accepting new connections and stop further callbacks to the registered handler, it can call ListenerStop. This call is asynchronous, and may be called from any thread. The QUIC_LISTENER_EVENT_STOP_COMPLETE event will be delivered when the listener is stopped. The server may call ListenerStart again on the listener to start listening for incoming connections again. To clean up the listener object, the server calls ListenerClose. If the listener was not previously stopped, this function implicitly calls ListenerStop, so all the same restrictions to that call apply. Connection A connection handle represents a single QUIC connection and is generally the same thing on both client and server side. The main difference between client and server is just how the handle gets initially created. On client it is created explicitly by the app via a call to ConnectionOpen. On server it is created by the listener and delivered to the app via a callback to the registered QUIC_LISTENER_CALLBACK_HANDLER. Just like all objects in MsQuic, the connection requires the app to always be registered for event callbacks. After the client creates the new connection, it starts the process of connecting to a remote server by calling ConnectionStart. If the connection attempt succeeds, the connection event handler will be invoked for a QUIC_CONNECTION_EVENT_CONNECTED event; otherwise a QUIC_CONNECTION_EVENT_CLOSED event will be received. Once the app has a connection (either client or server) it can start opening streams and receiving events for remotely opened streams. Remotely opened streams are indicated to the callback handler via a QUIC_CONNECTION_EVENT_PEER_STREAM_STARTED event. The app is required to immediately call SetCallbackHandler to register a callback handler for the new stream. See Stream usage for more details on how stream are used. When the app is done with the connection, it can then call ConnectionShutdown to start the process of shutting down. This would cause the connection to immediately shutdown all open streams and send the shutdown indication to the peer over the network. When this process completes, the connection will invoke the event handler with a QUIC_CONNECTION_EVENT_SHUTDOWN_COMPLETE event. After this, the app would be free to call ConnectionClose to free up the connection resources. Stream Streams are the primary means of exchanging app data over a connection. Streams can be bidirectional or unidirectional. They can also be initiated/opened by either endpoint (Client or server). Each endpoint dictates exactly how many streams of each type (unidirectional or bidirectional) their peer can open at a given time. Finally, they can be shutdown by either endpoint, in either direction. A stream handle represents a single QUIC stream. It can be locally created by a call to StreamOpen or remotely created and then indicated to the app via the connection's callback handler via a QUIC_CONNECTION_EVENT_PEER_STREAM_STARTED event. Locally created streams must be started (via StreamStart) before they can send or receive data. Remote streams are already started when indicated to the app. Once the stream handle is available and started, the app can start receiving events on its callback handler (such as QUIC_STREAM_EVENT_RECEIVE) and start sending on the stream (via StreamSend). For more details see Using Streams. Datagrams MsQuic supports the unreliable datagram extension which allows for the app to send and receive unreliable (i.e. not retransmitted on packet loss) data securely. To enable support for receiving datagrams, the app must set DatagramReceiveEnabled to TRUE in its QUIC_SETTINGS. During the handshake, support for receiving datagrams is negotiated between endpoints. The app receives the QUIC_CONNECTION_EVENT_DATAGRAM_STATE_CHANGED event to indicate if the peer supports receiving datagrams (and what the current maximum size is). If the peer has enabled receiving datagrams, then an app may call DatagramSend. If/when the app receives a datagram from the peer it will receive a QUIC_CONNECTION_EVENT_DATAGRAM_RECEIVED event."
  },
  "docs/Architecture.html": {
    "href": "docs/Architecture.html",
    "title": "Architecture",
    "keywords": "Architecture MsQuic has primarily two high-level layers: QUIC and the platform. The platform layer includes abstractions for TLS, UDP and OS stuff (like threads and locks). The QUIC layer is platform independent logic, built on the platform abstraction layers. Component Breakdown Platform Abstraction Layer The platform abstraction layer (or PAL) supports the following platforms: Windows (User and Kernel) Linux FreeBSD macOS Basic OS Interfaces The most fundamental part of the PAL is definitions of basic constructs like locks, events, interlocked operations, threads, and time. Most of these definitions are implemented inline in C macros. The goal is to minimize overhead and simply be a minimal abstraction for various interfaces. Datapath Another large piece of the PAL is the abstraction of UDP and TCP sockets, named the \"datapath\" layer. This layer is designed to be highly parallelized and performant. It uses asynchronous callbacks driven by the current execution model (see below) threads. Currently, it also has preview support of XDP on Windows. Crypto The PAL exposes various cryptographic interfaces as well, such has encryption/decryption and cryptographic hashing. This layer currently supports BCrypt and OpenSSL variants on Windows, and OpenSSL on Linux. TLS Related to Crypto, the TLS layer abstracts the necessary TLS functionality required by the QUIC protocol. This layer currently supports Schannel and OpenSSL variants on Windows, and OpenSSL on Linux. Platform Initialization The platform layer isn't completely stateless, and requires some setup and cleanup. This is split into two layers: Library Load This is when the library is loaded into memory, and does very minimal work, such as initializing some global state, and generally cannot fail. See CxPlatSystemLoad and CxPlatSystemUnload in the code for more details. Library Initialization This is when the library is first used by the upper layer(s). It does the rest of the work, especially the more intensive work that may fail under extreme circumstances (missing dependencies or OOM). See CxPlatInitialize and CxPlatUninitialize in the code for more details. QUIC The QUIC layer builds on the abstractions exposed by the PAL to implement platform-independent protocol logic of the QUIC protocol. TODO - Add details Execution Model The execution model refers to how and where work is scheduled and executed. TODO - Add details"
  },
  "docs/BUILD.html": {
    "href": "docs/BUILD.html",
    "title": "Building MsQuic",
    "keywords": "Building MsQuic First, clone the repo recursively or run git submodule update --init --recursive to get all the submodules. Source Code The source (found in the src directory) is divided into several directories: bin - Packages up all static libraries into the platform specific binaries. core - Platform independent code that implements the QUIC protocol. inc - Header files used by all the other directories. manifest - Windows ETW manifest and related files. platform - Platform specific code for OS types, sockets and TLS. test - Test code for the MsQuic API / protocol. tools - Tools for exercising MsQuic. PowerShell Usage MsQuic uses several cross-platform PowerShell scripts to simplify build and test operations. The latest PowerShell will need to be installed for them to work. These scripts are the recommended way to build and test MsQuic, but they are not required. If you prefer to use CMake directly, please scroll down to the end of this page and start with the Building with CMake instructions. Install on Windows You can install the latest PowerShell on Windows by running the following PowerShell script or read the complete instructions here. iex \"& { $(irm https://aka.ms/install-powershell.ps1) } -UseMSI\" Then you will need to manually launch \"PowerShell 7\" to continue. This install does not replace the built-in version of PowerShell. Install on Linux You can find the full installation instructions for PowerShell on Linux here. For Ubuntu you can run the following: # Download the Microsoft repository GPG keys wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb # Register the Microsoft repository GPG keys sudo dpkg -i packages-microsoft-prod.deb # Update the list of products sudo apt-get update # Enable the \"universe\" repositories sudo add-apt-repository universe # Install PowerShell sudo apt-get install -y powershell # Start PowerShell pwsh Note If you get this error trying to install PowerShell: powershell : Depends: libicu55 but it is not installable Then you will need to run the following first (as a workaround): sudo apt-get remove libicu57 wget http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu55_55.1-7ubuntu0.5_amd64.deb sudo dpkg -i libicu55_55.1-7ubuntu0.5_amd64.deb wget http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.0.0_1.0.2g-1ubuntu4.18_amd64.deb sudo dpkg -i libssl1.0.0_1.0.2g-1ubuntu4.18_amd64.deb Then you will need to manually run \"pwsh\" to continue. Install on macOS brew install powershell Then you will need to manually run \"pwsh\" to continue. Building with PowerShell Install Dependencies In order to install the necessary dependencies, a copy of the .NET Core 3.1 SDK is required. Go to the following location and find the install page for your platform. .NET Core After installing .NET Core, you will need to restart your terminal. For the very first time you build, it's recommend to make sure you have all the dependencies installed. You can ensure this by running: ./scripts/prepare-machine.ps1 Note at minimum CMake 3.20 on windows and 3.16 on other platforms is required. Instructions for installing the newest version on Ubuntu can be found here. https://apt.kitware.com/. The prepare-machine script will not do this for you. Additional Requirements on Windows CMake (The version installed with Visual Studio will likely not be new enough) Strawberry Perl optional (required for OpenSSL build) Visual Studio 2019 or 2022 (or Build Tools for Visual Studio 2019/2022) with C++ CMake tools for Windows MSVC v142 - VS 2019 (or 2022) C++ (Arch) build tools Windows SDK Latest Windows Insider builds (required for SChannel build) Running a Build To build the code, you just need to run build.ps1 in the scripts folder: ./scripts/build.ps1 Note that schannel TLS provider requires the latest Windows versions (Windows Server 2022 or Insider Preview) to function. If you don't have schannel use openssl to build and test. ./scripts/build.ps1 -Tls openssl The script has a lot of additional configuration options, but the default should be fine for most. Config options -Config <Debug/Release> Allows for building in debug or release mode. Debug is the default configuration. -Arch <x86/x64/arm/arm64> Allow for building for different architectures. x64 is the defualt architecture. -Static Compiles msquic as a monolithic statically linkable library. Supported only by Windows currently. -Tls <schannel/openssl> Allows for building with different TLS providers. The default is platform dependent (Windows = schannel, Linux = openssl). -Clean Forces a clean build of everything. For more info, take a look at the build.ps1 script. Build Output By default the build output will go in the build folder and the final build binaries in the artifacts folder. Under that it will create per-platform folders with subfolders for architecture/tls combinations. This allows for building different platforms and configurations at the same time. Building with CMake The following section details how to build MsQuic purely with CMake commands. Please note that since using CMake directly is not the recommended way of building MsQuic, it's likely that these instructions may fall out of date more often than the Building with PowerShell ones. Note that you will need to disable logging if building with CMake exclusively. Logging enabled requires .NET Core and at least the configuration from prepare-machine.ps1 in order to build. Note at minimum CMake 3.16 is required. Instructions for installing a the newest version on Ubuntu can be found here. https://apt.kitware.com/ Install Dependencies Linux The following are generally required. Actual installations may vary. sudo apt-add-repository ppa:lttng/stable-2.13 sudo apt-get update sudo apt-get install cmake sudo apt-get install build-essential sudo apt-get install liblttng-ust-dev sudo apt-get install lttng-tools On RHEL 8, you'll need to manually install CMake to get the latest version. Download the x86_64 Linux installation script from cmake.org, and run the following sudo sh cmake.sh --prefix=/usr/local/ --exclude-subdir to install CMake. RHEL 8 also requires the following: sudo dnf install openssl-devel sudo dnf install libatomic macOS The build needs CMake and compiler. brew install cmake Minimally, build needs Xcode 'Command Line Tools`. That can be done via XCode in App Store or from command line xcode-select --install Generating Build Files Windows Ensure the corresponding \"MSVC v142 - VS 2019 (or 2022) C++ (Arch) build tools\" are installed for the target arch, e.g. selecting \"Desktop development with C++\" only includes x64/x86 but not ARM64 by default. VS 2019 mkdir build && cd build cmake -G 'Visual Studio 16 2019' -A x64 .. VS 2022 mkdir build && cd build cmake -G 'Visual Studio 17 2022' -A x64 .. Linux mkdir build && cd build cmake -G 'Unix Makefiles' .. Running a Build cmake --build . Building for Rust Rust support is currently experimental, and not officially supported. To build MsQuic for Rust, you still must install the dependencies listed above for the various platforms. Then simply run: cargo build To run the tests: cargo test Installing from vcpkg You can download and install MsQuic using the vcpkg dependency manager: git clone https://github.com/Microsoft/vcpkg.git cd vcpkg ./bootstrap-vcpkg.sh #.\\bootstrap-vcpkg.bat(for windows) ./vcpkg integrate install ./vcpkg install ms-quic The MsQuic port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please create an issue or pull request on the vcpkg repository."
  },
  "docs/CredScan.html": {
    "href": "docs/CredScan.html",
    "title": "Suppressing CredScan Warnings",
    "keywords": "Suppressing CredScan Warnings When updating the openssl submodule, new tests or code may get flagged by CredScan, and will need to be suppressed as it's 3rd party and we can't fix it. These are the steps to silence the warnings: Look at the sdl_sources results Click on 1 artifact produced and navigate to drop_sdl_sources/sdl_sources Download the .gdnsuppress file Copy the new warnings into openssl.gdnsuppress, sorting by the Target field Commit the changes and ingest into Windows. Note - You may also have to copy suppressions from other stages, similar to the process above. Regeneration from Scratch To regenerate the openssl.gdnsuppress completely, create a temporary mscodehub PR that removes the suppression: suppressionFile: from OneBranch.PullRequest.yml. Then follow the instructions above to get the new suppression file, but completely copy over the existing one instead. TODO - Perhaps we should automate the regeneration in a pipeline."
  },
  "docs/Deployment.html": {
    "href": "docs/Deployment.html",
    "title": "Deploying MsQuic",
    "keywords": "Deploying MsQuic MsQuic is used as the basis for several different protocols (HTTP, SMB, etc.), but they all have several things in common when it comes time to deploy them. This document outlines the various things that must be taken into account whenever deploying an MsQuic based solution. Deploying QUIC Generally, for any existing TCP based deployments that are adding QUIC support, there are a number of things to be considered. Many things are different between a TCP based solution and a QUIC based one, including breaking some pretty \"core\" assumptions made for TCP: QUIC uses UDP instead of TCP. Any firewalls or other network devices must take this into account, and make sure this traffic is allowed. QUIC traffic is designed to be generally indistinguishable from other UDP traffic. Network devices must not assume UDP traffic on any port is QUIC unless explicitly configured. Current QUIC based protocols primarily use port 443 on the server, but not necessarily exclusively. HTTP and SMB use this port, but other protocols (e.g. DNS over QUIC) likely will not. QUIC is versioned and extensible, and thus is expected to be very dynamic on the network. Network devices must not assume anything about the structure of a QUIC packet beyond what is stated in the Invariants RFC. QUIC is completely encrypted end to end. Most information that might have been viewable on a TCP connection is now only visible to the endpoints. A single UDP flow or tuple (address + port) does not necessarily map to a single connection. A single QUIC connection may span multiple flows. Multiple QUIC connections may share a single flow. NAT bindings for UDP flows on the internet generally timeout much quicker than TCP; resulting in flow changes much more often. QUIC, as a protocol, is able to survive these changes, unlike TCP. For more details, please see the Manageability draft. Configuration Please see Settings for information on MsQuic configuration. Windows On Windows, these settings can set via the registry and will persist across reboots and build upgrades. For most settings, a reboot is not required for them to immediately take effect. Also note that updated settings will only affect new connections (not existing ones). The main registry path for the keys is: HKLM:\\System\\CurrentControlSet\\Services\\MsQuic\\Parameters The settings can also be set per \"app-name\" (as indicated in RegistrationOpen): HKLM:\\System\\CurrentControlSet\\Services\\MsQuic\\Parameters\\app-name The DWORD type should be used for all 32-bit or less types. For 64-bit types, DWORD or QWORD may be used. If invalid types or values are used, they will be ignored and the built-in default will be used instead. For example, to set the Initial Window Size setting to 20 packets, you may do the following: reg.exe add \"HKLM\\System\\CurrentControlSet\\Services\\MsQuic\\Parameters\" /v InitialWindowPackets /t REG_DWORD /d 20 Cipher Suites Windows Important - ChaCha20-Poly1305 is not yet supported with MsQuic and Schannel, so this doesn't do anything yet. By default, the new cipher suite TLS_CHACHA20_POLY1305_SHA256 is disabled. It can be enabled via the following command: Enable-TlsCipherSuite -Name TLS_CHACHA20_POLY1305_SHA256 Firewall Windows In order to configure the Windows firewall to allow inbound QUIC traffic efficiently, use a command such as the one below. Generally, the firewall rule should be applied for all scenarios, unless a layer below you (e.g. IIS) is already doing it on your behalf. New-NetFirewallRule -DisplayName \"Allow QUIC\" -Direction Inbound -Protocol UDP -LocalPort 443 -Action Allow -LocalOnlyMapping $true Note the use of the -LocalOnlyMapping $true argument. This is a performance optimizing feature that should be used for UDP based protocols (like QUIC). See MSDN for additional details. Load Balancing MsQuic currently supports load balancing modes where the server encodes information into the \"Server ID\", bytes 1 through 4 of the connection IDs it creates. You can read more details about the general encoding in Load Balancers draft. 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | First octet | Server ID (X=8..152) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Any (0..152-X) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Server ID is 4 bytes long, and can encode various data interpretations. This encoding is not enabled by default. Please set the LoadBalancingMode setting accordingly to configure the desired load balancing mode. By default, . Note Any time the LoadBalancingMode is updated, the server must be restarted for this setting to take effect. IP Address Encoded Server ID MsQuic supports encoding the local IPv4 address or IPv6 suffix into Server ID. The load balancer can use this encoded IP address/suffix to directly route received QUIC packets to the appropriate server. To configure this mode, set the LoadBalancingMode setting to 1. Fixed Server ID MsQuic supports encoding a fixed, 4-byte value into Server ID. The load balancer can use this value to look up and route received QUIC packets to the appropriate server. To configure this mode, set the LoadBalancingMode setting to 2 and the FixedServerID setting to your desired value. Client Migration Client migration is a key feature in the QUIC protocol that allows for the connection to survive changes in the client's IP address or UDP port. MsQuic generally supports this but it requires QUIC load balancing support (when using a load balancer). QUIC encodes a connection identifier (connection ID or CID) in every packet it sends. This CID allows a server to encode routing information that a coordinating load balancer can use to route the packet, instead of using the IP tuple as most existing load balancers currently use to route UDP traffic. NAT Rebindings without Load Balancing Support If your deployment does not have QUIC load balancing support then you will not be able to make sure of the client migration feature described above to survive any NAT rebindings that change the client's IP tuple (from the server's perspective). This can be especially painful for any services migrating from a TCP based solution to QUIC, since most middleboxes on the internet have a much smaller timeout period for UDP (20 to 30 seconds) compared to TCP. This means any QUIC connection that goes idle for greater than ~20 seconds runs the risk of getting rebound by the NAT the next time the client sends a packet, resulting in a tuple change, and then likely resulting in the packet getting routed to the incorrect load balanced server. The mitigation to this problem is to enable QUIC keep alives. They can be enabled on either the client or server side, but only need to be enabled on one side. They can be enabled either dynamically in the code or globally via the settings. To enable keep alives via the settings, set the KeepAliveIntervalMs setting to a reasonable value, such as 20000 (20 seconds). DoS Mitigations MsQuic has a few built-in denial of service mitigations (server side). Stateless Retry MsQuic tracks the number of outstanding connections currently in the handshake state. When that reaches a certain threshold, MsQuic will start forcing clients to retry before the connection will be accepted. This entails the following: The server sends back a \"Stateless Retry\" packet with an encrypted token to the client. The server drops the incoming packet and doesn't save any state. The client must then reply back with its initial packet, this time including the encrypted token. The server validates the token, and only if successful, accept the connection. This protects the server from naive attackers trying to flood the server with new connection attempts; especially in scenarios where the client is spoofing its source IP address in an attempt to avoid attribution. The threshold mentioned above is currently tracked as a percentage of total avaialble (nonpaged pool) memory. This percentage of avaiable memory can be configured via the RetryMemoryFraction setting. Overloaded Worker Threads MsQuic uses worker threads internally to execute the QUIC protocol logic. For each worker thread, MsQuic tracks the average queue delay for any work done on one of these threads. This queue delay is simply the time from when the work is added to the queue to when the work is removed from the queue. If this delay hits a certain threshold, then existing connections can start to suffer (i.e. spurious packet loss, decreased throughput, or even connection failures). In order to prevent this, new connections are rejected with the SERVER_BUSY error, when this threshold is reached. The queue delay threshold can be configured via the MaxWorkerQueueDelayMs setting. Diagnostics For details on how to diagnose any issues with your deployment at the MsQuic layer see Diagnostics."
  },
  "docs/Development.html": {
    "href": "docs/Development.html",
    "title": "Developing MsQuic",
    "keywords": "Developing MsQuic This document contains tips and tricks for configuring known editors to make MsQuic development easier. Configuring Visual Studio Code for MsQuic Using the VS Code C/C++ Tools extension (https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) getting intellisense working for MsQuic is easy, but requires a small amount of configuration. The configuration UI can be started by going to the command palette (View -> Command Palette) and running C/C++: Edit Configurations (UI). This UI is a bit awkward to use, to set a field you have to click on another field. If you click out of the window it won't save. For User Mode (Windows, Linux or macOS), the following defines need to be added to the configuration. \"_DEBUG\", \"UNICODE\", \"_UNICODE\", \"QUIC_EVENTS_STUB\", \"QUIC_LOGS_STUB\" Additionally, cStandard and cppStandard need to be set to c17 and c++17 respectively. For Kernel Mode, create a new configuration with the Add Configuration button and call it Kernel. Add a Compiler argument /kernel to force kernel mode in the compiler. Add the following defines _DEBUG UNICODE _UNICODE QUIC_EVENTS_STUB QUIC_LOGS_STUB _AMD64_ _WIN32_WINNT=0x0A00 Set cStandard and cppStandard to c17 and c++17 respectively. Finally, you'll need to add the kernel mode header paths to Include path. On my system they're C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\km C:\\Program Files (x86)\\Windows Kits\\10\\Include\\wdf\\kmdf\\1.33 Depending on which WDK you have installed, the versions might change, but the relative folder paths should be similar. You will have to switch between configurations depending on if you want kernel mode or user mode context. To do this, while youre in a c or cpp file the status bar on the buttom right will have the configuration mode. For user it will be called Win32 and for kernel it will be called Kernel. To switch contexts, click the text, and you'll get a drop down to select other configurations. In the end, your c_cpp_properties.json file (in the .vscode folder) should look similar to the following. Some paths might be different, but they're trivially fixable. { \"configurations\": [ { \"name\": \"Win32\", \"includePath\": [ \"${workspaceFolder}/**\" ], \"defines\": [ \"_DEBUG\", \"UNICODE\", \"_UNICODE\", \"QUIC_EVENTS_STUB\", \"QUIC_LOGS_STUB\" ], \"windowsSdkVersion\": \"10.0.22000.0\", \"cStandard\": \"c17\", \"cppStandard\": \"c++17\", \"intelliSenseMode\": \"windows-msvc-x64\", \"compilerPath\": \"C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.30.30705/bin/Hostx64/x64/cl.exe\" }, { \"name\": \"Kernel\", \"includePath\": [ \"C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\Include\\\\10.0.22000.0\\\\km\", \"C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\Include\\\\wdf\\\\kmdf\\\\1.33\", \"${workspaceFolder}/**\" ], \"defines\": [ \"_DEBUG\", \"UNICODE\", \"_UNICODE\", \"QUIC_EVENTS_STUB\", \"QUIC_LOGS_STUB\", \"_AMD64_\", \"_WIN32_WINNT=0x0A00\" ], \"compilerPath\": \"C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.30.30705/bin/Hostx64/x64/cl.exe\", \"windowsSdkVersion\": \"10.0.22000.0\", \"cStandard\": \"c17\", \"cppStandard\": \"c++17\", \"intelliSenseMode\": \"windows-msvc-x64\", \"compilerArgs\": [ \"/kernel\" ] } ], \"version\": 4 }"
  },
  "docs/Diagnostics.html": {
    "href": "docs/Diagnostics.html",
    "title": "Diagnosing Issues with MsQuic",
    "keywords": "Diagnosing Issues with MsQuic This document describes various ways to debug and diagnose issues when using MsQuic. Built-in Tracing For debugging issues, logging is generally the best way to diagnose problems. MsQuic has extensive logs in the code to facilitate debugging. The logs can simply be converted to human readable text or they can be processed by various automated tools to help improve diagnostics. Note Currently tools only support Windows ETW. Windows On Windows, MsQuic leverages manifested ETW for its logging. All dependencies should be included with Windows; nothing additional should be required. Linux LTTng On Linux, MsQuic leverages LTTng for its logging. Some dependencies, such as babeltrace, lttng, and clog2text_lttng are required. The simplest way to install all dependencies is by running ./scripts/prepare-machine.ps1 -ForTest, but if you only want to collect the traces on the machine, the minimal dependencies are: sudo apt-add-repository ppa:lttng/stable-2.13 sudo apt-get update sudo apt-get install -y lttng-tools Perf For general tracing, refer Stacks and CPU usage macOS Tracing is currently unsupported on macOS. Trace Collection Windows There are a lot of general tools and ways to collect and interact with ETW. In the sections below are our recommended ways to collect and consume the MsQuic ETW logs. MsQuicEtw.man specifies all the details for each event. For instance: <event keywords=\"ut:Connection ut:DataFlow\" level=\"win:Verbose\" message=\"$(string.Etw.ConnOutFlowStats)\" opcode=\"Connection\" symbol=\"QuicConnOutFlowStats\" template=\"tid_CONN_OUT_FLOW_STATS\" value=\"5140\" /> This details everything about the QuicConnOutFlowStats event (see ConnOutFlowStats in the code), including it's level (verbose) and it's keywords (ut:Connection and ut:DataFlow). So this event would be collected if the level is 5 or higher and either the ut:Connection or the ut:DataFlow keywords are configured. The numeric value for the keywords is at the top of the manifest file: <keyword mask=\"0x0000000000000020\" name=\"ut:Connection\" /> <keyword mask=\"0x0000000040000000\" name=\"ut:DataFlow\" /> netsh.exe netsh.exe (short for Net Shell, but generally pronounced \"net-s-h\") is an inbox Windows command line tool. It has many uses, but one of the most used is around tracing (at least for the networking community). To start collecting a trace with netsh, use the following command: netsh.exe trace start overwrite=yes report=dis correlation=dis traceFile=quic.etl provider={ff15e657-4f26-570e-88ab-0796b258d11c} level=0x5 keywords=0xffffffff There are a lot of parameters being passed and if you want the complete help text explaining them all you can run netsh.exe trace start help. A few of the important parameters are: traceFile - The name/path of the output ETL file that the logs will be saved to. provider - The GUID of the ETW provider that should be collected. In this case, {ff15e657-4f26-570e-88ab-0796b258d11c} is the GUID for the MsQuic provider. level - The level at which to collect traces. 5 indicates the verbose level. 4 is informational. keywords - The set of flags that indicate which type of events should be collected. The command above collects all keywords (0xffffffff) which may be too verbose for some scenarios, such as high throughput testing or large number of parallel connections. For a detailed list of the available keywords, see MsQuicEtw.man and see <keywords>. Once you are done with collecting all the events, to stop the trace session, use the following command: netsh.exe trace stop This will flush and finalize the output ETL file specified in the netsh trace start command. This ETL file can either be converted to text or used in the automated tools. wpr.exe wpr.exe is another inbox Windows command line tool that can be used to collect ETW traces, but it requires an additional \"profile\" file: MsQuic.wprp. This WPR profile file details several specifically tailored trace configurations. To use it, you must copy MsQuic.wprp to the machine you wish to collect the traces for, you can simply run the following to start trace collection: wpr.exe -start MsQuic.wprp!PROFILE -filemode You must replace PROFILE with the name of the profile you want to run. Some of the useful profiles are: Stacks.Light- Collects CPU callstacks. Stacks.Verbose- Collects CPU callstacks, DPCs and interrupts. Performance.Light - Collects performance related events useful for automated tool processing. Performance.Verbose - Collects Performance.Light plus CPU callstacks. Basic.Light - Collects general, \"low volume\" MsQuic events. Useful for a \"big picture\" understanding, with as few events collected as possible. Basic.Verbose - Collects all MsQuic events. This is very verbose. Scheduling.Verbose - Collects \"low volume\" and scheduling related MsQuic events. Datapath.Light - Collects \"low volume\" and datapath related MsQuic events. Datapath.Verbose - Collects Datapath.Light plus CPU callstacks. Full.Light - Collects all MsQuic events as well as TAEF events. For most, this will be equivalent to Basic.Verbose. Full.Verbose - Collects all MsQuic events, TAEF events and several networking components' events. This is the most verbose possible, and should only be used for the most minimal scenarios. When you're done and ready to collect the logs, you run: wpr.exe -stop ETL_PATH You must replace ETL_PATH with the path of the output ETL file that you want to be written. If you no longer need the logs being collected, you can cancel a trace instead of saving it to file: wpr.exe -cancel Other Ways As already indicated, there are lots of ways to collect ETW traces. Feel free to look at Configuring and Starting an Event Tracing Session for more information. Linux All in one command This script wraps collecting trace then converting to text as well WARN: This wrapper doesn't work with ./scripts/test.ps1 etc. as it is also creating lttng session internally. cd ${MSQUIC_PATH} ./scripts/log_wrapper.sh ${YOUR_COMMAND} # e.g. ./scripts/log_wrapper.sh ./artifacts/bin/linux/x64_Debug_openssl/msquictest --gtest_filter=Basic.* ls msquic_lttng0 # data quic.babel.txt quic.log Step by step command Instead, you can use the following commands: mkdir msquic_lttng lttng create msquic -o=./msquic_lttng lttng enable-event --userspace \"CLOG_*\" lttng add-context --userspace --type=vpid --type=vtid lttng start And to stop log the trace session, you can use the following command: lttng stop msquic Trace Conversion to Text Windows To convert an ETL file to human-readable text, you can use the following netsh.exe command: netsh.exe trace convert quic.etl overwrite=yes If you're using a version of MsQuic that uses an ETW manifest version more recent than the one built into the Windows image, decoding may not provide correct output. To solve this issue, newer versions of Windows (11 and Server 2022) support a manpath parameter that can be used to manually specify a manifest. This will likely always be needed for apps using MsQuic in user mode. netsh.exe trace convert quic.etl manpath=path/to/manifest/MsQuicEtw.man For older versions of Windows that don't support the manpath parameter, you can manually update the installed manifest that is used to decode the file. You can run the following wevtutil.exe commands in an Admin window: wevtutil.exe um path\\to\\MsQuicEtw.man wevtutil.exe im path\\to\\MsQuicEtw.man /rf:path\\to\\msquic.dll /mf:path\\to\\msquic.dll Replace path\\to with the actual paths to the respective files. With the latest manifests installed, now the normal netsh.exe convert command should work. Linux NOTE: msquic.lttng.so must be built to enable lttng logging - see https://lttng.org/docs/v2.13/#doc-liblttng-ust-dl and it must be placed in the same directory as the msquic.so. Building clog2text_lttng: apt install --no-install-recommends -y dotnet-runtime-6.0 dotnet-sdk-6.0 dotnet-host git submodule update --init submodules/clog dotnet build submodules/clog/src/clog2text/clog2text_lttng/ -c Release export PATH=$PWD/submodules/clog/src/clog2text/clog2text_lttng/bin/Release/net6.0/:$PATH To convert the trace, you can use the following commands: babeltrace --names all ./msquic_lttng/* > quic.babel.txt ~/.dotnet/tools/clog2text_lttng -i quic.babel.txt -s clog.sidecar -o quic.log --showTimestamp --showCpuInfo Note The clog.sidecar file that was used to build MsQuic must be used. It can be found in the ./src/manifest directory of the repository. Trace Analysis MsQuic supports a custom plugin for Windows Performance Analyzer (WPA) to detailed analysis of ETW traces. See the WPA instructions for more details. Text Analysis Tool When viewing the traces as text, we recommend TextAnalysisTool.NET (Windows only) and we have several filter files we maintain for it (folder). The different filters are meant to quickly highlight and color code important information. You may also open the trace in Windows Performance Analyzer. See the WPA instructions for more details. Note WPA support for LTTng based logs is not yet available but will be supported in the future. Performance Counters To assist investigations into running systems, MsQuic has a number of performance counters that are updated during runtime. These counters are exposed as an array of unsigned 64-bit integers, via a global GetParam parameter. Sample code demonstrating how to query the performance counters: uint64_t Counters[QUIC_PERF_COUNTER_MAX]; uint32_t BufferLength = sizeof(Counters); MsQuic->GetParam( NULL, QUIC_PARAM_GLOBAL_PERF_COUNTERS, &BufferLength, Counters); Each of the counters available is described here: Counter | Description --------|------------ QUIC_PERF_COUNTER_CONN_CREATED | Total connections ever allocated QUIC_PERF_COUNTER_CONN_HANDSHAKE_FAIL | Total connections that failed during handshake QUIC_PERF_COUNTER_CONN_APP_REJECT | Total connections rejected by the application QUIC_PERF_COUNTER_CONN_RESUMED | Total connections resumed QUIC_PERF_COUNTER_CONN_ACTIVE | Connections currently allocated QUIC_PERF_COUNTER_CONN_CONNECTED | Connections currently in the connected state QUIC_PERF_COUNTER_CONN_PROTOCOL_ERRORS | Total connections shutdown with a protocol error QUIC_PERF_COUNTER_CONN_NO_ALPN | Total connection attempts with no matching ALPN QUIC_PERF_COUNTER_STRM_ACTIVE | Current streams allocated QUIC_PERF_COUNTER_PKTS_SUSPECTED_LOST | Total suspected packets lost QUIC_PERF_COUNTER_PKTS_DROPPED | Total packets dropped for any reason QUIC_PERF_COUNTER_PKTS_DECRYPTION_FAIL | Total packets with decryption failures QUIC_PERF_COUNTER_UDP_RECV | Total UDP datagrams received QUIC_PERF_COUNTER_UDP_SEND | Total UDP datagrams sent QUIC_PERF_COUNTER_UDP_RECV_BYTES | Total UDP payload bytes received QUIC_PERF_COUNTER_UDP_SEND_BYTES | Total UDP payload bytes sent QUIC_PERF_COUNTER_UDP_RECV_EVENTS | Total UDP receive events QUIC_PERF_COUNTER_UDP_SEND_CALLS | Total UDP send API calls QUIC_PERF_COUNTER_APP_SEND_BYTES | Total bytes sent by applications QUIC_PERF_COUNTER_APP_RECV_BYTES | Total bytes received by applications QUIC_PERF_COUNTER_CONN_QUEUE_DEPTH | Current connections queued for processing QUIC_PERF_COUNTER_CONN_OPER_QUEUE_DEPTH | Current connection operations queued QUIC_PERF_COUNTER_CONN_OPER_QUEUED | Total connection operations queued ever QUIC_PERF_COUNTER_CONN_OPER_COMPLETED | Total connection operations processed ever QUIC_PERF_COUNTER_WORK_OPER_QUEUE_DEPTH | Current worker operations queued QUIC_PERF_COUNTER_WORK_OPER_QUEUED | Total worker operations queued ever QUIC_PERF_COUNTER_WORK_OPER_COMPLETED | Total worker operations processed ever QUIC_PERF_COUNTER_PATH_VALIDATED | Total path challenges that succeed ever QUIC_PERF_COUNTER_PATH_FAILURE | Total path challenges that fail ever QUIC_PERF_COUNTER_SEND_STATELESS_RESET | Total stateless reset packets sent ever QUIC_PERF_COUNTER_SEND_STATELESS_RETRY | Total stateless retry packets sent ever Windows Performance Monitor On the latest version of Windows, these counters are also exposed via PerfMon.exe under the QUIC Performance Diagnostics category. The values exposed via PerfMon only represent kernel mode usages of MsQuic, and do not include user mode counters. ETW Counters are also captured at the beginning of MsQuic ETW traces, and unlike PerfMon, includes all MsQuic instances running on the system, both user and kernel mode. Detailed Troubleshooting For detailed trouble shooting steps please see the MsQuic Trouble Shooting Guide."
  },
  "docs/FAQ.html": {
    "href": "docs/FAQ.html",
    "title": "Frequently Asked Questions",
    "keywords": "Frequently Asked Questions Will the rest of Windows also go open source? At this time there is no plan to open source the rest of Windows. When is this shipping with Windows? The kernel mode version, msquic.sys, ships in Windows (Server 2022 and Windows 11). At this time, there is no plan to ship msquic.dll in Windows. For more details see our platform support documentation. Why isn’t there an HTTP/3 implementation along with MsQuic? MsQuic is designed as a generic QUIC transport for any application protocol. Several HTTP/3 stacks that use MsQuic exist, both internal to Windows (http.sys) and external (.NET Core). What platforms does MsQuic support? MsQuic currently supports Windows (including Xbox), Linux (including Android) and macOS (alpha) based platforms. Isn’t QUIC a Google product? QUIC was started by Google, but then was standardized by the IETF (see here). MsQuic is an implementation of that standard. Does this mean Microsoft will stop investing in TCP? TCP will continue to be used widely for a long time and we will continue to improve it as necessary. Why is MsQuic written in C? Windows Kernel mode is one of the supported platforms, and while it supports some C++ features, it does not support all of them. So, it was decided to use just pure C to reduce complexity. The MsQuic API is exposed/projected into several other languages, including C++, C# and Rust."
  },
  "docs/FIPS.html": {
    "href": "docs/FIPS.html",
    "title": "MsQuic and FIPS 140",
    "keywords": "MsQuic and FIPS 140 FIPS 140 certification only applies to cryptographic primitives, and thus neither the TLS implementation, nor MsQuic, needs FIPS certification itself. This means that as long as the cryptographic library used by MsQuic's TLS layer is FIPS certified, MsQuic is compliant. Windows and FIPS 140 Information about the Microsoft Windows(tm) FIPS certification process can be found here. Linux and FIPS 140 On Linux, FIPS is more complicated. The system-provided libcrypto needs to be FIPS certified, and MsQuic needs to be built to use the system-provided libcrypto instead of staticly linking it into the MsQuic library. To accomplish this on Linux, MsQuic must be built using the following flags: pwsh ./build.ps1 -Tls OpenSSL -UseSystemOpenSSLCrypto After that, the system that MsQuic will run on must be configured to use FIPS. An incomplete list below is provided with steps for enabling FIPS mode on known Linux distributions. RHEL 8 Steps and documentation can be found here."
  },
  "docs/InteropServerSetup.html": {
    "href": "docs/InteropServerSetup.html",
    "title": "Setting Up an MsQuic Interop Server",
    "keywords": "Setting Up an MsQuic Interop Server One of the tools in the MsQuic repo is quicinteropserver (source). It is our server solution used for QUIC interoperability testing. You can find the general requirements for this on the QUIC WG Wiki. Building The tool is automatically built with the rest of the repo. See complete build instructions here. There are a few additional things to note beyond the default build instructions. Currently, 0-RTT is only supported on Windows, when using the OpenSSL TLS library. To build for OpenSSL, you must use the -Tls openssl option when calling build.ps. If 0-RTT is not required/needed, then -Tls schannel should be fine to use on Windows, and -Tls openssl for Linux. Once built, you can find the quicinteropserver in (assuming PowerShell is used to build): ./artifacts/bin/{platform}/{arch}_{config}_{tls} For example, if you build with build.ps1 -Config Release -Tls openssl on Windows, the output would be in: ./artifacts/bin/windows/x64_release_openssl The directory contains all the build artifacts, including the base MsQuic library (msquic.dll or libmsquic.so). Deploying To deploy quicinteropserver both the base MsQuic library and the application binary itself will have to be copied to the server machine. If you run quicinteropserver without any arguments, you will get the default usage text. For instance: quicinteropserver is simple http 0.9/1.1 server. Usage: quicinteropserver -listen:<addr or *> -root:<path> [-thumbprint:<cert_thumbprint>] [-name:<cert_name>] [-file:<cert_filepath> AND -key:<cert_key_filepath>] [-port:<####> (def:4433)] [-retry:<0/1> (def:0)] [-upload:<path>] Examples: quicinteropserver -listen:127.0.0.1 -name:localhost -port:443 -root:c:\\temp quicinteropserver -listen:* -retry:1 -thumbprint:175342733b39d81c997817296c9b691172ca6b6e -root:c:\\temp Please see Deployment.md for additional deployment considerations. Windows Instructions The simplest and quickest way to set up the server on Windows is to use a self-signed certificate. The following PowerShell command can easily create one for you: New-SelfSignedCertificate -DnsName $env:computername,localhost,{DnsName} -FriendlyName QuicInteropServer -KeyUsageProperty Sign -KeyUsage DigitalSignature -CertStoreLocation cert:\\CurrentUser\\My -HashAlgorithm SHA256 -Provider \"Microsoft Software Key Storage Provider\" Make sure to replace {DnsName} with the actual public domain name of the server, if you have one. If not available, you may just omit the parameter all together. The PowerShell command will dump the new certificate's thumbprint/hash to the console. You can then use that to start the server. For example: quicinteropserver.exe -listen:* -port:4433 -thumbprint:{thumbprint} -root:{html_root_dir} Make sure to replace {thumbprint} with the thumbprint of the certificate and {html_root_dir} with the full path of directory containing the HTML files you which to serve. It's recommended to include an index.html at the very least in this directory. Also make sure to configure both any necessary firewalls to allow incoming UDP traffic on the configured port (4433 in the case above). The following PowerShell command can easily open up the port in the Windows firewall: New-NetFirewallRule -DisplayName \"QuicInteropServer\" -Direction Inbound -Protocol UDP -LocalPort 4433 -Action Allow Linux Instructions TO-DO Enabling Dump Collection It is a good idea to enable dump collection for any possible crashes, since this is only a test application, and not actual production quality. Windows Instructions You can easily configure WER (Windows Error Reporting) to collect dump files and save them locally, in the directory of you're choosing, via the following PowerShell registry commands: $OutputDir = \"C:\\dumps\" $WerDumpRegPath = \"HKLM:\\Software\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\\quicinteropserver.exe\" if (!(Test-Path $WerDumpRegPath)) { New-Item -Path $WerDumpRegPath -Force | Out-Null } New-ItemProperty -Path $WerDumpRegPath -Name DumpType -PropertyType DWord -Value 2 -Force | Out-Null New-ItemProperty -Path $WerDumpRegPath -Name DumpFolder -PropertyType ExpandString -Value $OutputDir -Force | Out-Null Feel free to update $OutputDir to whatever local directory you wish. Linux Instructions The following commands (run as root) should configure core dumps to be created in the local directory: # Enable core dumps for the system. sudo sh -c \"echo 'root soft core unlimited' >> /etc/security/limits.conf\" sudo sh -c \"echo 'root hard core unlimited' >> /etc/security/limits.conf\" sudo sh -c \"echo '* soft core unlimited' >> /etc/security/limits.conf\" sudo sh -c \"echo '* hard core unlimited' >> /etc/security/limits.conf\" # Set the core dump pattern. sudo sh -c \"echo -n '%e.%p.%t.core' > /proc/sys/kernel/core_pattern\""
  },
  "docs/PGO.html": {
    "href": "docs/PGO.html",
    "title": "Profile Guided Optimizations",
    "keywords": "Profile Guided Optimizations MsQuic uses profile-guided optimizations (PGO) to generate optimized builds of the MsQuic library. PGO lets you optimize the whole library by using data from a previous run of the library. Note This document is Windows specific. Build During the build for x86 and x64 release builds (arm/arm64 are currently unsupported) a profile-guided database file (.pgd), generated from a previous run, is passed to the linker. The linker uses this data to optimize the new build. Build for Training > ./scripts/build.ps1 -Config Release -PGO By default, the library is not built in \"training mode\". To enable this, you must pass the -PGO switch to the build.ps1 PowerShell script. This configures the linker to configure the library so that it can be trained. Whenever the library unloads a .pgc file will be dumped to the local directory. This file can be used update the existing .pgd file. Training A fundamental part of profile-guided optimizations is training. The code is run through production scenarios while in \"training mode\" to generate a data set that can be used for a future build to optimize for the scenario. Build for training. Copy the binaries to the test machine(s). The PGO msquic library. The test tool (e.g. secnetperf). The PGO runtime library from your VS install: (e.g. \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.26.28801\\bin\\Hostx64\\x64\\pgort140.dll\"). Run the test for the production/performance scenario. Use pgomgr to merge the .pgc into the .pgd. Update the .pgd and .pdb files in the repository. Kernel mode Profile Guided Optimizations PGO for kernel mode is a much more manual process than user mode. These steps guide you through the process. Build To build for kernel PGO, copy pgortsys.lib locally and edit the msquicpriv.kernel.vcxproj file with the following patch: diff --git a/src/bin/winkernel/msquicpriv.kernel.vcxproj b/src/bin/winkernel/msquicpriv.kernel.vcxproj index 04d89207..b125cdd7 100644 --- a/src/bin/winkernel/msquicpriv.kernel.vcxproj +++ b/src/bin/winkernel/msquicpriv.kernel.vcxproj @@ -78,7 +78,7 @@ <ImportGroup Label=\"PropertySheets\"> <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" /> </ImportGroup> - <PropertyGroup Label=\"UserMacros\" /> + <PropertyGroup><LibraryPath>$(LibraryPath);$(VC_LibraryPath_VC_x64_Desktop);c:\\path\\to\\directory\\containing\\pgortsys.lib\\</LibraryPath></PropertyGroup> <PropertyGroup> <QUIC_VER_BUILD_ID Condition=\"'$(QUIC_VER_BUILD_ID)' == ''\">0</QUIC_VER_BUILD_ID> <QUIC_VER_SUFFIX Condition=\"'$(QUIC_VER_SUFFIX)' == ''\">-private</QUIC_VER_SUFFIX> @@ -106,7 +106,7 @@ </ClCompile> <Link> <ModuleDefinitionFile>msquicpriv.src</ModuleDefinitionFile> - <AdditionalDependencies>cng.lib;ksecdd.lib;msnetioid.lib;ndis.lib;netio.lib;uuid.lib;%(AdditionalDependencies)</AdditionalDependencies> + <AdditionalDependencies>cng.lib;ksecdd.lib;msnetioid.lib;ndis.lib;netio.lib;uuid.lib;pgortsys.lib;%(AdditionalDependencies)</AdditionalDependencies> <AdditionalOptions>/kernel /NOOPTIDATA /pdbcompress /MERGE:.gfids=GFIDS /MERGE:.orpc=.text /MERGE:_PAGE=PAGE /MERGE:_RDATA=.rdata /MERGE:_TEXT=.text /section:GFIDS,d</AdditionalOptions> <LinkTimeCodeGeneration>UseLinkTimeCodeGeneration</LinkTimeCodeGeneration> </Link> @@ -126,7 +126,7 @@ </ItemDefinitionGroup> <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\"> <Link> - <AdditionalOptions>%(AdditionalOptions) /FORCE:PGOREPRO /USEPROFILE:PGD=$(SolutionDir)artifacts\\bin\\winkernel\\$(Platform)_$(Configuration)_schannel\\priv\\msquic.pgd</AdditionalOptions> + <AdditionalOptions>%(AdditionalOptions) /FORCE:PGOREPRO /LTCG:PGI /Profile</AdditionalOptions> </Link> </ItemDefinitionGroup> <ItemGroup> You should clean build for x64 and Release. Then build user mode MsQuic using the regular script with the following flags -PGO -Tls schannel -config Release. Setting up the perf machines To train kernel mode PGO, we use the secnetperf utility. To configure the perf machines, run the following powershell script as Administrator: param( # Build path [Parameter(Mandatory=$true)] [string]$BuildPath, # MsQuic location [Parameter(Mandatory=$true)] [string]$MsQuicPath, # CPU Architecture [Parameter(Mandatory=$false)] [ValidateSet(\"amd64\", \"x86\", \"arm\", \"arm64\")] [string]$Arch=\"amd64\" ) $PgoBasePath = \"$($BuildPath)\\$($Arch)fre\\pgo\" if (!(Test-Path -Path \"c:\\pgo_collection\")) { New-Item -Path \"c:\\pgo_collection\" -ItemType Directory -Force | Out-Null } Copy-Item -Path \"$($PgoBasePath)\\pgoapi\\*\" -Filter *.ps1 -Destination \"C:\\pgo_collection\" Copy-Item -Path \"$($BuildPath)\\$($Arch)fre\\bin\\idw\\signTool.exe\" -Destination \"C:\\pgo_collection\" Copy-Item -Path \"$($BuildPath)\\$($Arch)fre\\bin\\idw\\signTool.dll\" -Destination \"C:\\pgo_collection\" if (!(Test-Path -Path \"c:\\pgo_collection\\sweep\")) { New-Item -Path \"c:\\pgo_collection\\sweep\" -ItemType Directory -Force | Out-Null } Copy-Item -Path \"$($PgoBasePath)\\kmode\\system32\\pgosweep.exe\" -Destination \"C:\\pgo_collection\\sweep\" Copy-Item -Path \"$($PgoBasePath)\\kmode\\system32\\vcruntime140.dll\" -Destination \"C:\\pgo_collection\\sweep\" Copy-Item -Path \"$($PgoBasePath)\\kmode\\system32\\drivers\\pgodriver.sys\" -Destination \"C:\\pgo_collection\\sweep\" Copy-Item -Path \"$($PgoBasePath)\\bbttools\\bbtlddll.exe\" -Destination \"C:\\pgo_collection\\sweep\" Copy-Item -Path \"$($PgoBasePath)\\bbttools\\createdir.sys\" -Destination \"C:\\pgo_collection\\sweep\" Copy-Item -Path \"$($PgoBasePath)\\tools\\pgort140.dll\" -Destination \"C:\\pgo_collection\\sweep\" # Install PGO powershell -NonInteractive -NoProfile -File \"c:\\pgo_collection\\install-pgo.ps1\" -PgoChunkPath $PgoBasePath -PgoChunkNativePath $PgoBasePath -PgoCollectionDir \"c:\\pgo_collection\" -SignTool \"c:\\pgo_collection\\signtool.exe\" -PGOArch $Arch # Fix PGODriver sc.exe config pgodriver start= auto # Copy MsQuic if ($arch -eq \"amd64\") { $QuicArch = \"x64\" } else { $QuicArch = $Arch } $WindowsBinPath = \"artifacts\\bin\\windows\\$($QuicArch)_Release_schannel\" $WinKernelBinPath = \"artifacts\\bin\\winKernel\\$($QuicArch)_Release_schannel\" if (!(Test-Path -Path \"c:\\msquic\\$($WindowsBinPath)\")) { New-Item -Path \"c:\\msquic\\$($WindowsBinPath)\" -ItemType Directory -Force | Out-Null } if (!(Test-Path -Path \"c:\\msquic\\$($WinKernelBinPath)\")) { New-Item -Path \"c:\\msquic\\$($WinKernelBinPath)\" -ItemType Directory -Force | Out-Null } Copy-Item -Path \"$($MsQuicPath)\\$($WindowsBinPath)\\msquic.dll\" -Destination \"c:\\msquic\\$($WinKernelBinPath)\" Copy-Item -Path \"$($MsQuicPath)\\$($WindowsBinPath)\\secnetperf.exe\" -Destination \"c:\\msquic\\$($WinKernelBinPath)\" Copy-Item -Path \"$($MsQuicPath)\\$($WinKernelBinPath)\\*\" -Destination \"c:\\msquic\\$($WinKernelBinPath)\" sc.exe create \"msquicpriv\" type= kernel binpath= \"C:\\msquic\\$($WinKernelBinPath)\\msquicpriv.sys\" start= demand New-NetFirewallRule -DisplayName \"Allow SecNetPerf\" -Enabled True -Profile Any -Direction Inbound -Action Allow -Protocol UDP -LocalPort 4433 bcdedit /debug on Write-Host Now Reboot the machine Make sure the machine is configured for kernel debugging and a kernel debugger is attached, otherwise the msquicpriv.sys driver won't load. Training Now that the perf machines are configured for kernel mode PGO, it's time to run the scenarios. On the machine that will act as server, run the following command to start the server: secnetperf.exe -kernel Once running, clear the PGO counts on both the client and server machines to get a clean slate: pgosweep.exe /driver msquicpriv.sys .\\msquicpriv.pgc del msquicpriv.pgc On the machine acting as client, run the following commands to generate traffic: secnetperf.exe --kernel -test:tput -target:<server IP> -upload:5000000000 secnetperf.exe --kernel -test:tput -target:<server IP> -download:5000000000 secnetperf.exe --kernel -test:RPS -target:<server IP> secnetperf.exe --kernel -test:HPS -target:<server IP> After the client finishes all scenarios, run this again on the client and the server to collect the updated counts: pgosweep.exe /driver msquicpriv.sys .\\msquicpriv.pgc Copy the .pgc files to a machine with the Visual Studio tools installed and run the following to merge the PGC files into the PGD that was generated during build, and then copy that PGD into the git repo: pgomgr.exe /merge msquicpriv-client.pgc msquicpriv-server.pgc c:\\msquic\\artifacts\\bin\\winkernel\\x64_Release_schannel\\msquicpriv.pgd xcopy :\\msquic\\artifacts\\bin\\winkernel\\x64_Release_schannel\\msquicpriv.pgd c:\\msquic\\src\\bin\\winkernel\\pgo_x64\\msquic.pgd If pgomgr.exe emits a warning that the database doesn't match, use pgodump.exe to check the ID of both the PGD and PGC files and ensure they match. If the PGC file doesn't match, it's most likely because msquicpriv.sys didn't unload completely when you installed a new one. You will need to stop PGODriver.sys before stopping msquicpriv.sys when replacing msquicpriv.sys with a newer version. You can also reboot the system after replacing msquicpriv.sys. Sample output from pgodump.exe showing the IDs are same between PGD and PGC > pgodump.exe c:\\msquic\\artifacts\\bin\\winkernel\\x64_Release_schannel\\msquicpriv.pgd Microsoft (R) Profile Guided Optimization Database Dump Utility Copyright (C) Microsoft Corporation. All rights reserved. PGD File: c:\\msquic\\artifacts\\bin\\winkernel\\x64_Release_schannel\\msquicpriv.pgd (v44, ID CC21BC03, Signature 4F474F50) 10/27/2020 22:25:53 > pgodump.exe msquicpriv-client.pgc Microsoft (R) Profile Guided Optimization Database Dump Utility Copyright (C) Microsoft Corporation. All rights reserved. PGC File: msquicpriv!client.pgc (ID CC21BC03)"
  },
  "docs/Platforms.html": {
    "href": "docs/Platforms.html",
    "title": "Platform Support",
    "keywords": "Platform Support MsQuic currently officially supports the following platform configurations. Information on support for MsQuic itself is located in Release.md. Windows On Windows, by default, MsQuic relies on built-in support from Schannel for TLS 1.3 functionality. MsQuic is shipped in-box in the Windows kernel in the form of the msquic.sys driver, to support built-in HTTP and SMB features. User mode applications use msquic.dll (built from here) and package it with their app. Important This configuration requires running either Windows Server 2022, Windows 11 or the latest Windows Insider Preview Builds for Schannel's TLS 1.3 support. Important This configuration does not support 0-RTT due to Schannel's current lack of support. OpenSSL Optionally, msquic.dll can be built with OpenSSL (see below for more details) instead of Schannel on Windows. This removes the Windows OS dependency on TLS from MsQuic, so MsQuic should work on most Windows 10 based client and server versions (it may work on even older Windows releases but supporting them is not a goal for MsQuic). Both version 1.1 and 3.1 of OpenSSL are supported. Linux On Linux, MsQuic relies on OpenSSL for TLS 1.3 functionality. Both version 1.1 and 3.1 are supported. The libmsquic package will generally depend on the default OS installed OpenSSL version's libcrypto. Important This configuration relies on a fork of OpenSSL for QUIC/TLS support. It is still currently unknown as to when mainline will support QUIC. See here for more details. MsQuic with OpenSSL does fully support 0-RTT. Other For testing or experimentation purposes, MsQuic may be built with other configurations, but they are not to be considered officially supported unless they are listed above. Any bugs found while using these configurations may be looked at, but no guarantees are provided that they will be fixed."
  },
  "docs/Release.html": {
    "href": "docs/Release.html",
    "title": "Support for MsQuic",
    "keywords": "Support for MsQuic An MsQuic release begins its life in the main branch where it receives feature updates as well as servicing for security and bug fixes. When it is time to release, the code will be forked into a release branch where it is considered stable and will generally only receive servicing for security and bug fixes. MsQuic Branches MsQuic has two main types of branches main and release defined as: Main - Main is the primary development branch, and receives security and bug fixes just the same as the release branches. However, the main branch is where active development happens and because of this the main branch may experience breaking changes as we develop new features. Release - Release branches only receive security and bug fixes, and are considered stable. There should be no breaking changes in these branches, and they can be used for stable products. Prerelease - The Releases section below indicates which releases are considered officially supported and serviced releases. All others are considered prereleases, which are generally considered stable, but will not receive servicing fixes. * Both main and official release branches receive critical fixes throughout their lifecycle, for security, reliability. Release Support Policies MsQuic support lifecycle is governed by the Windows Server servicing channels: LTSC and SAC LTSC indicates official release branches to be serviced for 5 years mainstream and 5 years extended. SAC indicates official release branches to be serviced for 18 months. PRE indicates prerelease branches (not officially supported). TBD indicates release branches that are set to be classified as one of the above. Important Main and prerelease branches are considered not officially supported. Prerelease branches get no further changes. Main is under active development (i.e. not stable), however it does receive security and bug fixes. End of support End of support refers to the date when Microsoft no longer provides fixes, updates, or online technical assistance for your product. As this date nears, make sure you have the latest available update installed. Without Microsoft support, you will no longer receive security updates that can help protect your machine from harmful viruses, spyware, and other malicious software that can steal your personal information. Releases A release branch will be created (forked) for each release of MsQuic. Official release branches will then go through a several month stabilization process before it is then finalized. Once finalized, offical release branches will only be serviced with security and bug fixes throughout its lifecycle. MsQuic official releases generally will correspond to Windows releases, but in some cases additional future releases may be created for other major products. Official releases for Windows generally will end support at the same time as the Windows release. This table describes all officially supported MsQuic releases. Type Branch Consumer Fork Date Release Date End of Support Supported Platforms LTSC release/1.0 None Nov 13 2020 Jan 5 2021 Jan 4 2026 Windows SAC release/2.0 None Mar 1 2022 May 1 2022 Nov 1 2023 Windows, Linux SAC release/2.1 Server 2022 Windows 11 .NET 7 Aug 5 2022 Oct 5 2022 Apr 5 2024 Windows, Linux SAC release/2.2 TBD Apr 18 2023 June 1 2023 Dec 1 2024 Windows, Linux * Future Release Dates are subject to change. ** End of Support dates do not include possible extended support extensions. Publishing a Release Create a New Release Branch Add (via PR) notes above for the new release. Fork main branch to release/X.Y where X is the major version and Y is the minor version. Update (via PR) the minor version for the main branch: Run ./scripts/update-version.ps1 -Part Minor to generate the relavent changes. Also add the new version to the bug_report.yaml issue template file. Servicing a Release Branch Changes first go into the main branch, and then are cherry-picked into the relavent release/X.Y branches. Update (via PR) the patch version for the release branches: Run ./scripts/update-version.ps1 -Part Patch to generate the relavent changes. Publishing a Release Branch Create a new GitHub release along with the corresponding tag. Make sure to pick the correct release/X.Y branch The tag should be the full version number: vX.Y.Z The release title should be MsQuic vX.Y.Z Put relavent information in the notes of the release (see previous releases for examples) Wait for msquic-Official pipeline to run for the newly created tag. Download the signed Linux packages (under drop_package_linux_distribution), upload them to the GitHub release and publish them (via MsQuic-Publish) to https://packages.microsoft.com: libmsquic-X.Y.Z-1-aarch64.rpm libmsquic-X.Y.Z-1-armhf.rpm libmsquic-X.Y.Z-1-x86_64.rpm libmsquic-X.Y.Z-amd64.deb libmsquic-X.Y.Z-arm64.deb libmsquic-X.Y.Z-armhf.deb Download the signed Windows NuGet packages (under drop_package_windows_nuget) and upload them to NuGet: Microsoft.Native.Quic.MsQuic.OpenSSL.X.Y.Z.BUILD.nupkg Microsoft.Native.Quic.MsQuic.Schannel.X.Y.Z.BUILD.nupkg Use https://raw.githubusercontent.com/microsoft/msquic/vX.Y.Z/README.md as package description URL. Wait for msquic-Official-Tests pipeline to run for the newly created tag. Download the distribution packages from the artifacts and upload them to the GitHub release: msquic_gamecore_console_x64_Release_schannel.zip msquic_linux_x64_Release_openssl.zip msquic_linux_x64_Release_openssl_test.zip msquic_windows_arm64_Release_openssl.zip msquic_windows_arm64_Release_schannel.zip msquic_windows_arm_Release_openssl.zip msquic_windows_arm_Release_schannel.zip msquic_windows_x64_Release_openssl.zip msquic_windows_x64_Release_schannel.zip msquic_windows_x64_Release_schannel_test.zip msquic_windows_x86_Release_openssl.zip msquic_windows_x86_Release_schannel.zip The macOS distribution package isn't generated from the internal pipelines. Grab it from the public CI from the latest run of the release branch (under distribution), and upload it to the GitHub release: msquic_macos_universal_Release_openssl.zip From Linux (use GitHub Codespace) to publish the latest Rust Crate. Run cargo publish from the release/X.Y branch. Update (via PR) main branch's test-down-level.yml to point the newly uploaded *_test.zip release binaries. Synchronizing with Windows Once the release branch is created, set the pipeline here to ingest the release branch into Windows, and run it. When the pipeline passes tests, it'll create a PR. Review and merge the PR to complete the process. MsQuic v1.0 (LTSC) MsQuic v1.0 is the first officially supported release. The primary shipping vehicle for this release will be the Windows Server 2022 release. No official, signed binaries are currently slated to be released. Linux support is considered a preview for this release. The QUIC specifications are currently \"Submitted to IESG for Publication\", so both the v1 and draft-29 versions are supported by this release. Important QUIC protocol features not fully implemented: 0-RTT Client-side Migration Server Preferred Address Path MTU Discovery Known Issues GetParam for QUIC_PARAM_CONN_STATISTICS does not populate Handshake.* fields. MsQuic v1.1 (SAC) MsQuic v1.1 has various small improvements from v1.0. The primary shipping vehicle for this release will be the Windows 11 client release. These changes include: Preview support for Version Negotiation extension. Public API header build fixes. Improved certificate validation APIs. OpenSSL certificate validation fixes. Added (off by default) SSLKEYLOGFILE support. Linux datapath bug fixes and improvements. Various CI improvements around performance testing; including TCP comparison support. Diagnostics documentation improvements. The QUIC specifications have been approved by the IESG and are in RFC editor queue. Both the v1 and draft-29 versions are supported by this release. Known Issues GetParam for QUIC_PARAM_CONN_STATISTICS does not populate Handshake.* fields. MsQuic v1.2 (Prerelease) Not officially supported MsQuic v1.2 has numerous improvements from v1.1. As this is a prerelease, there is no expected shipping vehicle for this release. Some noted changes in this release include: Switched to quictls (https://github.com/quictls/openssl) and the 1.1.1 branch of OpenSSL instead of 3.0 Initial MacOS support added (using OpenSSL) Support for RSS, GSO and Receive Batching on Linux Initial OpenSSL session resumption and 0-RTT support Improved CPU and WAN performance Various API improvements (e.g. new delayed send API flag; query handshake info) Initial client certificate support with Schannel on Windows Initial support for ACK frequency (or delayed ACK) QUIC extension Support for pkcs12 imports The QUIC specifications are still in RFC editor queue. Both the v1 and draft-29 versions are still supported by this release. MsQuic v1.3 (Prerelease) Not officially supported MsQuic v1.3 has numerous improvements from v1.2. As this is a prerelease, there is no expected shipping vehicle for this release. Some noted changes in this release include: Removed old/unused mitls and stub TLS providers. Only schannel and openssl are officially supported (#1398, #1411). Fully support Resumption and 0-RTT with OpenSSL (#1469). Fully support Windows UWP apps (#1429, #1452, #1454). Support Client certificate validation (#1366). Support ChaCha20-Poly1305 with OpenSSL (#1431). Support Cipher Suite allow-list (#1430). Support Portable Certificate verification (#1450). Various performance improvements (tune recv pkt queue, worker partition ID for send, UDP send queuing) (#1424, #1448, #1451, #1456, #1474, #1483). Fixed SO_REUSEPORT perf issue on server sockets (Linux only) (#1391). Fixed various issues with macOS (arm platform detection, max CPU count) (#1388, #1427). Fixes bugs that causes stream to get in (temporary) bad state when aborting receive path (#1513, #1516). Update StreamShutdown to run inline on callbacks (#1521). Support universal binaries for macOS (#1414). Added/updated documentation, especially around trouble shooting (#1423, #1467, #1481, #1486). Refactored/improved WPA plugin and cmd line tool, QuicTrace (#1482, #1484, #1485, #1490, #1493, #1499). The QUIC specifications are being actively looked at by the RFC editor. Both the v1 and draft-29 versions are still supported by this release. MsQuic v1.4 (Prerelease) Not officially supported MsQuic v1.4 has numerous improvements from v1.3. As this is a prerelease, there is no expected shipping vehicle for this release. Some noted changes in this release include: Updated User Mode PGO. Perf improvement from sent packet metadata stream ref counting (#1529). Support address sanitizer on Windows. Random allocation test support for SpinQuic and BVT (#1537, #1541). Fix key phase and key update detection logic (#1548). Fixed bug with stateless reset and retired CIDs (#1568). Add support for Peer Accept Stream event (#1560). Various bug fixes found from random allocation failure tests. Various additional test cases added. Added multiple API version support. Lots of improved documentation. Enabled ACK frequency in CPU limited scenarios (#1588). Support for DPLPMTUD (#1563). Reduced min MTU to 1248 (#1673). Refactored POSIX error codes (breaking change for POSIX, #1645). The QUIC specifications now offically RFC. Both the v1 and draft-29 versions are still supported by this release. MsQuic v1.5 (Prerelease) Not officially supported MsQuic v1.5 is a prerelease so there is no expected shipping vehicle. Some noted changes in this release include: Windows Kernel client certificate support (#1652). Added load balancer app (#1696) and automated testing (#1707). Fixed a bug for QUIC_SETTING size validation logic (#1724). Added support for local UDP port sharing (Linux only) (#1751). Switched Param Id's to not be overlapping (#1758). Refactored library load (#1748) and added static linking support (Windows only) (#1446). Fixed bug around handshake idle timeout (#1780). Added support for stream prioritization (#1778). Fixed bug when shutting connection down during the handshake (#1797). Improved testing around path changes and few minor bug fixes (#1783, #1801). Improved event callback reentrancy to reduce app complexity (#1802). Fixed bug related to sharing abort code for stream send/recv shutdown (#1809). Fixed bug related to queuing 0-RTT during the handshake (but after start) (#1817). Use root level certificate verification callback in OpenSSL (#1818). Ignore Duplicate Stream Read Shutdowns (#1822). Constrain processor index to processor count on posix (#1824). Build speed and build dependency improvements (#1845) (#1839). Initial support for Android binaries (#1835). Update version negotiation to draft v4 (#1826). Fix issues where datapaths and sockets might be used incorrectly (#1843) (#1837). Various documentation improvements and additions. Official (v1) RFC and draft-29 are supported by this release. MsQuic v1.6 (Prerelease) Not officially supported MsQuic v1.6 is a prerelease so there is no expected shipping vehicle. Some noted changes in this release include: Support ConnectionClose calls in NEW_CONNECTION Event (#1849). Some Linux packaging fixes (#1852) and build fixes (#1855). Support Setting Local Interface Index (#1804) on Windows. Fix issue with no certificate validation set on client certificate (#1728). Official (v1) RFC and draft-29 are supported by this release. MsQuic v1.7 (Prerelease) Not officially supported MsQuic v1.7 is a prerelease so there is no expected shipping vehicle. Some noted changes in this release include: Enable Spectre mitigations and CFG for windows user mode (#1854). Add support for tracing owning process in kernel mode (#1865). Release binaries are now signed (#1869) (#1879). Return ABORTED rather than INVALID_STATE if stream opened or started after remote close (#1875). Fix potential spin loop during send if there is not enough room to send (#1886). Support building posix without sendmmsg (#1896). Use larger batch size if send segmentation is not available in posix (#1897). Fix library version being set in incorrect location (#1905). Official (v1) RFC and draft-29 are supported by this release. MsQuic v1.8 (Prerelease) Not officially supported MsQuic v1.8 is a prerelease so there is no expected shipping vehicle. Signed Windows binaries are available. Some noted changes in this release include: Update OpenSSL to v1.1.1l (#1936). Add support for client certificates with OpenSSL (#1930). Bug fix for race condition around stateless operations and binding initialization (#1928). Bug fix for NULL pointer read in stateless retry scenario (#1951). Bug fix for path changes incorrectly resetting CC's bytes in flight (#1976). Refactor CC to support multiple algorithms (#1949). Various fixes for packaging automation (#1915, #1916, #1921, #1939, #1961). Improvements in memory calculations for posix platforms (#1928). Use inbox certificate validation for macOS/iOS (#1925). Build macOS/iOS framework bundles (#1927). Enable macOS core dump collection in automation (#1969). Xbox GameCore build support (#1947). Various test code fixes (#1970, #1974). Official (v1) RFC and draft-29 are supported by this release. MsQuic v1.9 (Prerelease) Not officially supported MsQuic v1.9 is a prerelease so there is no expected shipping vehicle. Signed Windows binaries are available. Some noted changes in this release include: Xbox GameCore Support (#1973, #2005, #2084) Adds performance counters around path changes (#1990) Bug Fix: Fix shutdown bug by cleaning up all sends (#1850) Additional connetion event documentation (#1996) Add UWP nuget package support (#2002) Improve client certificate validation (#1966) Support non-RSA keys in OpenSSL-CAPI abstraction (#2000) Bug Fix: Fix stream abort bug (#2049) Bug Fix: Fix connection FC handling on stream abort (#2070) Bug Fix: Fix rare endless loop in send path (#2082) Official (v1) RFC and draft-29 are supported by this release. MsQuic v2.0 (SAC) MsQuic v2.0 is an official release. Signed Windows binaries and NuGet packages are available. Signed Linux package are also available. Official (v1) RFC and draft-29 are supported by this release. Breaking Changes Fix QUIC_SETTINGS across different versions (#2271) Remove synchronous StreamStart (#2312) Remove Level from SetParam/GetParam (#2322) Add new datagram send state enum (#2342) Add support for async listener stop (#2346) Refactor custom CID prefix (#2363) Make StreamReceiveComplete not fail (#2371) Upgrade Notes The following changes will be necessary for apps that upgrade from v1.* to v2.0: Remove any usage of QUIC_STREAM_START_FLAG_ASYNC, replacing with QUIC_STREAM_START_FLAG_NONE if no other flags are used. If the flag was not used before, the app code must handle the call not blocking any more. Remove all Level parameters passed to GetParam or SetParam. Ensure the app handles ListenerStop not blocking any more. ListenerClose still blocks. No more need to check for a return code from StreamReceiveComplete. QUIC_ADDRESS_FAMILY_IPV6 has been changed to be platform specific rather then always windows values. For C/C++ consumers this is only a binary breaking change. For Interop consumers, the value will change for linux and macOS. Other Changes Various Linux build and packaging improvements (#2090, #2092, #2097) Various OpenSSL improvements and refactoring (#2098, #2083, #2111, #2154) Various certificate handling improvements and refactoring (#2155, #2158, #2160, #2164) Mirroring and OneBranch build infrastructure improvements (#2093, #2097, #2125, #2127, #2128, #2129) Datapath refactoring for low latency work (#2107, #2122, #2130, #2132, #2134, #2161, #2168) Various WAN perf improvements (#2266, #2269, #2270, #2296, #2304, #2309, #2343) Updates for ACK Frequency Draft-2 (#2347) Performance tool improvements (#2110, #2113, #2166) Visual Studio 2022 support (#2119) Interop layers for Rust and C# (#1832, #2100, #1917) Update OpenSSL to 1.1.1m (#2229) Various documentation improvements Added scorecard and dependabot support (#2310) Fix macOS datapath asserting in an initialization race (#2398) Add QUIC_STATISTICS_V2 parameter (#2386) MsQuic v2.1 (SAC) MsQuic v2.1 is an official release. Signed Windows binaries and NuGet packages are available. Signed Linux package are also available. Official (v1) RFC, v2 (WG-LC) and draft-29 are supported by this release. Changes Various bug fixes (#2451, #2608, #2612, #2695, #2694, #2696, #2738, #2746, #2870, #2685, #2929) Various minor features and API improvements (#2702, #2724, #2729, #2730, #2740, #2852, #2872, #2883, #2907, #2785, #2932, #2876, #2936) Block well-known reflection ports (#2613, #2675) Update CUBIC to rfc8312bis (#2877) Add Stream statistics (#2873) Various infra and automation improvements (many) Various documentation improvements (many) Various test improvements (many) CIBIR extension preview support (#2445) Windows XDP preview support (many) MsQuic v2.2 (SAC) MsQuic v2.2 is an official release. Signed Windows binaries and NuGet packages are available. Signed Linux package are also available. OpenSSL 3.1 support was added along side 1.1. MsQuic over XDP is in preview support. Official (v1) RFC, v2 (WG-LC) and draft-29 are supported by this release. Breaking Changes None Features Support for Changing ALPN on Listener Callback (#2959, #2972) Platform IO and Datapath Refactoring (#2968, #2992, #3019, #3020, #3034, #3121, #3139, #3283, #3282, #3285, #3286, #3292, #3290, #3274, #3304, #3440, #3489, #3515) Grease QUIC Bit Extension Support (#2967) Various C# Interop Improvements (#3029, #3031, #3032, #3037, #3038, #3068, #3449) Increase Initial Packet Sizes to Help with Amplification Protection (#2697) Full ECN Support (#3149, #3166, #3169, #3168, #3216) Perf Counter Snapshot Improvements (#3167) Support Fixed Server ID Encoded Load Balancing Mode (#3172) Added support for ca certificate file setting in SSL_CTX (#3132) Async ticket validation (#3186, #3318) Support Inline StreamSends (#3284) Posix NUMA Node Support (#3297, #3380) Add support for RIO (#3258) WPA to support LTTng trace visualization (#3294) HyStart++ for MsQuic (#3246) Adds Hashtable Restructuring (#3344) Add Support for Custom TLS Alert in Certificate Validation Failure (#3391) Make chacha Optional on Linux (#3423) OpenSSL 3.1.0 Support (#3511) Bug Fixes Always creating worker threads without affinitization on error (#3041) Use correct length increment for msg_controllen (#3065) Send frame streams blocked (#3118) Silo Improvements on Client Side (#3248) gamecore_console: avoid importing timeGetDevCaps (#3332) fix MAC_CTX creation with OpenSSL 3 (#3436) Fix Stream Blocked (#3432) Fix Listner Use after Free in Cleanup Path (#3444) Update the Binding Lookup Logic to Match Server and Client Sockets (#3439) Block Wildcard Address Client Connections (#3483) Handle sending path challenge on paths that have not resolved route yet (#3545) Fix QUIC_TLS_SECRETS on Server and Client. (#3539)"
  },
  "docs/Settings.html": {
    "href": "docs/Settings.html",
    "title": "MsQuic Settings",
    "keywords": "MsQuic Settings MsQuic supports a number of configuration knobs (or settings). These settings can either be set dynamically (via the QUIC_SETTINGS structure) or via persistent storage (e.g. registry on Windows). Warning Generally MsQuic already choses the best / most correct default values for all settings. Settings should only be changed after due diligence and A/B testing is performed. MsQuic settings are available on most MsQuic API objects. Here we'll provide an overview of them with links to further details. Windows Registry MsQuic supports most of the settings in the QUIC_SETTINGS struct in the registry to be loaded as defaults when the MsQuic library is loaded in a process. These registry settings only provide the defaults; the application is free to change the settings with a call to SetParam or in QUIC_SETTINGS structs passed into ConfigurationOpen. The default settings are updated automatically in the application when changing the registry, assuming the application hasn't already changed the setting, which overrides the registry value. However, this does not change the settings on Connections which are already established, or Configurations which are already created. Note: MaxWorkerQueueDelay uses milliseconds in the registry, but uses microseconds (us) in the QUIC_SETTINGS struct. The following settings are unique to the registry: Setting Type Registry Name Default Description Max Worker Queue Delay uint32_t MaxWorkerQueueDelayMs 250 The maximum queue delay (in ms) allowed for a worker thread. Max Partition Count uint16_t MaxPartitionCount System CPU count The maximum processor count used for partitioning work in MsQuic. Max 512. Restart is required. The following settings are available via registry as well as via QUIC_SETTINGS: Setting Type Registry Name Default Description Max Bytes per Key uint64_t MaxBytesPerKey 274,877,906,944 Maximum number of bytes to encrypt with a single 1-RTT encryption key before initiating key update. Handshake Idle Timeout uint64_t HandshakeIdleTimeoutMs 10,000 How long a handshake can idle before it is discarded. Idle Timeout uint64_t IdleTimeoutMs 30,000 How long a connection can go idle before it is gracefully shut down. 0 to disable timeout Max TLS Send Buffer (Client) uint32_t TlsClientMaxSendBuffer 4,096 How much client TLS data to buffer. Max TLS Send Buffer (Server) uint32_t TlsServerMaxSendBuffer 8,192 How much server TLS data to buffer. Stream Receive Window uint32_t StreamRecvWindowDefault 32,768 Initial stream receive window size. Stream Receive Buffer uint32_t StreamRecvBufferDefault 4,096 Stream initial buffer size. Flow Control Window uint32_t ConnFlowControlWindow 16,777,216 Connection-wide flow control window. Max Stateless Operations uint32_t MaxStatelessOperations 16 The maximum number of stateless operations that may be queued on a worker at any one time. Initial Window uint32_t InitialWindowPackets 10 The size (in packets) of the initial congestion window for a connection. Send Idle Timeout uint32_t SendIdleTimeoutMs 1,000 Reset congestion control after being idle SendIdleTimeoutMs milliseconds. Initial RTT uint32_t InitialRttMs 333 Initial RTT estimate. Max ACK Delay uint32_t MaxAckDelayMs 25 How long to wait after receiving data before sending an ACK. Disconnect Timeout uint32_t DisconnectTimeoutMs 16,000 How long to wait for an ACK before declaring a path dead and disconnecting. Keep Alive Interval uint32_t KeepAliveIntervalMs 0 (disabled) How often to send PING frames to keep a connection alive. Idle Timeout Period Changes DestCid uint32_t DestCidUpdateIdleTimeoutMs 20,000 Idle timeout period after which the destination CID is updated before sending again. Peer Stream Count (Bidirectional) uint16_t PeerBidiStreamCount 0 Number of bidirectional streams to allow the peer to open. Peer Stream Count (Unidirectional) uint16_t PeerUnidiStreamCount 0 Number of unidirectional streams to allow the peer to open. Retry Memory Limit uint16_t RetryMemoryFraction 65 (~0.1%) The percentage of available memory usable for handshake connections before stateless retry is used. Calculated as N/65535. Load Balancing Mode uint16_t LoadBalancingMode 0 (disabled) Global setting, not per-connection/configuration. Max Operations per Drain uint8_t MaxOperationsPerDrain 16 The maximum number of operations to drain per connection quantum. Send Buffering uint8_t SendBufferingEnabled 1 (TRUE) Buffer send data within MsQuic instead of holding application buffers until sent data is acknowledged. Send Pacing uint8_t PacingEnabled 1 (TRUE) Pace sending to avoid overfilling buffers on the path. Client Migration Support uint8_t MigrationEnabled 1 (TRUE) Enable clients to migrate IP addresses and tuples. Requires a cooperative load-balancer, or no load-balancer. Datagram Receive Support uint8_t DatagramReceiveEnabled 0 (FALSE) Advertise support for QUIC datagram extension. Server Resumption Level uint8_t ServerResumptionLevel 0 (No resumption) Server only. Controls resumption tickets and/or 0-RTT server support. Grease Quic Bit Support uint8_t GreaseQuicBitEnabled 0 (FALSE) Advertise support for Grease QUIC Bit extension. Minimum MTU uint16_t MinimumMtu 1288 The minimum MTU supported by a connection. This will be used as the starting MTU. Maximum MTU uint16_t MaximumMtu 1500 The maximum MTU supported by a connection. This will be the maximum probed value. MTU Discovery Search Timeout uint64_t MtuDiscoverySearchCompleteTimeoutUs 600000000 The time in microseconds to wait before reattempting MTU probing if max was not reached. MTU Discovery Missing Probe Count uint8_t MtuDiscoveryMissingProbeCount 3 The number of MTU probes to retry before exiting MTU probing. Max Binding Stateless Operations uint16_t MaxBindingStatelessOperations 100 The maximum number of stateless operations that may be queued on a binding at any one time. Stateless Operation Expiration uint16_t StatelessOperationExpirationMs 100 The time limit between operations for the same endpoint, in milliseconds. Congestion Control Algorithm uint16_t CongestionControlAlgorithm 0 (Cubic) The congestion control algorithm used for the connection. ECN uint8_t EcnEnabled 0 (FALSE) Enable sender-side ECN support. The types map to registry types as follows: uint64_t is a REG_QWORD. uint32_t, uint16_t, and uint8_t are REG_DWORD. While REG_DWORD can hold values larger than uint16_t, the administrator should ensure they do not exceed the maximum value of 65,535 when configuring a uint16_t setting via the Windows Registry. The following settings are available via registry as well as via QUIC_VERSION_SETTINGS: Setting Type Registry Name Default Description Acceptable Versions List uint32_t[] AcceptableVersions Unset Sets the list of versions that a given server instance will use if a client sends a first flight using them. Offered Versions List uint32_t[] OfferedVersions Unset Sets the list of versions that a given server instance will send in a Version Negotiation packet if it receives a first flight from an unknown version. This list will most often be equal to the Acceptable Versions list. Fully-Deployed Versions List uint32_t[] FullyDeployedVersions Unset Sets the list of QUIC versions that is supported and negotiated by every single QUIC server instance in this deployment. Used to generate the AvailableVersions list in the Version Negotiation Extension Transport Parameter. The uint32_t[] type is a REG_BINARY blob of the versions list, with each version in little-endian format. All restrictions and effects on the versions mentioned in QUIC_VERSION_SETTINGS apply to the registry-set versions as well. Particularly, on server, these must be set GLOBALLY if you want them to take effect for servers. QUIC_SETTINGS A QUIC_SETTINGS struct is used to configure settings on a Configuration handle, Connection handle, or globally. For more details see QUIC_SETTINGS. API Object Parameters MsQuic API Objects have a number of settings, or parameters, which can be queried via GetParam, or can be set/modifed via SetParam. Global Parameters These parameters are accessed by calling GetParam or SetParam with QUIC_PARAM_GLOBAL_* and a NULL object handle. Setting Type Get/Set Description QUIC_PARAM_GLOBAL_RETRY_MEMORY_PERCENT 0 uint16_t Both The percentage of available memory usable for handshake connections before stateless retry is used. QUIC_PARAM_GLOBAL_SUPPORTED_VERSIONS 1 uint32_t[] Get-only List of QUIC protocol versions supported in network byte order. QUIC_PARAM_GLOBAL_LOAD_BALACING_MODE 2 uint16_t Both Must be a QUIC_LOAD_BALANCING_MODE. QUIC_PARAM_GLOBAL_PERF_COUNTERS 3 uint64_t[] Get-only Array size is QUIC_PERF_COUNTER_MAX. QUIC_PARAM_GLOBAL_LIBRARY_VERSION 4 uint32_t[4] Get-only MsQuic API version. QUIC_PARAM_GLOBAL_SETTINGS 5 QUIC_SETTINGS Both Globally change settings for all subsequent connections. QUIC_PARAM_GLOBAL_GLOBAL_SETTINGS 6 QUIC_GLOBAL_SETTINGS Both Globally change global only settings. QUIC_PARAM_GLOBAL_VERSION_SETTINGS 7 QUIC_VERSIONS_SETTINGS Both Globally change version settings for all subsequent connections. QUIC_PARAM_GLOBAL_LIBRARY_GIT_HASH 8 char[64] Get-only Git hash used to build MsQuic (null terminated string) QUIC_PARAM_GLOBAL_EXECUTION_CONFIG 9 QUIC_EXECUTION_CONFIG Both Globally configure the execution model used for QUIC. Must be set before opening registration. QUIC_PARAM_GLOBAL_TLS_PROVIDER 10 QUIC_TLS_PROVIDER Get-Only The TLS provider being used by MsQuic for the TLS handshake. Registration Parameters These parameters are accessed by calling GetParam or SetParam with QUIC_PARAM_REGISTRATION_* and a Registration object handle. Setting Type Get/Set Description Configuration Parameters These parameters are accessed by calling GetParam or SetParam with QUIC_PARAM_CONFIGURATION_* and a Configuration object handle. Setting Type Get/Set Description QUIC_PARAM_CONFIGURATION_SETTINGS 0 QUIC_SETTINGS Both Settings to use for all connections sharing this Configuration. See QUIC_SETTINGS. QUIC_PARAM_CONFIGURATION_TICKET_KEYS 1 QUIC_TICKET_KEY_CONFIG[] Set-only Resumption ticket encryption keys. Server-side only. QUIC_PARAM_CONFIGURATION_VERSION_SETTINGS 2 QUIC_VERSIONS_SETTINGS Both Change version settings for all connections on the configuration. QUIC_PARAM_CONFIGURATION_SCHANNEL_CREDENTIAL_ATTRIBUTE_W 3 QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W Set-only Calls SetCredentialsAttributesW with the supplied attribute and buffer on the credential handle. Schannel-only. Only valid once the credential has been loaded. Listener Parameters These parameters are accessed by calling GetParam or SetParam with QUIC_PARAM_LISTENER_* and a Listener object handle. Setting Type Get/Set Description QUIC_PARAM_LISTENER_LOCAL_ADDRESS 0 QUIC_ADDR Get-only Get the full address tuple the server is listening on. QUIC_PARAM_LISTENER_STATS 1 QUIC_LISTENER_STATISTICS Get-only Get statistics specific to this Listener instance. QUIC_PARAM_LISTENER_CIBIR_ID 2 uint8_t[] Both The CIBIR well-known idenfitier. Connection Parameters These parameters are accessed by calling GetParam or SetParam with QUIC_PARAM_CONNECTION_* and a Connection object handle. Setting Type Get/Set Description QUIC_PARAM_CONN_QUIC_VERSION 0 uint32_t Get-only Negotiated QUIC protocol version QUIC_PARAM_CONN_LOCAL_ADDRESS 1 QUIC_ADDR Both Set on client only. Must be set before start or after handshake confirmed. QUIC_PARAM_CONN_REMOTE_ADDRESS 2 QUIC_ADDR Both Set on client only. Must be set before start. QUIC_PARAM_CONN_IDEAL_PROCESSOR 3 uint16_t Get-only Ideal processor for the app to send from. QUIC_PARAM_CONN_SETTINGS 4 QUIC_SETTINGS Both Connection settings. See QUIC_SETTINGS QUIC_PARAM_CONN_STATISTICS 5 QUIC_STATISTICS Get-only Connection-level statistics. QUIC_PARAM_CONN_STATISTICS_PLAT 6 QUIC_STATISTICS Get-only Connection-level statistics with platform-specific time format. QUIC_PARAM_CONN_SHARE_UDP_BINDING 7 uint8_t (BOOLEAN) Both Set on client only. Must be called before start. QUIC_PARAM_CONN_LOCAL_BIDI_STREAM_COUNT 8 uint16_t Get-only Number of bidirectional streams available. QUIC_PARAM_CONN_LOCAL_UNIDI_STREAM_COUNT 9 uint16_t Get-only Number of unidirectional streams available. QUIC_PARAM_CONN_MAX_STREAM_IDS 10 uint64_t[4] Get-only Array of number of client and server, bidirectional and unidirectional streams. QUIC_PARAM_CONN_CLOSE_REASON_PHRASE 11 char[] Both Max length 512 chars. QUIC_PARAM_CONN_STREAM_SCHEDULING_SCHEME 12 QUIC_STREAM_SCHEDULING_SCHEME Both Whether to use FIFO or round-robin stream scheduling. QUIC_PARAM_CONN_DATAGRAM_RECEIVE_ENABLED 13 uint8_t (BOOLEAN) Both Indicate/query support for QUIC datagram extension. Must be set before start. QUIC_PARAM_CONN_DATAGRAM_SEND_ENABLED 14 uint8_t (BOOLEAN) Get-only Indicates peer advertised support for QUIC datagram extension. Call after connected. QUIC_PARAM_CONN_DISABLE_1RTT_ENCRYPTION 15 uint8_t (BOOLEAN) Both Application must #define QUIC_API_ENABLE_INSECURE_FEATURES before including msquic.h. QUIC_PARAM_CONN_RESUMPTION_TICKET 16 uint8_t[] Set-only Must be set on client before starting connection. QUIC_PARAM_CONN_PEER_CERTIFICATE_VALID 17 uint8_t (BOOLEAN) Set-only Used for asynchronous custom certificate validation. Deprecated soon. Replaced by ConnectionCertificateValidationComplete QUIC_PARAM_CONN_LOCAL_INTERFACE 18 uint32_t Set-only The local interface index to bind to. QUIC_PARAM_CONN_TLS_SECRETS 19 QUIC_TLS_SECRETS Set-only The TLS secrets struct to be populated by MsQuic. QUIC_PARAM_CONN_VERSION_SETTINGS 20 QUIC_VERSION_SETTINGS Both The desired QUIC versions for the connection. QUIC_PARAM_CONN_CIBIR_ID 21 uint8_t[] Set-only The CIBIR well-known identifier. QUIC_PARAM_CONN_STATISTICS_V2 22 QUIC_STATISTICS_V2 Get-only Connection-level statistics, version 2. QUIC_PARAM_CONN_STATISTICS_V2_PLAT 23 QUIC_STATISTICS_V2 Get-only Connection-level statistics with platform-specific time format, version 2. QUIC_PARAM_CONN_ORIG_DEST_CID 24 uint8_t[] Get-only The original destination connection ID used by the client to connect to the server. QUIC_PARAM_CONN_STATISTICS_V2 Querying the QUIC_STATISTICS_V2 struct via QUIC_PARAM_CONN_STATISTICS_V2 or QUIC_PARAM_CONN_STATISTICS_V2_PLAT should be aware of possible changes in the size of the struct, depending on the version of MsQuic the app using at runtime, not just what it was compiled against. The minimum size of the struct will always be QUIC_STATISTICS_V2_SIZE_1. Future version of MsQuic will append new fields to the end of the struct, so the maximum possible size will increase. When an app queries for the statistics, it must always supply an input buffer of length at least QUIC_STATISTICS_V2_SIZE_1, but sizeof(QUIC_STATISTICS_V2) will always work as well. MsQuic will support older callers that supply at least that buffer size, even if the maximum size of the struct has grown in a future version of MsQuic. MsQuic will only write the fields that can completely fit in the buffer supplied by the app. TLS Parameters These parameters are accessed by calling GetParam or SetParam with QUIC_PARAM_TLS_* and a Connection object handle. Setting Type Get/Set Description QUIC_PARAM_TLS_HANDSHAKE_INFO 0 QUIC_HANDSHAKE_INFO Get-only Called in the QUIC_CONNECTION_EVENT_CONNECTED event to get the cryptographic parameters negotiated in the handshake. QUIC_PARAM_TLS_NEGOTIATED_ALPN 1 uint8_t[] (max 255 bytes) Get-only Called in the QUIC_CONNECTION_EVENT_CONNECTED event to get the negotiated ALPN. Schannel-only TLS Parameters These parameters are access by calling GetParam or SetParam with QUIC_PARAM_TLS_SCHANNEL_* and a Connection object handle. Setting Type Get/Set Description QUIC_PARAM_TLS_SCHANNEL_CONTEXT_ATTRIBUTE_W 0 QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W Get-only Calls QueryContextAttributesW for the given attribute and buffer. Only valid until the QUIC_CONNECTION_EVENT_CONNECTED event, or when TLS is cleaned up. QUIC_PARAM_TLS_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W 1 QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W Get-only Calls QueryContextAttributesExW for the given attribute and buffer. Only valid until the QUIC_CONNECTION_EVENT_CONNECTED event, or when TLS is cleaned up. QUIC_PARAM_TLS_SCHANNEL_SECURITY_CONTEXT_TOKEN 2 HANDLE Get-only Calls QuerySecurityContextToken on the Schannel handle. Only valid until the QUIC_CONNECTION_EVENT_CONNECTED event, or when TLS is cleaned up. Stream Parameters These parameters are access by calling GetParam or SetParam with QUIC_PARAM_STREAM_* and a Stream object handle. Setting Type Get/Set Description QUIC_PARAM_STREAM_ID 0 QUIC_UINT62 Get-only Must be called on a stream after StreamStart is called. QUIC_PARAM_STREAM_0RTT_LENGTH 1 uint64_t Get-only Length of 0-RTT data received from peer. QUIC_PARAM_STREAM_IDEAL_SEND_BUFFER_SIZE 2 uint64_t - bytes Get-only Ideal buffer size to queue to the stream. Assumes only one stream sends steadily. QUIC_PARAM_STREAM_PRIORITY 3 uint16_t Get/Set Stream priority. QUIC_PARAM_STREAM_STATISTICS 4 QUIC_STREAM_STATISTICS Get-only Stream-level statistics. See Also QUIC_SETTINGS GetParam SetParam"
  },
  "docs/Streams.html": {
    "href": "docs/Streams.html",
    "title": "Using Streams",
    "keywords": "Using Streams Streams are the primary mechanism apps use to reliably exchange data with their peer. Streams can be opened by either peer (client or server) and can be unidirectional (can only send) or bidirectional (can send and receive). So, there are 4 types of streams: Client initiated, unidirectional stream Server initiated, unidirectional stream Client initiated, bidirectional stream Server initiated, bidirectional stream Stream ID Flow Control The QUIC protocol allows a maximum number of streams equal to 2 ^ 62. As there are 4 unique stream types, the maximum number of streams is 2 ^ 60, per stream type. No app would likely need to have this many streams open at any point. For this reason, each app controls the number of streams that the peer is allowed to open. The concept is similar to flow control of the actual data on a stream. The app tells the peer how many streams it's willing to accept at any point. Instead of a buffer size, it's a stream count. The protocol for synchronizing the maximum stream count is complicated, but MsQuic simplifies it by requiring the app to specify a number of simultaneous streams to allow the peer to open at any time. MsQuic then takes care of updating the maximum stream count for the peer as old streams get shut down. The app can configure the unidirectional and bidirectional limits separately. The default value for these is 0. If the app wants to allow the peer to open any streams, it must set a value. To set the limit on a connection, the app must call SetParam for QUIC_PARAM_CONN_PEER_BIDI_STREAM_COUNT and/or QUIC_PARAM_CONN_PEER_UNIDI_STREAM_COUNT. MsQuic currently restricts this count to a maximum of 2 ^ 16. Opening and Starting Streams An app calls StreamOpen to allocate a new stream. The stream object returned from StreamOpen is locally usable. The app can call any other stream API on the object, but until the stream is started all operations are essentially queued. While in this state the stream has no ID and generates no \"on-wire\" changes. If a stream is closed (StreamClose) before being successfully started, the app essentially abandons the stream. No on-wire changes will ever result from that stream. To start using the stream on-wire, the app calls StreamStart. On success, all queued operations (i.e. sends or shutdown) will immediately trigger, and the stream can start receiving QUIC_STREAM_EVENT_RECEIVE events. When calling StreamStart the app passes a set of QUIC_STREAM_START_FLAGS flags to control the behavior. Starting the stream always results in a QUIC_STREAM_EVENT_START_COMPLETE event, regardless of success/fail or synchronous/asynchronous flags. For peer initiated streams, the app gets a QUIC_CONNECTION_EVENT_PEER_STREAM_STARTED event on the connection. A stream is officially started when this event or the QUIC_STREAM_EVENT_START_COMPLETE event is received. Sending An app can send on any locally initiated stream or a peer initiated bidirectional stream. The app uses the StreamSend API send data. MsQuic holds on to any buffers queued via StreamSend until they have been completed via the QUIC_STREAM_EVENT_SEND_COMPLETE event. Send Buffering There are two buffering modes for sending supported by MsQuic. The first mode has MsQuic buffer the stream data internally. As long as there is room to buffer the data, MsQuic will copy the data locally and then immediately complete the send back to the app, via the QUIC_STREAM_EVENT_SEND_COMPLETE event. If there is no room to copy the data, then MsQuic will hold onto the buffer until there is room. With this mode, the app can \"keep the pipe full\" using only a single outstanding send. It continually keeps a send pending on the stream. When the send is completed, the app immediately queues a send again with any new data it has. This is seen by many as the simplest design for apps, but does introduce an additional copy in the data path, which has some performance draw backs. This is the default MsQuic behavior. The other buffering mode supported by MsQuic requires no internal copy of the data. MsQuic holds onto the app buffers until all the data has been acknowledged by the peer. To fill the pipe in this mode, the app is responsible for keeping enough sends pending at all times to ensure the connection doesn't go idle. MsQuic indicates the amount of data the app should keep pending in the QUIC_STREAM_EVENT_IDEAL_SEND_BUFFER_SIZE event. The app should always have at least two sends pending at a time. If only a single send is used, the connection can go idle for the time between that send is completed and the new send is queued. By default, this mode is not used. To enable this mode, the app must call SetParam on the connection with the QUIC_PARAM_CONN_SEND_BUFFERING parameter set to FALSE. Send Shutdown The send direction can be shut down in three different ways: Graceful - The sender can gracefully shut down the send direction by calling StreamShutdown with the QUIC_STREAM_SHUTDOWN_FLAG_GRACEFUL flag or by including the QUIC_SEND_FLAG_FIN flag on the last StreamSend call. In this scenario all data will be delivered to the peer and then the peer is informed the stream has been gracefully shut down. Sender Abort - The sender can abortively shut down the send direction by calling StreamShutdown with the QUIC_STREAM_SHUTDOWN_FLAG_ABORT_SEND flag. In this scenario, all outstanding sends are immediately canceled and are not delivered to the peer. The peer is immediately informed of the abort. Receiver Abort - The receiver can abortively shut down their peer's send direction. When this happens the sender will get a QUIC_STREAM_EVENT_PEER_RECEIVE_ABORTED event. When the send has been completely shut down the app will get a QUIC_STREAM_EVENT_SEND_SHUTDOWN_COMPLETE event. This will happen immediately on an abortive send or after a graceful send has been acknowledged by the peer. 0-RTT An app can opt in to sending stream data with 0-RTT keys (if available) by including the QUIC_SEND_FLAG_ALLOW_0_RTT flag on StreamSend call. MsQuic doesn't make any guarantees that the data will actually be sent with 0-RTT keys. There are several reasons it may not happen, such as keys not being available, packet loss, flow control, etc. Receiving Data is received and delivered to apps via the QUIC_STREAM_EVENT_RECEIVE event. The event indicates zero, one or more contiguous buffers up to the application. Typically, the buffer count is one, which means that most events will include a single buffer containing the received data. When the buffer count is 0, it signifies the reception of a QUIC frame with empty data, which also indicates the end of stream data. Currently, the maximum buffer count is 2 in the case of partial receive, where only a portion of the buffer data is consumed (as explained below). However, it is strongly advised not to assume in application code that the upper limit is always 2. This caution is important because future releases may incorporate multiple circular buffers to enhance performance, leading to potential changes in the buffer count limit. The app then may respond to the event in a number of ways: Synchronous vs Asynchronous The app has the option of either processing the received data in the callback (synchronous) or queuing the work to a separate thread (asynchronous). If the app processes the data synchronously it must do so in a timely manner. Any significant delays will delay other QUIC processing (such as sending acknowledgements), which can cause protocol issues (dropped connections). If the app wants to queue the data to a separate thread, the app must return QUIC_STATUS_PENDING from the receive callback. This informs MsQuic that the app still has an outstanding reference on the buffers, and it will not modify or free them. Once the app is done with the buffers it must call StreamReceiveComplete. Partial Data Acceptance Whenever the app gets the QUIC_STREAM_EVENT_RECEIVE event, it can partially accept/consume the received data. For synchronous receives, the app indicates how much of the data it accepted via the TotalBufferLength variable in the payload of the QUIC_STREAM_EVENT_RECEIVE event. On input, that variable indicates the total amount of data being indicated. On output (return from the callback), the variable is taken as how much data the app consumed. By default, if the variable is left unmodified, then all data is assumed to be accepted. For asynchronous receives, the app indicates how much of the data it accepted via the BufferLength parameter passed into the StreamReceiveComplete API. Any value less than or equal to the initial TotalBufferLength value is allowed, including zero. Whenever a receive isn't fully accepted by the app, additional receive events are immediately disabled. The app is assumed to be at capacity and not able to consume more until further indication. To re-enable receive callbacks, the app must call StreamReceiveSetEnabled. There are cases where an app may want to partially accept the current data, but still immediately get a callback with the rest of the data. To do this (only works in the synchronous flow) the app must return QUIC_STATUS_CONTINUE."
  },
  "docs/TEST.html": {
    "href": "docs/TEST.html",
    "title": "Testing MsQuic",
    "keywords": "Testing MsQuic Running the Tests First build. If you are trying to run the tests on a different machine from the one where you are building msquic, you can copy artifacts and scripts folders after building msquic over to that machine and run the below steps from there. Running kernel mode msquic and QUIC over XDP tests requires test signing enabled on the machine. It's also more convenient to be done on a machine/VM that's dedicated for testing in case something bugchecks the machine. Prepare the machine: .\\scripts\\prepare-machine.ps1 -ForTest Then all the tests can be run with: ./scripts/test.ps1 Note On Windows, schannel is the default TLS provider, but requires the latest Windows OS versions (Windows Server 2022 or Insider Preview) to function. If you don't have schannel use openssl to build and test. ./scripts/test.ps1 -Tls openssl By default this will run all tests in series, with no log collection. To include log collection for failed tests, run: ./scripts/test.ps1 -LogProfile Full.Light Note On Windows, you will need to run Powershell as Administrator to get the logs. If there are any failed tests, this will generate a directory for each failed test that includes the console output from running the test and any logs collected. Example Output (Windows) PS F:\\msquic> .\\scripts\\test.ps1 [05/24/2021 08:17:35] F:\\msquic\\artifacts\\bin\\windows\\x64_Debug_schannel\\msquiccoretest.exe (208 test case(s)) ... [05/24/2021 08:17:48] 208 test(s) run. [05/24/2021 08:17:48] F:\\msquic\\artifacts\\bin\\windows\\x64_Debug_schannel\\msquicplatformtest.exe (66 test case(s)) ... [05/24/2021 08:17:55] 66 test(s) run. [05/24/2021 08:17:56] F:\\msquic\\artifacts\\bin\\windows\\x64_Debug_schannel\\msquictest.exe (1681 test case(s)) ... [05/24/2021 08:26:58] 1681 test(s) run. [05/24/2021 08:26:58] Output can be found in F:\\msquic\\artifacts\\logs\\msquictest.exe\\05.24.2021.08.17.55 Write-Error: 4 test(s) failed. PowerShell Script Arguments There are a number of other useful arguments for test.ps1. Config <Debug/Release> - The build configuration (default: debug) to test. Must have been built first. Arch <x86/x64/arm/arm64> - The CPU architecture (default: x64) to test. Must have been built first. Tls <openssl/schannel> - The TLS provider to use (Windows default: schannel, Posix default: openssl) to test. Must have been built first. Filter <GoogleTest filter> - A filter for which tests to run. More details here on the syntax. ListTestCases - Lists all the (optionally filtered) tests instead of running them. NoProgress - Don't display progress during test execution. LogProfile <profile> - The profile to use for logging. TODO - Add more here. KeepOutputOnSuccess - Keep logs even if tests pass. Debugger - Run with the debugger attached. InitialBreak - Break in the debugger on initial attach/start. BreakOnFailure - Break into the debugger for any test failures."
  },
  "docs/TLS.html": {
    "href": "docs/TLS.html",
    "title": "MsQuic TLS Abstraction Layer",
    "keywords": "MsQuic TLS Abstraction Layer MsQuic includes TLS in the general \"Platform Abstraction Layer\" or PAL. This interface provides all the functionality required of TLS by the QUIC protocol, as defined by the IETF QUIC-TLS spec. High-Level Overview At the TLS abstraction layer there is only one core interface/function that does most all the work: CxPlatTlsProcessData. The ProcessData function takes a number of parameters on input and then provides all the necessary output. The execution of this function drives the TLS state machine. This function executes very similarly to many existing (non-QUIC) TLS APIs with the following exceptions: The TLS record layer is not included. TLS exposes the encryption key material to QUIC to secure its own packets. Generally, the calling pattern for the function starts with the client calling ProcessData with a null input. It then takes the output data, encrypts it accordingly and sends it to the server. The server decrypts it and passes the data to TLS (via its own ProcesData call) and then gets its own output. This goes back and forth until the handshake is complete, and TLS has no other data it needs to exchange. Input The TLS context pointer. The CRYPTO buffer received from the peer. This is null/empty for the client's initial call. Output Any CRYPTO buffer to send to the peer. This may be null/empty. The associated encryption level at which the CRYPTO buffer must be secured. Any new read or write encryption key material. Any other state or meta information, such as negotiated ALPN, handshake completion, session resumption, alerts, etc. Additional Functionality Beyond the core functionality described above, there are a few other functions: QUIC Transport Parameters QUIC has a custom TLS extension it uses on client and server to exchange QUIC specific configuration. The TLS library must support setting and retrieving this information. Session Resumption Tickets When a TLS session is resumed, QUIC is required to use the same QUIC layer configuration previously exchanged in the Transport Parameters. This allows QUIC to do things like apply the appropriate flow control limits to 0-RTT data. In order for this functionality to be achieved at the QUIC layer, the TLS library must allow for QUIC to embed QUIC information in the session resumption ticket (NST) and recall it on session resumption. Implementations MsQuic has a number of implementations for the TLS abstraction layer to support out various platforms and scenarios. Schannel Schannel is officially supported for Windows user mode and Windows kernel mode. It requires the latest Windows versions (Windows Server 2022 or Insider Preview) to function. Only the newest versions support TLS 1.3 and the necessary APIs for QUIC functionality. Currently, 0-RTT is not supported, and resumption is only partially supported. OpenSSL OpenSSL is the primary TLS library by MsQuic on Linux. It is also works on Windows, but Schannel is preferred if supported by your OS build. Important - Currently, OpenSSL doesn't officially have QUIC API support (hopefully coming soon), so MsQuic temporarily relies on a fork of OpenSSL that is purely a fork + a set of (unapproved by OMC) changes to expose some QUIC functionality. This fork is only a stopgap solution until OpenSSL officially supports QUIC, at which MsQuic will immediately switch to it. Detailed Design TO-DO"
  },
  "docs/TSG.html": {
    "href": "docs/TSG.html",
    "title": "Trouble Shooting Guide",
    "keywords": "Trouble Shooting Guide This document is meant to be a step-by-step guide for trouble shooting any issues while using MsQuic. What kind of Issue are you having? I am debugging a crash. Something is not functionally working as I expect. Performance is not what I expect it to be. Debugging a Crash TODO Trouble Shooting a Functional Issue I am getting an error code I don't understand. The connection is unexpectedly shutting down. No application (stream) data seems to be flowing. Why is this API failing? An MsQuic API is hanging. I am having problems with SMB over QUIC. No credentials when loading a server certificate from PEM with Schannel. TLS handshake fails in Chrome and Edge for HTTP/3 (including WebTransport) even though HTTP/1.1 and HTTP/2 work. I need to get a packet capture. Understanding Error Codes Some error codes are MsQuic specific (QUIC_STATUS_*), and some are simply a passthrough from the platform. You can find the MsQuic specific error codes in the platform specific header (msquic_posix.h, msquic_winkernel.h, or msquic_winuser.h). From msquic_winuser.h: #define QUIC_STATUS_ADDRESS_IN_USE HRESULT_FROM_WIN32(WSAEADDRINUSE) // 0x80072740 #define QUIC_STATUS_CONNECTION_TIMEOUT ERROR_QUIC_CONNECTION_TIMEOUT // 0x80410006 #define QUIC_STATUS_CONNECTION_IDLE ERROR_QUIC_CONNECTION_IDLE // 0x80410005 #define QUIC_STATUS_UNREACHABLE HRESULT_FROM_WIN32(ERROR_HOST_UNREACHABLE) // 0x800704d0 #define QUIC_STATUS_INTERNAL_ERROR ERROR_QUIC_INTERNAL_ERROR // 0x80410003 For more info, see the Well Known Status Codes. Linux File Handle Limit Too Small In many Linux setups, the default per-process file handle limit is relatively small (~1024). In scenarios where lots of (usually client) connection are opened, a large number of sockets (a type of file handle) are created. Eventually the handle limit is reached and connections start failing (error codes 0x16 or 0xbebc202) because new sockets cannot be created. To fix this, you will need to increase the handle limit. To query the maximum limit you may set: ulimit -Hn To set a new limit (up to the max): ulimit -n newValue Why is the connection shutting down? What does this QUIC_CONNECTION_EVENT_SHUTDOWN_INITIATED_BY_TRANSPORT event mean? What does this QUIC_CONNECTION_EVENT_SHUTDOWN_INITIATED_BY_PEER event mean? Understanding shutdown by Transport. There are two ways for a connection to be shutdown, either by the application layer or by the transport layer (i.e. the QUIC layer). The QUIC_CONNECTION_EVENT_SHUTDOWN_INITIATED_BY_TRANSPORT event occurs when the transport shuts the connection down. Generally, the transport shuts down the connection either when there's some kind of error or if the negotiated idle period has elapsed. [2]6F30.34B0::2021/04/13-09:22:48.297449100 [Microsoft-Quic][conn][0x1CF25AC46B0] Transport Shutdown: 18446744071566327813 (Remote=0) (QS=1) Above is an example event collected during an attempt to connect to a non-existent server. Eventually the connection failed and the transport indicated the event with the appropriate error code. This error code (18446744071566327813) maps to 0xFFFFFFFF80410005, which specifically refers to the QUIC_STATUS (indicated by QS=1) for 0x80410005; which indicates ERROR_QUIC_CONNECTION_IDLE. For more details for understanding error codes see here. Understanding shutdown by Peer. As indicated in Understanding shutdown by Transport, there are two ways for connections to be shutdown. The QUIC_CONNECTION_EVENT_SHUTDOWN_INITIATED_BY_PEER event occurs when the peer application has explicitly shut down the connection. In MsQuic API terms, this would mean the app called ConnectionShutdown. TODO - Add an example event The error code indicated in this event is completely application defined (type of QUIC_UINT62). The transport has no understanding of the meaning of this value. It never generates these error codes itself. So, to map these values to some meaning will require the application protocol documentation. Why isn't application data flowing? Application data is exchanged via Streams and queued by the app via StreamSend. The act of queuing data doesn't mean it will be immediately sent to the peer. There are a number of things that can block or delay the exchange. The QUIC_FLOW_BLOCK_REASON enum in quic_trace.h contains the full list of reasons that data may be blocked. Below is a short explanation of each: Value Meaning QUIC_FLOW_BLOCKED_SCHEDULING 1 The cross-connection scheduling logic has determined that too much work is queued on the connection to be processed all at once. Generally, this means we are CPU-bound. QUIC_FLOW_BLOCKED_PACING 2 Data burst sizes into the network are being limited and periodically sent into the network based on the congestion control's pacing logic. QUIC_FLOW_BLOCKED_AMPLIFICATION_PROT 4 The peer has not proved ownership of their IP address and therefore we are locally limiting the amount of data to send to it. QUIC_FLOW_BLOCKED_CONGESTION_CONTROL 8 Congestion control has determined that the network cannot handle any more data currently. QUIC_FLOW_BLOCKED_CONN_FLOW_CONTROL 16 The connection-wide limit for the amount of data that can be buffered or accepted by the peer at this time has been reached. QUIC_FLOW_BLOCKED_STREAM_ID_FLOW_CONTROL 32 The limit on the number of streams the peer can accept has been reached. QUIC_FLOW_BLOCKED_STREAM_FLOW_CONTROL 64 The limit on the amount of data that can be buffered or accepted by the peer for this stream has been reached. QUIC_FLOW_BLOCKED_APP 128 All data queued by the application on this stream has been sent. No more data is available to send. Internally, MsQuic tracks these flags at all times for every connection and stream. Whenever any of them change, MsQuic logs an event. For example: [0]0004.0F54::2021/05/14-10:30:22.541024000 [Microsoft-Quic][strm][0xC16BA610] Send Blocked Flags: 128 This event indicates that stream C16BA610 only has the QUIC_FLOW_BLOCKED_APP flag, so it is currently blocked because there is no more application data queued to be sent. The QUIC WPA plugin also supports visualizing these blocked states via the QUIC TX Blocked State graph. It allows you to see what flags are blocking the connection as a whole (shown as stream 0) and what is blocking each individual stream, over the lifetime of the whole connection. For instance, in the image above, you can see the stream (1) is blocked most of the time because there is no application data. Beyond that, the connection (\"stream\" 0) alternated between pacing and congestion control as the blocked reasons. Why is this API Failing? The simplest way to determine exactly why a particular API is failing is via tracing. Collect the traces for the repro and convert them to text and open them in your favorite text editor (try TextAnalysisTool!). MsQuic logs every API entry and exit. Depending on the platform and tool used to decode the traces to text, you may either have the number or an enum represented as the API type (see QUIC_TRACE_API_TYPE in quic_trace.h), but all events look something like this: [cpu][process.thread][time][ api] Enter <API Type> (<pointer>) [cpu][process.thread][time][ api] Exit [optional status code] A TextAnalysisTool filter (api.tat) is also included in ./docs/tat to help quickly find all failed API calls. Example (ListenerStart failing with QUIC_STATUS_INVALID_STATE) In a recent example, we wanted to know why an app occasionally received QUIC_STATUS_INVALID_STATE when it called ListenerStart. We took the following steps to diagnose it. Collected traces for the repro. Converted to text and opened them in TextAnalysisTool. Added a filter for all API enter events for QUIC_TRACE_API_LISTENER_START (10). Looked for the following [ api] Exit event after each enter event on the same [process.thread]. This quickly resulted in the following pair of events. They show the app called ListenerStart for the listener pointer 7f30ac0dcff0 at 09:54:03.528362 in process 2e73 on thread 2e8b (CPU 1). Shortly after, MsQuic returned with status 200000002 (QUIC_STATUS_INVALID_STATE on Posix platforms). [1][2e73.2e8b][09:54:03.528362][ api] Enter 10 (0x7f30ac0dcff0). [1][2e73.2e8b][09:54:03.528913][ api] Exit 200000002 From here, we simply went backwards from the exit event to find any errors; and came up with the full set of important traces: [1][2e73.2e8b][09:54:03.528362][ api] Enter 10 (0x7f30ac0dcff0). [1][2e73.2e8b][09:54:03.528902][bind][0x7f30b80394e0] Listener (0x7f30ac076d90) already registered on ALPN [1][2e73.2e8b][09:54:03.528903][list][0x7f30ac0dcff0] ERROR, \"Register with binding\". [1][2e73.2e8b][09:54:03.528913][ api] Exit 200000002 This clearly shows that listener 7f30ac0dcff0 failed to register with the binding (i.e. UDP socket abstraction) because listener 7f30ac076d90 was already registered for the same ALPN. MsQuic only allows a single listener to be registered for a given ALPN on a local IP address and port. Why is the API hanging or deadlocking? First, a bit of background. The MsQuic API has two types of APIs: Blocking / Synchronous - These APIs run to completion and only return once finished. When running in the Windows kernel, these MUST NOT be called at DISPATCH_LEVEL. They are denoted by the _IRQL_requires_max_(PASSIVE_LEVEL) annotation. For example, ConnectionClose. Nonblocking / Asynchronous - These APIs merely queue work and return immediately. When running in the Windows kernel, these may be called at DISPATCH_LEVEL. They are denoted by the _IRQL_requires_max_(DISPATCH_LEVEL) annotation. For example, StreamSend. Additional documentation on the MsQuic execution model is available here. Now, back to the problem. The app is calling into an MsQuic API and it is hanging and likely deadlocked. This can only happen for synchronous APIs. What do you do next? Generally, this is because the app is breaking one of the following rules: Do not block the MsQuic thread/callback for any length of time. You may acquire a lock/mutex, but you must guarantee very quick execution. Do not grab a lock that you also hold (on a different thread) when calling back into MsQuic. Do not call MsQuic APIs cross-object on MsQuic the thread/callbacks. For instance, if you're in a callback for Connection A, do not call ConnectionClose for Connection B. To verify exactly what is happening, Collect the traces and open then up in a text editor (ideally TextAnalysisTool). The simplest way forward from here is to filter the logs based on the pointer of the object you are calling the API on. For instance, if you are calling ConnectionClose on 0x7fd36c0019c0, then add a filter for 7fd36c0019c0. Here is an example (filtered) log for just such a case: [0][53805.5381b][11:22:52.896762][ api] Enter 13 (0x7fd36c0019c0). [0][53805.53815][11:22:52.896796][conn][0x7fd36c0019c0] Scheduling: 2 [0][53805.53815][11:22:52.896797][conn][0x7fd36c0019c0] Execute: 1 [0][53805.53815][11:22:52.896797][conn][0x7fd36c0019c0] Recv 1 UDP datagrams [0][53805.53815][11:22:52.896825][conn][0x7fd36c0019c0] IN: BytesRecv=2901 [0][53805.53815][11:22:52.896826][conn][0x7fd36c0019c0] Batch Recv 1 UDP datagrams [0][53805.53815][11:22:52.896854][strm][0x7fd378028360] Created, Conn=0x7fd36c0019c0 ID=0 IsLocal=0 [0][53805.53815][11:22:52.896856][conn][0x7fd36c0019c0] Indicating QUIC_CONNECTION_EVENT_PEER_STREAM_STARTED [0x7fd378028360, 0x0] [1][53805.53813][11:22:53.142398][conn][0x7fd36c0019c0] Queuing 1 UDP datagrams [1][53805.53813][11:22:53.392819][conn][0x7fd36c0019c0] Queuing 1 UDP datagrams [1][53805.53813][11:22:53.644259][conn][0x7fd36c0019c0] Queuing 1 UDP datagrams You will notice 3 different threads (seen in [0][53805.X]): 5381b - The app thread that is calling in to close the connection. 53815 - The MsQuic worker thread that drives execution for the connection. 53813 - The MsQuic UDP thread that is processing received packets and queuing them on the connection. As you can see, the last event/log on the MsQuic worker thread was an indication of a QUIC_CONNECTION_EVENT_PEER_STREAM_STARTED event to the app. There are no further events on this thread (easily verified by adding an additional filter for [53805.53815]). So, the app must be blocking this thread. The most likely scenario is that the app is holding a lock while calling ConnectionClose on thread 5381b and then in thread 53815, the app is trying to acquire the same lock. The solution here is that the app must not hold the lock when it calls into the blocking API, if that lock may also be acquired on the MsQuic thread. Trouble Shooting SMB over QUIC issues To troubleshoot any SMB over QUIC issues on windows platforms, the best way is to collect SMB and QUIC traces and sharing it with SMB developers. Following are the steps: Copy msquic/scripts/t.cmd to a local folder. For SMB Client (a.k.a. RDR) WPP traces t.cmd clion // repro and get the relevant error. t.cmd off For SMB Server WPP traces t.cmd srvon // repro and get the relevant error. t.cmd off Share the generated cab file with SMB developers. Convert PEM to PKCS#12 for Schannel When using Schannel, a certificate imported by X509Certificate2.CreateFromPem() in .NET needs to be exported to a byte[] in PKCS#12 (aka PFX) format and re-imported to be used as a server certificate. static X509Certificate2 CreatePkcs12FromPem(string certPem, string keyPem) { using var cert = X509Certificate2.CreateFromPem(certPem, keyPem); return new(cert.Export(X509ContentType.Pkcs12)); } Using a self-signed certificate for HTTP/3 Chromium-based browsers requires the server certificate to be trusted by a default CA for QUIC (e.g. HTTP/3 and WebTransport), even though the same certificate may already be trusted for HTTP/1.1 and HTTP/2. To use a self-signed certificate or a certificate that is not ultimately issued by one of the default CAs, you need to whitelist its SHA-256 hash via the serverCertificateHashes option and follow stricter requirements. See FlyByWireless.CustomCertificate.Generate() on how to generate such a certificate. Collecting a Packet Capture Linux Packet Capture TODO Window Packet Capture On Windows, Packet Monitor (pktmon) is the best way to collect a packet capture. The (optional) first step is usually to find the interface you want to collect the capture on. Do this by first running pktmon list: > pktmon list Network Adapters: Id MAC Address Name -- ----------- ---- 9 40-8D-5C-B5-46-51 Intel(R) Ethernet Connection (2) I219-V #2 104 00-15-5D-D1-5A-30 433db3ea-0acd-457a-9c86-55bb7fa27391 80 00-15-5D-AD-8B-40 433db3ea-0acd-457a-9c86-55bb7fa27391 Note If you don't do this and use it to filter to a specific component, you will get a packet capture at every layer, which will include many duplicates of each packet. Once you find the interface you want, take note of the Id. For instance, in the example above, I want to use the Ethernet adapter, so I need 9. Then, to collect the capture for your scenario (example below uses port 443), run the following: pktmon filter remove pktmon filter add -c 9 -t UDP -p 443 pktmon start --capture --pkt-size 0 <run scenario> pktmon stop pktmon etl2pcap pktmon.etl This produced pktmon.pcapng in your current directory that can then be opened by Wireshark. If you want to be able to decrypt the QUIC packets, you will need to get/export the TLS secrets from your code (todo: add link/instructions). Note If you don't specify the component in the filter step, you can specify it at the etl2pcap step: pktmon etl2pcap pktmon.etl -c 9 and it will produce the same final output pcapng file. Trouble Shooting a Performance Issue Is it a problem with just a single (or very few) connection? Is it a problem multiple (lots) of connections? Why is Performance bad for my Connection? Where is the CPU being spent for my connection? What is limiting throughput for my connection? Why is the network limiting throughput for my connection? Analyzing CPU Usage Important - The following is specific to Windows OS. It's extremely common that everything may be functional, but not just as fast as expected. So the normal next step is then to grab a performance trace for the scenario and then dive into the details to analyze what exactly is happening. When you're explicitly looking for where the CPU is spending its time in the scenario, you will need to collect CPU traces. One way to do this is to use WPR (with Stacks.Light profile). Once you have the ETL, open it in WPA (MsQuic plugin is unnecessary). Then, go to the Graph Explorer, expand Computation, expand CPU Usage (Sampled) and open up Utilization by Process, Thread, Stack. The following is an example of a CPU trace a server in a client upload scenario: The next step is to filter things down to only the important information. First, select the relavent time period: click and drag over the area, right click, select Zoom. Then eliminate any unrelated \"noise\". The easiest way is to select all the Processes that have very little weight; then right click, and select Filter Out Selection. Another important thing to filter is the [Idle] stack under the Idle (0) process. Expact the Thread ID column for Idle (0), right click the [Idle] row and then select Filter Out Selection. You should then be left with only the relavent CPU usage. The current view now shows the CPU usage as a fraction of the total available CPU resources. Generally, the total available resources will include multiple (possibly many) different CPUs. So, it's a lot more helpful to get a per-CPU view. To see this, right click the table header (for instance, on Process), expand More Columns ..., and select CPU. Next, drag the CPU column to the front, before Process. Initially, nothing will most likely show up in the graph view. You will need to manually enable the relavent CPUs. In this particular example, only CPUs 4 and 36 have any significant usage (as seen by Count or Weight columns). In the Series list in the graph view, click the boxes next to each relavent CPU series to enable it. You may also chose to explicitly filter out the CPUs that are irrelevant. Now, you could use this view to dig into the various stacks by expanding the rows under the Stack column, but a better way is to change the view to a Flame Graph. Click the icon at the top to Select chart type and change it to Flame. Additionally, check the Enable box under it to enable filtering. You can then slide the filter slider to change the level of filtering. In this example, after resizing the window some, it looks like this: As you will immediately see, <Symbols disabled> shows up everywhere because symbols haven't been loaded. To load them, you will first need to configure the symbol path. You can do this by clicking on Trace in the top and then Configure Symbol Path. Then add any relavent paths to the list and close the window (hit Ok). Next you can load the symbols; Trace -> Load Symbols. This example has just the msquic.dll and secnetperf.exe symbols loaded. You can then drill down to various various part of the flame, and zoom into them by right clicking on them and selecting Filter To Flame. Also, remember you can change the Flame filter slider at any time as well. For example, the following is what filtering to the msquic.dll!QuicWorkerThread flame. Since this flame was essentially all of CPU 4, whatever is taking the most significant CPU resources here can be blamed as the most significant cost of CPU resources. Practically, this comes down to bcrypt.dll. From experience, since this happens in QuicConnRecvDecryptAndAuthenticate this is the work related to decrypting the packet payloads (over 71% of the CPU!). Finding Throughput Bottlenecks TODO Why is Performance bad across all my Connections? UDP receive offload is not working. The work load isn't spreading evenly across cores. Diagnosing Software UDP Receive Offload Issues Important - The following is specific to Windows OS. Software UDP Receive Offload (URO) is an importance performance feature. To check if URO is working correctly, you can follow this guide and use Full.Verbose profile to collect TCPIP traces. In the converted text file, if you see this event, URO is working. The below event indicates UDP layer saw a UDP packet coalesced from 5 UDP packets each with 1000 byte payload. [Microsoft-Windows-TCPIP]UDP: endpoint 0xFFFFA4033FC652C0: URO SCU received. SegCount = 5, SegSize = 1000, DataLength = 5000. If you are not seeing the above event at all, there are several things that can break URO functionality. Global URO Knob URO can be administratively turned off system-wide from a netsh knob. Check by running netsh int udp show global. If Receive Offload State is displayed as disabled, then URO has been administratively disabled. Incompatible Miniport or Medium Take a look at the IP interface rundown traces. Software RSC/URO applicable must be TRUE for URO to work. If it is FALSE, it means the underlying miniport driver is using NDIS 5 or the interface medium is not compatible (e.g. KDNic). [Microsoft-Windows-TCPIP]Framing: interface rundown: Interface = 8, Luid = 0x6008000000000, Address family = 2(IPV4), Compartment = 1, Isolation mode = 0(None), Isolation ID = 0, DL address = 0x00155D563406, Interface type = 6, Physical medium type = 19(NdisPhysicalMediumOther), SW RSC/URO applicable = 0(FALSE), SW RSC enabled = 0(FALSE), Alias = Ethernet (Kernel Debugger). Incompatible Software Component We also have a rundown trace for URO global disabled mask. The mask must be zero for URO to work. It's common that the mask is 2 (0b000010), which means some incompatible WFP callouts have disabled URO. If you see this on a freshly installed machine, try disabling real-time protection from Microsoft Defender settings. It's also possible the mask is 48 (0b110000), which means some incompatible IPSNPI clients have disabled URO. These (winnat or FSE) can automatically get enabled when WSL or Hyper-V are enabled on a machine. [Microsoft-Windows-TCPIP]TCP software RSC global disabled mask = 0, UDP software URO global disabled mask = 0. Incompatible Hardware Feature (PTP Timestamps) Another reason that UDP packets by design will not be coalesced if they carry different PTP timestamps. PTP timestamp is a feature for accurately synchronizing time supported by some NICs and it should be off by default. You can turn off PTP timestamps in NIC properties. Diagnosing RSS Issues Important - The following is specific to Windows OS. For scenarios with lots of parallel connections, generally the work should be spread across all the available processors. But if there are issues with the work not spreading there are a few things you can do. First off, here's an example where the RPS tests were run to a server that should be able to handle near 1 million requests per second: > secnetperf.exe -test:RPS -target:quic-server -conns:250 -requests:7500 -request:0 -response:4096 -runtime:20000 All Connected! Waiting for idle. Start sending request... Started! Result: 25869 RPS, Min: 944, Max: 888078, 50th: 281889.000000, 90th: 369965.000000, 99th: 490582.000000, 99.9th: 574533.000000, 99.99th: 797810.000000, 99.999th: 884055.000000, 99.9999th: 888078.000000, StdErr: 91.224221 App Main returning status 0 As you can see from the output of secnetperf.exe the resulting 25869 RPS is nowhere near what it should be. The next step is to grab a performance trace to see what is going on. For these type of issues the best way to collect the traces would be to use WPR (with Scheduling.Verbose or Performance.Verbose profiles). Once you have the ETL, open it in WPA using the MsQuic plugin. First thing after opening, let's take a look at the QUIC Worker utilization. In the Graph Explorer, under Computation, expand QUIC Workers and open the one labeled Utilization by Worker. For the example above (server-side trace), here is what the output looks like: You can immediately see that only 2 different workers are being used, with worker 2 being used primarily. In depth details - MsQuic always uses at least two workers on the server side for per connection. The first worker is a global, shared worker that is used to do initial validation of the connection request. Its job is to figure out which app the incoming connection belongs to. Once that's complete, the connection will be handed off to that app (and its worker thread(s)). So, this is why you only see usage of worker 1 at the beginning of the trace. The first usage spikes are from the RPS test initially connecting all its (250) parallel connections. There is a bit of back and forth to do the handshakes for these connections. Then there is an idle period while the test waits for things to die down. Finally, the actual RPS tests commense and that is where you see the solid usage of worker 2. Ideally, RPS tests should generate work that is spread across many different workers. The fact that only 1 worker is being used is definitely the source of the low RPS numbers that were measured and indicated in the tool output above. Since MsQuic picks which workers to use based on how the UDP datagrams are received, the next step is to look into the UDP receive layer. One way to do this is by using the Generic Events table (under System Activity in the Graph Explorer). Open that up, and then filter to just MsQuic (also shows up as ff15e657-4f26-570e-88ab-0796b258d11c some times) Provider Name (Right Click -> Filter To Selection). Next, we're looking for specifically the datapath receive events, which are Id 9218. Filter to just those and we see something like this: Now, what we're really interested in is what CPU these events are coming in on. So, add the CPU column to the left of the yellow bar. It doesn't really show a much different picture, but you can clearly see that all events happen on CPU 0. Now, we can clearly see that all our receive events are happening on the same CPU. This definitely not supposed to happen in an environment where RSS should be spreading all the different incoming UDP flows/tuples to different processors. The next step is to take a look at the RSS configuration on the machine to ensure things are properly configured. Run Get-NetAdapterRss to get an output like this: Name : Slot0A x8 InterfaceDescription : Mellanox ConnectX-3 Pro Ethernet Adapter Enabled : True NumberOfReceiveQueues : 8 Profile : Closest BaseProcessor: [Group:Number] : 0:0 MaxProcessor: [Group:Number] : 1:38 MaxProcessors : 8 RssProcessorArray: [Group:Number/NUMA Distance] : 0:0/0 0:2/0 0:4/0 0:6/0 0:8/0 0:10/0 0:12/0 0:14/0 0:16/0 0:18/0 0:20/0 0:22/0 0:24/0 0:26/0 0:28/0 0:30/0 0:32/0 0:34/0 0:36/0 0:38/0 1:0/32767 1:2/32767 1:4/32767 1:6/32767 1:8/32767 1:10/32767 1:12/32767 1:14/32767 1:16/32767 1:18/32767 1:20/32767 1:22/32767 1:24/32767 1:26/32767 1:28/32767 1:30/32767 1:32/32767 1:34/32767 1:36/32767 1:38/32767 IndirectionTable: [Group:Number] : 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 0:0 0:2 0:4 0:6 0:8 0:10 0:12 0:14 The output above indicates RSS is configured with 8 queues, so there should be spreading of the incoming flows to 8 different CPUs (and then passed to 8 different workers) instead of just the 1 that we are seeing. So, finally, in cases where everything seems to be configured correctly, but things still aren't working, that usually indicates a problem with the network card driver. Make sure the driver is up to date with the latest version available. If that still doesn't fix the problem, you will likely need to contact support from the network card vendor. Analyzing Network Issues TODO Drops on the Receiver Sometimes the issue can actually be the receiver itself, and not the network in between. The problem is that the sender generally cannot distinguish between network drops and receiver drops; even the receiving QUIC layer cannot necessarily identify these drops on its own. On Windows, the OS has a number of performance counters (some seen below) that can be used to analyze packet drops or discards at various layers. TODO - How to use ETW logs to collect even more detailed info on drops by the OS networking stack. TODO - How can you get similar info for Linux? Network Card Discards In some high throughput scenarios, the default number of NIC receive buffers might not be enough to handle spikes in network traffic. When a spike is too large for the NIC to handle, it has to drop the excess packets, resulting in Packet Received Discarded counter increases. When this happens, usually the best way to handle this it to increase the Receive Buffers value in the NIC's Advanced settings (seen below)."
  },
  "docs/Versions.html": {
    "href": "docs/Versions.html",
    "title": "QUIC Versions and Version Negotiation",
    "keywords": "QUIC Versions and Version Negotiation The QUIC protocol features a Version field to enable the protocol to evolve and have future versions, multiple of which may be supported by a given implementation. MsQuic is no exception and currently supports Draft-29 and Version 1 of the QUIC protocol. By default, MsQuic clients start all connections with Version 1. MsQuic servers support Version 1 and Draft-29. The Version Negotiation Extension is supported in MsQuic and is keeping pace with changes in the standard. It is enabled by default on both MsQuic client and server. Configuring QUIC Versions on MsQuic Clients An application may decide that it needs a specific feature only availble in one version of QUIC. The application may also wish to change the order of preference of supported version in MsQuic. Both scenarios are supported via the QUIC_VERSION_SETTINGS struct. Since there are three different version lists, the client MUST set all three to be the same. The first version in the list of FullyDeployedVersions will always be the initial version MsQuic starts the connection with. Warning A client may only set a version that MsQuic supports. Any other value will cause SetParam to fail. Use the following code snippet to change the default initial version, and only support a single QUIC version. It must be used before ConnectionStart is called: QUIC_VERSION_SETTINGS Settings = { 0 }; const uint32_t SupportedVersion = 0xff00001dU; // This is the Draft-29 version in HOST byte order. If the server does not support this, the connection will fail. Settings.AcceptableVersionsList = &SupportedVersion; Settings.AcceptableVersionsListLength = 1; Settings.OfferedVersionsList = &SupportedVersion; Settings.OfferedVersionsListLength = 1; Settings.FullyDeployedVersionsList = &SupportedVersion; Settings.FullyDeployedVersionsListLength = 1; MsQuic->SetParam( Connection, QUIC_PARAM_CONN_VERSION_SETTINGS, sizeof(Settings), &Settings); Changing the order of supported versions is the same as above, with the following change: QUIC_VERSION_SETTINGS Settings = { 0 }; const uint32_t SupportedVersions[2] = { 0xff00001dU, // This is the Draft-29 version in HOST byte order. It will be used first. 0x00000001U // QUIC version 1 in HOST byte order. It will be used if a VN packet is received. }; Settings.AcceptableVersionsList = SupportedVersions; Settings.AcceptableVersionsListLength = 2; Settings.OfferedVersionsList = SupportedVersions; Settings.OfferedVersionsListLength = 2; Settings.FullyDeployedVersionsList = SupportedVersions; Settings.FullyDeployedVersionsListLength = 2; The QUIC_VERSION_SETTINGS can be set on a single QUIC_CONNECTION, as well as a QUIC_CONFIGURATION with SetParam. Configuring QUIC Versions on MsQuic Servers A server application may also want to restrict the QUIC versions it supports to ensure a specific feature is available, or to prevent older versions of QUIC from being used. Configuring the QUIC versions on a MsQuic server is similar to configuring them on a client, however, the setting for server MUST be set globally, and not on the QUIC_CONFIGURATION used for the QUIC_LISTENER or QUIC_CONNECTION. If a server is not in a fleet, or the operator/application does not ever need to change QUIC versions, then all three lists in QUIC_VERSION_SETTINGS MUST be the same. If a server is deployed in a fleet, and the server operator wishes to change the supported QUIC versions, the Version Negotiation specification details how that should be done, quoted here: When adding support for a new version: The first step is to progressively add support for the new version to all server instances. This step updates the Acceptable Versions but not the Offered Versions nor the Fully-Deployed Versions. Once all server instances have been updated, operators wait for at least one MSL to allow any in-flight Version Negotiation packets to arrive. Then, the second step is to progressively add the new version to Offered Versions on all server instances. Once complete, operators wait for at least another MSL. Finally, the third step is to progressively add the new version to Fully-Deployed Versions on all server instances. When removing support for a version: The first step is to progressively remove the version from Fully-Deployed Versions on all server instances. Once it has been removed on all server instances, operators wait for at least one MSL to allow any in-flight Version Negotiation packets to arrive. Then, the second step is to progressively remove the version from Offered Versions on all server instances. Once complete, operators wait for at least another MSL. Finally, the third step is to progressively remove support for the version from all server instances. That step updates the Acceptable Versions. Note that this opens connections to version downgrades (but only for partially-deployed versions) during the update window, since those could be due to clients communicating with both updated and non-updated server instances. This snippet should execute before the server's QUIC_CONFIGURATION is created: QUIC_VERSION_SETTINGS Settings = { 0 }; const uint32_t SupportedVersions[2] = { 0xff00001dU, // This is the Draft-29 version in HOST byte order. It will be preferred over Version 1. 0x00000001U // QUIC version 1 in HOST byte order. It will be used if a client starts with Version 1, instead of Draft-29. }; Settings.AcceptableVersionsList = SupportedVersion; Settings.AcceptableVersionsListLength = 2; Settings.OfferedVersionsList = SupportedVersion; Settings.OfferedVersionsListLength = 2; Settings.FullyDeployedVersionsList = SupportedVersion; Settings.FullyDeployedVersionsListLength = 2; MsQuic->SetParam( NULL, QUIC_PARAM_GLOBAL_VERSION_SETTINGS, sizeof(Settings), &Settings); QUIC Version Negotiation Extension The Version Negotiation Extension is on by default in our officially-released binaries. Since the standard is not yet complete, incompatible changes may be made preventing different drafts from working with each other. An application using MsQuic should be cautious about enabling the Version Negotiation Extension in production scenarios until the standard is complete. Enabling Version Negotiation Extension on MsQuic Client The Version Negotiation Extension is enabled on client when QUIC_VERSION_SETTINGS are set on the QUIC_CONFIGURATION or QUIC_CONNECTION via SetParam. This setting MUST be set before ConnectionStart to take effect. Enabling Version Negotiation Extension on MsQuic Server Enabling the Version Negotiation Extension on server follows the same restrictions as setting the QUIC version on server, i.e. it MUST be set globally, using SetParam before the QUIC_CONFIGURATION is opened for the server. It is set automatically when QUIC_VERSION_SETTINGS are set."
  },
  "docs/api/ConfigurationClose.html": {
    "href": "docs/api/ConfigurationClose.html",
    "title": "ConfigurationClose function",
    "keywords": "ConfigurationClose function Deletes an existing security configuration. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_CONFIGURATION_CLOSE_FN)( _In_ _Pre_defensive_ __drv_freesMem(Mem) HQUIC Configuration ); Parameters Configuration The valid handle to an open configuration object. Remarks This function releases the configuration object. See Also ConfigurationOpen ConfigurationLoadCredential"
  },
  "docs/api/ConfigurationLoadCredential.html": {
    "href": "docs/api/ConfigurationLoadCredential.html",
    "title": "ConfigurationLoadCredential function",
    "keywords": "ConfigurationLoadCredential function Loads the specified credential configuration for the configuration object. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONFIGURATION_LOAD_CREDENTIAL_FN)( _In_ _Pre_defensive_ HQUIC Configuration, _In_ _Pre_defensive_ const QUIC_CREDENTIAL_CONFIG* CredConfig ); Parameters Configuration The valid handle to an open configuration object. CredConfig The QUIC_CREDENTIAL_CONFIG that describes the security configuration to load for the configuration. Remarks This function loads the security configuration and credentials for the configuration. Depending on the Flags field in the CredConfig (and platform support) the load may be synchronous or asynchronous. If asynchronous, completion is indicated via a callback to the AsyncHandler set on the CredConfig. Once the configuration has been successfully loaded, it can be used for a connection; ConnectionStart on client; ConnectionSetConfiguration on server. See Also ConfigurationOpen ConfigurationClose"
  },
  "docs/api/ConfigurationOpen.html": {
    "href": "docs/api/ConfigurationOpen.html",
    "title": "ConfigurationOpen function",
    "keywords": "ConfigurationOpen function Creates a new configuration. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONFIGURATION_OPEN_FN)( _In_ _Pre_defensive_ HQUIC Registration, _In_reads_(AlpnBufferCount) _Pre_defensive_ const QUIC_BUFFER* const AlpnBuffers, _In_range_(>, 0) uint32_t AlpnBufferCount, _In_reads_bytes_opt_(SettingsSize) const QUIC_SETTINGS* Settings, _In_ uint32_t SettingsSize, _In_opt_ void* Context, _Outptr_ _At_(*Configuration, __drv_allocatesMem(Mem)) _Pre_defensive_ HQUIC* Configuration ); Parameters Registration The valid handle to an open registration object. AlpnBuffers An array of QUIC_BUFFER structs that each contain a pointer and length to a different Application Layer Protocol Negotiation (ALPN) buffer. AlpnBufferCount The number of QUIC_BUFFER structs in the AlpnBuffers array. Settings An optional pointer to a QUIC_SETTINGS struct that defines the initial parameters for this configuration. SettingSize The size (in bytes) of the Settings parameter. Context The application context pointer (possibly null) to be associated with the configuration object. Configuration On success, returns a handle to the newly opened configuration object. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks On success, ConfigurationOpen creates a new configuration object. A configuration object abstracts all connection settings and security configuration. Once the configuration is loaded (via ConfigurationLoadCredential) it can be used for a connection; ConnectionStart on client; ConnectionSetConfiguration on server. The configuration must be cleaned up via ConfigurationClose when the application is done with it. See Also ConfigurationClose ConfigurationLoadCredential ConnectionSetConfiguration ConnectionStart"
  },
  "docs/api/ConnectionCertificateValidationComplete.html": {
    "href": "docs/api/ConnectionCertificateValidationComplete.html",
    "title": "ConnectionCertificateValidationComplete function",
    "keywords": "ConnectionCertificateValidationComplete function Uses the QUIC handle to complete certificate validation. This must be called after the app receives QUIC_CONNECTION_EVENT_PEER_CERTIFICATE_RECEIVED and returns QUIC_STATUS_PENDING. The app should complete certificate validation and call this before the idle timeout and disconnect timeouts occur. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_COMP_CERT_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ BOOLEAN Result, _In_ QUIC_TLS_ALERT_CODES TlsAlert ); Parameters Connection The valid handle to an open connection object. Result Certificate validation result. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks Available from v2.2 See Also ConnectionOpen ConnectionClose ConnectionShutdown"
  },
  "docs/api/ConnectionClose.html": {
    "href": "docs/api/ConnectionClose.html",
    "title": "ConnectionClose function",
    "keywords": "ConnectionClose function Closes an existing connection. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_CONNECTION_CLOSE_FN)( _In_ _Pre_defensive_ __drv_freesMem(Mem) HQUIC Connection ); Parameters Connection The valid handle to an open connection object. Remarks ConnectionClose cleans up and frees all resources allocated for the connection in ConnectionOpen. A caller should shutdown an active connection via ConnectionShutdown before calling ConnectionClose; calling ConnectionClose without ConnectionShutdown will implicitly call ConnectionShutdown with the QUIC_CONNECTION_SHUTDOWN_FLAG_SILENT flag. A server application MUST NOT call ConnectionClose within the QUIC_LISTENER_EVENT_NEW_CONNECTION callback when returning failure, to reject a connection. This will result in a double-free in release builds, and an assert in debug builds. It's acceptable to call ConnectionClose within the QUIC_LISTENER_EVENT_NEW_CONNECTION callback if returning QUIC_STATUS_SUCCESS, or QUIC_STATUS_PENDING, since the server application owns the connection object then. ConnectionClose is the last API call to use a connection handle. An application MUST NOT use a connection handle after calling ConnectionClose! Any calls using a connection handle after calling ConnectionClose is a use-after-free. See Also ConnectionOpen ConnectionShutdown ConnectionStart"
  },
  "docs/api/ConnectionOpen.html": {
    "href": "docs/api/ConnectionOpen.html",
    "title": "ConnectionOpen function",
    "keywords": "ConnectionOpen function Creates a new connection. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_OPEN_FN)( _In_ _Pre_defensive_ HQUIC Registration, _In_ _Pre_defensive_ QUIC_CONNECTION_CALLBACK_HANDLER Handler, _In_opt_ void* Context, _Outptr_ _At_(*Connection, __drv_allocatesMem(Mem)) _Pre_defensive_ HQUIC* Connection ); Parameters Registration The valid handle to an open registration object. Handler A pointer to the app's callback handler to be invoked for all connection events. Context The app context pointer (possibly null) to be associated with the connection object. Connection On success, returns a handle to the newly opened connection object. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks ConnectionOpen is used to create a connection in the client application. In server applications, ListenerOpen and ListenerStart must be called to listen for incoming connection attempts, and the server side Connection is created in the QUIC_LISTENER_EVENT_NEW_CONNECTION event. 'ConnectionOpen' only allocates the resources for the connection, it does not start the connection. To start the connect, the application must call ConnectionStart. Once ConnectionOpen completes successfully, the application may create streams, and queue data for sending. This is when 0-RTT streams and data MUST be created and queued. See StreamOpen, and StreamStart. Once the connection has been shutdown, it must be cleaned up with a call to ConnectionClose. See Also ConnectionClose ConnectionShutdown ConnectionStart QUIC_CONNECTION_CALLBACK QUIC_CONNECTION_EVENT"
  },
  "docs/api/ConnectionResumptionTicketValidationComplete.html": {
    "href": "docs/api/ConnectionResumptionTicketValidationComplete.html",
    "title": "ConnectionResumptionTicketValidationComplete function",
    "keywords": "ConnectionResumptionTicketValidationComplete function Uses the QUIC (server) handle to complete resumption ticket validation. This must be called after server app handles ticket validation and then return QUIC_STATUS_PENDING. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_COMP_RESUMPTION_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ BOOLEAN Result ); Parameters Connection The valid handle to an open connection object. Result Ticket validation result. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks Schannel doesn't support this feature. Available from v2.2 See Also ConnectionOpen ConnectionClose ConnectionShutdown"
  },
  "docs/api/ConnectionSendResumptionTicket.html": {
    "href": "docs/api/ConnectionSendResumptionTicket.html",
    "title": "ConnectionSendResumptionTicket function",
    "keywords": "ConnectionSendResumptionTicket function Uses the QUIC (server) handle to send a resumption ticket to the remote client, optionally with app-specific data useful during resumption. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_SEND_RESUMPTION_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ QUIC_SEND_RESUMPTION_FLAGS Flags, _In_ uint16_t DataLength, _In_reads_bytes_opt_(DataLength) const uint8_t* ResumptionData ); Parameters Connection The valid handle to an open connection object. Flags TODO DataLength TODO ResumptionData TODO Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks TODO See Also ConnectionOpen ConnectionClose ConnectionShutdown"
  },
  "docs/api/ConnectionSetConfiguration.html": {
    "href": "docs/api/ConnectionSetConfiguration.html",
    "title": "ConnectionSetConfiguration function",
    "keywords": "ConnectionSetConfiguration function Sets the (server-side) configuration handle for the connection. This must be called on an accepted connection in order to proceed with the QUIC handshake. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_SET_CONFIGURATION_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ _Pre_defensive_ HQUIC Configuration ); Parameters Connection The valid handle to an open connection object. Configuration The valid handle to an open and loaded configuration object. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks ConnectionSetConfiguration can be called in the QUIC_LISTENER_EVENT_NEW_CONNECTION callback, or outside of it if the connection was accepted. It's generally recommended to call ConnectionSetConfiguration in the QUIC_LISTENER_EVENT_NEW_CONNECTION callback unless the server application needs to do asynchronous processing to decide which configuration to use on a connection. You can use this function to set the ALPN list for the server connection. See Also ConnectionOpen ConnectionClose ConnectionShutdown"
  },
  "docs/api/ConnectionShutdown.html": {
    "href": "docs/api/ConnectionShutdown.html",
    "title": "ConnectionShutdown function",
    "keywords": "ConnectionShutdown function Starts the shutdown process on a connection. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) void (QUIC_API * QUIC_CONNECTION_SHUTDOWN_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ QUIC_CONNECTION_SHUTDOWN_FLAGS Flags, _In_ _Pre_defensive_ QUIC_UINT62 ErrorCode // Application defined error code ); Parameters Connection The valid handle to an open connection object. Flags The flags that control the behavior of the shutdown. Value Meaning QUIC_CONNECTION_SHUTDOWN_FLAG_NONE 0 The connection is shutdown gracefully and informs the peer. QUIC_CONNECTION_SHUTDOWN_FLAG_SILENT 1 The connection is immediately shutdown without informing the peer. ErrorCode The 62-bit error code to indicate to the peer as the reason for the shutdown. Remarks A client or server application may call ConnectionShutdown on any connections that have successfully called ConnectionStart to shut down the connection. ConnectionShutdown implicitly shuts down any streams that have not already shutdown, but it does not send stop_sending or reset_stream frames for them individually, and only sends a connection_close frame. Stream shutdown events are always delivered to the application for the streams which were implicitly shutdown. ConnectionShutdown is guaranteed to work in low-memory scenarios, though it may be unable to inform the peer if it cannot allocate memory for the final packet containing the connection_close frame. Using the QUIC_CONNECTION_SHUTDOWN_FLAG_SILENT flag instructs MsQuic to tear down the local connection state, but because the peer is not informed, packets may still arrive from the peer until connection idle timeout. These packets are ignored locally, however they may still show up in packet captures. See Also ConnectionOpen ConnectionClose ConnectionStart"
  },
  "docs/api/ConnectionStart.html": {
    "href": "docs/api/ConnectionStart.html",
    "title": "ConnectionStart function",
    "keywords": "ConnectionStart function Starts connecting to the server. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_CONNECTION_START_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ _Pre_defensive_ HQUIC Configuration, _In_ QUIC_ADDRESS_FAMILY Family, _In_reads_or_z_opt_(QUIC_MAX_SNI_LENGTH) const char* ServerName, _In_ uint16_t ServerPort // Host byte order ); Parameters Connection The valid handle to an open connection object. Configuration The valid handle to an open and loaded configuration object. Family The address family to use for resolving the IP address of the ServerName parameter. Supported values definitions are supported (The values are platform specific): Value Meaning QUIC_ADDRESS_FAMILY_UNSPEC Unspecified address family. QUIC_ADDRESS_FAMILY_INET Version 4 IP address family. QUIC_ADDRESS_FAMILY_INET6 Version 6 IP address family. ServerName The name of the server to connect to. It may also be an IP literal. ServerPort The UDP port, in host byte order, to connect to on the server. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks ConnectionStart initiates the connection from the client application. A server application doesn't start its side of the connection until it returns QUIC_STATUS_SUCCESS from the QUIC_LISTENER_EVENT_NEW_CONNECTION event. No packets are sent until ConnectionStart is called, which starts the handshake, generates the initial cryptographic keys, frames 0-RTT data if present, and then sends the initial flight of packets to the server. Since 0-RTT data is opportunistically sent during the connection handshake, it should be queued for send BEFORE calling ConnectionStart otherwise it may be sent after the handshake. Queueing 0-RTT data after calling ConnectionStart will race with the creation of the inital flight of packets and may not consistently be sent as 0-RTT data. Some settings on the Configuration, and on the Connection, only take effect if set before ConnectionStart is called. See ConfigurationOpen and SetParam for more details about settings. See Also ConnectionOpen ConnectionClose ConnectionShutdown"
  },
  "docs/api/DatagramSend.html": {
    "href": "docs/api/DatagramSend.html",
    "title": "DatagramSend function",
    "keywords": "DatagramSend function Queues app data to be sent unreliably in a datagram. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_DATAGRAM_SEND_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_reads_(BufferCount) _Pre_defensive_ const QUIC_BUFFER* const Buffers, _In_ uint32_t BufferCount, _In_ QUIC_SEND_FLAGS Flags, _In_opt_ void* ClientSendContext ); Parameters TODO Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks TODO"
  },
  "docs/api/GetContext.html": {
    "href": "docs/api/GetContext.html",
    "title": "GetContext function",
    "keywords": "GetContext function Gets the application context from the API object. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) void* (QUIC_API * QUIC_GET_CONTEXT_FN)( _In_ _Pre_defensive_ HQUIC Handle ); Parameters Handle The valid handle to any API object. This includes handles to registration, configuration, listener, connection and stream objects. Return Value The function returns the previously set application context for the object. Remarks This function allows the app to query the application context it has previously set on the object. Important There is no internal synchronization for this context. If the app calls GetContext, SetContext and/or SetCallbackHandler on different threads, it must provide for the necessary synchronization mechanisms. See Also SetContext SetCallbackHandler"
  },
  "docs/api/GetParam.html": {
    "href": "docs/api/GetParam.html",
    "title": "GetParam function",
    "keywords": "GetParam function Gets a parameter from an API object. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_GET_PARAM_FN)( _When_(QUIC_PARAM_IS_GLOBAL(Param), _Reserved_) _When_(!QUIC_PARAM_IS_GLOBAL(Param), _In_ _Pre_defensive_) HQUIC Handle, _In_ uint32_t Param, _Inout_ _Pre_defensive_ uint32_t* BufferLength, _Out_writes_bytes_opt_(*BufferLength) void* Buffer ); Parameters Handle The valid handle to any API object. This includes handles to registration, configuration, listener, connection and stream objects. For global parameters, this parameter must be NULL. Param The parameter for which the value is to be set (for example, QUIC_PARAM_CONN_IDLE_TIMEOUT). BufferLength The size, in bytes, of the buffer pointed to by the Buffer parameter. Buffer A pointer to the buffer in which the value for the requested parameter is specified. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks While many parameters are staticly-sized, some are dynamically-sized and will require the application to do a double call to GetParam: the first to find out the amount of memory needed to allocate, placed in BufferLength, and the second call to actually retrieve the parameter's value. For example, after setting a QUIC_VERSION_SETTINGS on a QUIC_CONFIGURATION, retrieving the settings from the same API object will require a double call to allocate enough storage for the QUIC_VERSION_SETTINGS lists. Sample of double-call: uint32_t SettingsSize = 0; QUIC_VERSION_SETTINGS* Settings = NULL; if (QUIC_STATUS_BUFFER_TOO_SMALL == MsQuic->GetParam( Configuration, QUIC_PARAM_CONFIGURATION_VERSION_SETTINGS, &SettingsSize, Settings)) { Settings = (QUIC_VERSION_SETTINGS*)malloc(SettingsSize); if (QUIC_FAILED( MsQuic->GetParam( Configuration, QUIC_PARAM_CONFIGURATION_VERSION_SETTINGS, &SettingsSize, Settings))) { // Error. } } See Also Settings SetParam"
  },
  "docs/api/ListenerClose.html": {
    "href": "docs/api/ListenerClose.html",
    "title": "ListenerClose function",
    "keywords": "ListenerClose function Closes an existing listener. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_LISTENER_CLOSE_FN)( _In_ _Pre_defensive_ __drv_freesMem(Mem) HQUIC Listener ); Parameters Listener A valid handle to an open listener object. Remarks ListenerClose frees all allocated resources associated with the listener handle. If a listener has not had ListenerStop called on it at the time ListenerClose is called, ListenerStop is invoked internally. A server application MUST NOT call ListenerClose within any callback except for QUIC_LISTENER_EVENT_STOP_COMPLETE, unless it has already received the QUIC_LISTENER_EVENT_STOP_COMPLETE event. ListenerClose is equivalent to free and MUST be the final call on a listener handle. Any API calls using a listener handle after ListenerClose has been called is a use-after-free error! See Also ListenerOpen ListenerStart ListenerStop"
  },
  "docs/api/ListenerOpen.html": {
    "href": "docs/api/ListenerOpen.html",
    "title": "ListenerOpen function",
    "keywords": "ListenerOpen function Creates a new listener. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_LISTENER_OPEN_FN)( _In_ _Pre_defensive_ HQUIC Registration, _In_ _Pre_defensive_ QUIC_LISTENER_CALLBACK_HANDLER Handler, _In_opt_ void* Context, _Outptr_ _At_(*Listener, __drv_allocatesMem(Mem)) _Pre_defensive_ HQUIC* Listener ); Parameters Registration The valid handle to an open registration object. Handler A pointer to the app's callback handler to be invoked for all listener events. Context The app context pointer (possibly null) to be associated with the listener object. Listener On success, returns a handle to the newly opened listener object. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks ListenerOpen is used to allocate resources for a server application to listen for QUIC connections. The server doesn't start listening for connection attempts until ListenerStart is successfully called. For a client application, ConnectionOpen is called to create a new connection, and ConnectionStart to start that new connection. The application may call ListenerStart and ListenerStop multiple times over the lifetime of a listener object, if it needs to start and stop listening for connections. Most server applications will call ListenerStart once at start up, and then ListenerStop at shutdown. Every listener created with a call to ListenerOpen MUST be cleaned up with a call to ListenerClose, otherwise a memory leak will occur. See Also ListenerClose ListenerStart ListenerStop"
  },
  "docs/api/ListenerStart.html": {
    "href": "docs/api/ListenerStart.html",
    "title": "ListenerStart function",
    "keywords": "ListenerStart function Starts listening for incoming connection requests. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_LISTENER_START_FN)( _In_ _Pre_defensive_ HQUIC Listener, _In_reads_(AlpnBufferCount) _Pre_defensive_ const QUIC_BUFFER* const AlpnBuffers, _In_range_(>, 0) uint32_t AlpnBufferCount, _In_opt_ const QUIC_ADDR* LocalAddress ); Parameters Listener A valid handle to an open listener object. AlpnBuffers An array of QUIC_BUFFER structs that each contain a pointer and length to a different Application Layer Protocol Negotiation (ALPN) buffer, in order of preference, to be negotiated by the incoming connections. AlpnBufferCount The number of QUIC_BUFFER structs in AlpnBuffers. LocalAddress Optional pointer to a QUIC_ADDR to indicate the address and/or port to listen for connections on. May be NULL to let the networking stack choose. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks ListenerStart starts listening for incoming connections and callbacks on the listener may begin before the function call returns. Connection attempts that are received are indicated via QUIC_LISTENER_EVENT_NEW_CONNECTION event to the server application. The server application indicates acceptance of the connection attempt by calling SetCallbackHandler on the connection object, and returning QUIC_STATUS_SUCCESS from the QUIC_LISTENER_EVENT_NEW_CONNECTION callback. The server application must call ConnectionSetConfiguration on the connection, either before returning from the QUIC_LISTENER_EVENT_NEW_CONNECTION callback, or on its own after returning from the callback, otherwise the connection handshake will stall and timeout. After returning QUIC_STATUS_SUCCESS from the QUIC_LISTENER_EVENT_NEW_CONNECTION callback, the server application owns the connection object and must eventually call ConnectionClose on it, otherwise a memory leak will occur. The server application MUST NOT call ConnectionClose within the QUIC_LISTENER_EVENT_NEW_CONNECTION callback when returning failure, to reject a connection. This will result in a double-free in release builds, and an assert in debug builds. It's acceptable to call ConnectionClose within the QUIC_LISTENER_EVENT_NEW_CONNECTION callback if returning QUIC_STATUS_SUCCESS, or QUIC_STATUS_PENDING, since the server application owns the connection object then. ALPNs specified in AlpnBuffers must be less than 255 bytes in length. The server application may set any combination of local address and/or port number in the QUIC_ADDR pointed to by LocalAddress. If no port number is given, then the networking stack will choose an available port number, which can be queried by GetParam with QUIC_PARAM_LISTENER_LOCAL_ADDRESS. MsQuic listens on dual-mode wildcard sockets for each unique port number, and performs address filtering, if necessary, within the QUIC layer. Due to the use of per processor sockets for performance reasons, 2 distinct processes listening on the same port will not result in the 2nd instance failing to start. The behavior in this case is undefined, and different per platform, but will result in each app not getting the receives it expects. There is potential for a future workaround for this on Windows, but no currently known solution on Posix-based platforms. This quirk does not apply if a process using UDP without MsQuic is already bound to the port, as long as that process is not using per processor sockets. On Posix-based platforms, 2 distinct processes using wildcard port numbers can potentially receive the same port number, resulting in the above behavior. This behavior does not exist on Windows. See Also ListenerOpen ListenerClose ListenerStop"
  },
  "docs/api/ListenerStop.html": {
    "href": "docs/api/ListenerStop.html",
    "title": "ListenerStop function",
    "keywords": "ListenerStop function Stops listening for incoming connection requests. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_LISTENER_STOP_FN)( _In_ _Pre_defensive_ HQUIC Listener ); Parameters Listener A valid handle to an open, and started, listener object. Remarks ListenerStop is called when the server application wants to stop receiving new incoming connections. It is an asynchronous call. When the stop operation is complete the QUIC_LISTENER_EVENT_STOP_COMPLETE event will be delivered to the application. The server may call ListenerStop in any callback. If the server application wishes to resume receiving new connections, it may call ListenerStart on the same listener, again. See Also ListenerOpen ListenerClose ListenerStart"
  },
  "docs/api/MsQuicClose.html": {
    "href": "docs/api/MsQuicClose.html",
    "title": "MsQuicClose function",
    "keywords": "MsQuicClose function Closes an existing handle to the MsQuic library, releasing the reference on the library and freeing the function table. Syntax _IRQL_requires_max_(PASSIVE_LEVEL) _Pre_defensive_ void QUIC_API MsQuicClose( _In_ const void* QuicApi ); Parameters QuicApi The function table from a previous call to MsQuicOpenVersion. Remarks This function must be called when the app is done with the MsQuic library. MsQuicClose and MsQuicOpenVersion are not thread-safe if the caller is statically linking MsQuic, and therefore must not be called in parallel. See Also MsQuicOpenVersion"
  },
  "docs/api/MsQuicOpen2.html": {
    "href": "docs/api/MsQuicOpen2.html",
    "title": "MsQuicOpen2 function",
    "keywords": "MsQuicOpen2 function A simple helper inline function (or macro in C on Linux) that wraps MsQuicOpenVersion to open a version 2 API table."
  },
  "docs/api/MsQuicOpenVersion.html": {
    "href": "docs/api/MsQuicOpenVersion.html",
    "title": "MsQuicOpenVersion function",
    "keywords": "MsQuicOpenVersion function Opens a new handle to the MsQuic library and returns a version specific API table. Syntax _IRQL_requires_max_(PASSIVE_LEVEL) _Pre_defensive_ QUIC_STATUS QUIC_API MsQuicOpenVersion( _In_ uint32_t Version, _Out_ const QUIC_API_TABLE** QuicApi ); Parameters Version The API Version to use. QuicApi On success, returns a pointer to the API function table. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks This function is the entry point for the MsQuic API. This function may be called multiple times to get multiple new function tables, but this is generally unnecessary. An app should only need call this once. A single QuicApi may be shared and safely used by multiple callers on parallel threads. For every successful call to MsQuicOpenVersion the app must call MsQuicClose, passing in the function table from QuicApi when the app is done with it. Calls to MsQuicOpenVersion and MsQuicClose increment and decrement reference counts on the library. The addition of the first reference count initializes the global state and the removal of the last reference count cleans up the global state. Since both of these operations are not light weight it's highly recommended that an app does not open and close very frequently. MsQuicOpenVersion may dynamically load other dependencies, so it must not be called from DllMain on Windows. MsQuicOpenVersion takes a version number to indicate which version of the API to use. Newer versions of the library will support older versions of the API for binary compatibility. The MsQuicOpen2 definition in msquic.h now forwards to MsQuicOpenVersion MsQuicOpenVersion and MsQuicClose are not thread-safe if the caller is statically linking MsQuic, and therefore must not be called in parallel. See Also MsQuicClose QUIC_API_TABLE"
  },
  "docs/api/QUIC_API_TABLE.html": {
    "href": "docs/api/QUIC_API_TABLE.html",
    "title": "QUIC_API_TABLE structure",
    "keywords": "QUIC_API_TABLE structure The function table for all MsQuic APIs. Syntax typedef struct QUIC_API_TABLE { QUIC_SET_CONTEXT_FN SetContext; QUIC_GET_CONTEXT_FN GetContext; QUIC_SET_CALLBACK_HANDLER_FN SetCallbackHandler; QUIC_SET_PARAM_FN SetParam; QUIC_GET_PARAM_FN GetParam; QUIC_REGISTRATION_OPEN_FN RegistrationOpen; QUIC_REGISTRATION_CLOSE_FN RegistrationClose; QUIC_REGISTRATION_SHUTDOWN_FN RegistrationShutdown; QUIC_CONFIGURATION_OPEN_FN ConfigurationOpen; QUIC_CONFIGURATION_CLOSE_FN ConfigurationClose; QUIC_CONFIGURATION_LOAD_CREDENTIAL_FN ConfigurationLoadCredential; QUIC_LISTENER_OPEN_FN ListenerOpen; QUIC_LISTENER_CLOSE_FN ListenerClose; QUIC_LISTENER_START_FN ListenerStart; QUIC_LISTENER_STOP_FN ListenerStop; QUIC_CONNECTION_OPEN_FN ConnectionOpen; QUIC_CONNECTION_CLOSE_FN ConnectionClose; QUIC_CONNECTION_SHUTDOWN_FN ConnectionShutdown; QUIC_CONNECTION_START_FN ConnectionStart; QUIC_CONNECTION_SET_CONFIGURATION_FN ConnectionSetConfiguration; QUIC_CONNECTION_SEND_RESUMPTION_FN ConnectionSendResumptionTicket; QUIC_STREAM_OPEN_FN StreamOpen; QUIC_STREAM_CLOSE_FN StreamClose; QUIC_STREAM_START_FN StreamStart; QUIC_STREAM_SHUTDOWN_FN StreamShutdown; QUIC_STREAM_SEND_FN StreamSend; QUIC_STREAM_RECEIVE_COMPLETE_FN StreamReceiveComplete; QUIC_STREAM_RECEIVE_SET_ENABLED_FN StreamReceiveSetEnabled; QUIC_DATAGRAM_SEND_FN DatagramSend; } QUIC_API_TABLE; Members SetContext See SetContext GetContext See GetContext SetCallbackHandler See SetCallbackHandler SetParam See SetParam GetParam See GetParam RegistrationOpen See RegistrationOpen RegistrationClose See RegistrationClose RegistrationShutdown See RegistrationShutdown ConfigurationOpen See ConfigurationOpen ConfigurationClose See ConfigurationClose ConfigurationLoadCredential See ConfigurationLoadCredential ListenerOpen See ListenerOpen ListenerClose See ListenerClose ListenerStart See ListenerStart ListenerStop See ListenerStop ConnectionOpen See ConnectionOpen ConnectionClose See ConnectionClose ConnectionShutdown See ConnectionShutdown ConnectionStart See ConnectionStart ConnectionSetConfiguration See ConnectionSetConfiguration ConnectionSendResumptionTicket See ConnectionSendResumptionTicket StreamOpen See StreamOpen StreamClose See StreamClose StreamStart See StreamStart StreamShutdown See StreamShutdown StreamSend See StreamSend StreamReceiveComplete See StreamReceiveComplete StreamReceiveSetEnabled See StreamReceiveSetEnabled DatagramSend See DatagramSend See Also MsQuicOpen2"
  },
  "docs/api/QUIC_CONNECTION_CALLBACK.html": {
    "href": "docs/api/QUIC_CONNECTION_CALLBACK.html",
    "title": "QUIC_CONNECTION_CALLBACK function pointer",
    "keywords": "QUIC_CONNECTION_CALLBACK function pointer Handles connection events. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) _Function_class_(QUIC_CONNECTION_CALLBACK) QUIC_STATUS (QUIC_API QUIC_CONNECTION_CALLBACK)( _In_ HQUIC Connection, _In_opt_ void* Context, _Inout_ QUIC_CONNECTION_EVENT* Event ); Parameters Connection The valid handle to the connection object this event is for. Context The application callback context (optionally) supplied in ConnectionOpen, SetCallbackHandler or SetContext. Event A pointer to the QUIC_CONNECTION_EVENT payload. Remarks This function pointer handles callbacks from MsQuic for connection events. Apps are expected to keep any execution time in the callback to a minimum. See Also ConnectionOpen QUIC_CONNECTION_EVENT SetCallbackHandler SetContext"
  },
  "docs/api/QUIC_CONNECTION_EVENT.html": {
    "href": "docs/api/QUIC_CONNECTION_EVENT.html",
    "title": "QUIC_CONNECTION_EVENT structure",
    "keywords": "QUIC_CONNECTION_EVENT structure The payload for QUIC connection events. Syntax typedef struct QUIC_CONNECTION_EVENT { QUIC_CONNECTION_EVENT_TYPE Type; union { struct { BOOLEAN SessionResumed; _Field_range_(>, 0) uint8_t NegotiatedAlpnLength; _Field_size_(NegotiatedAlpnLength) const uint8_t* NegotiatedAlpn; } CONNECTED; struct { QUIC_STATUS Status; QUIC_UINT62 ErrorCode; // Wire format error code. } SHUTDOWN_INITIATED_BY_TRANSPORT; struct { QUIC_UINT62 ErrorCode; } SHUTDOWN_INITIATED_BY_PEER; struct { BOOLEAN HandshakeCompleted : 1; BOOLEAN PeerAcknowledgedShutdown : 1; BOOLEAN AppCloseInProgress : 1; } SHUTDOWN_COMPLETE; struct { const QUIC_ADDR* Address; } LOCAL_ADDRESS_CHANGED; struct { const QUIC_ADDR* Address; } PEER_ADDRESS_CHANGED; struct { HQUIC Stream; QUIC_STREAM_OPEN_FLAGS Flags; } PEER_STREAM_STARTED; struct { uint16_t BidirectionalCount; uint16_t UnidirectionalCount; } STREAMS_AVAILABLE; struct { uint16_t IdealProcessor; } IDEAL_PROCESSOR_CHANGED; struct { BOOLEAN SendEnabled; uint16_t MaxSendLength; } DATAGRAM_STATE_CHANGED; struct { const QUIC_BUFFER* Buffer; QUIC_RECEIVE_FLAGS Flags; } DATAGRAM_RECEIVED; struct { /* inout */ void* ClientContext; QUIC_DATAGRAM_SEND_STATE State; } DATAGRAM_SEND_STATE_CHANGED; struct { uint16_t ResumptionStateLength; const uint8_t* ResumptionState; } RESUMED; struct { _Field_range_(>, 0) uint32_t ResumptionTicketLength; _Field_size_(ResumptionTicketLength) const uint8_t* ResumptionTicket; } RESUMPTION_TICKET_RECEIVED; struct { QUIC_CERTIFICATE* Certificate; uint32_t DeferredErrorFlags; QUIC_STATUS DeferredStatus; QUIC_CERTIFICATE_CHAIN* Chain; } PEER_CERTIFICATE_RECEIVED; }; } QUIC_CONNECTION_EVENT; Parameters Type The QUIC_CONNECTION_EVENT_TYPE that indicates which type of event this is, and which payload to reference (if any) for additional information. Remarks QUIC_CONNECTION_EVENT_CONNECTED This event is delivered when the handshake has completed. This means the peer has been securely authenticated. This happens after one full round trip on the client side. The server side considers the handshake complete once the client responds after this. Additional state can be found in the CONNECTED struct/union. SessionResumed A flag that indicates if a previous TLS session was successfully resumed. NegotiatedAlpnLength The length of the NegotiatedAlpn field. NegotiatedAlpn The buffer (not null terminated) that holds the ALPN that was negotiated during the handshake. QUIC_CONNECTION_EVENT_SHUTDOWN_INITIATED_BY_TRANSPORT This event is delivered whenever the transport (e.g. QUIC layer) determines the connection has been terminated. This can happen for a number of different reasons. Some are as follows. The handshake fails (any number of reasons). The connection is idle for long enough. The connection disconnects (loses contact with peer; no acknowledgements). The connection encounters a protocol violation. Status The platform status code that indicates the reason for the shutdown. ErrorCode The wire format error code that indicates the reason for the shutdown. QUIC_CONNECTION_EVENT_SHUTDOWN_INITIATED_BY_PEER This event is delivered when the peer application has terminated the application, with an application's protocol specific, 62-bit error code. ErrorCode The error code received from the peer for the shutdown. QUIC_CONNECTION_EVENT_SHUTDOWN_COMPLETE This event is the last one delivered to the application, and indicates the connection may now be safely closed. HandshakeCompleted A flag indicating if the QUIC handshake completed before the connection was shutdown. PeerAcknowledgedShutdown A flag indicating if the peer explicitly acknowledged the connection shutdown. AppCloseInProgress A flag indicating that the application called ConnectionClose on this connection. QUIC_CONNECTION_EVENT_LOCAL_ADDRESS_CHANGED This event is delivered when the local address used for the primary/active path communication has changed. Address The new local IP address. QUIC_CONNECTION_EVENT_PEER_ADDRESS_CHANGED This event is delivered when the remote address used for the primary/active path communication has changed. Address The new peer IP address. QUIC_CONNECTION_EVENT_PEER_STREAM_STARTED This event is delivered when the peer has created a new stream. Stream A handle to the newly peer-created stream. Flags A set of flags indicating describing the newly opened stream: Value Meaning QUIC_STREAM_OPEN_FLAG_NONE 0 No special behavior. Defaults to bidirectional stream. QUIC_STREAM_OPEN_FLAG_UNIDIRECTIONAL 1 A unidirectional stream. QUIC_STREAM_OPEN_FLAG_0_RTT 2 The stream was received in 0-RTT. If a server wishes to use QUIC_STREAM_OPEN_FLAG_DELAY_ID_FC_UPDATES for the newly started stream, it may append this flag to Flags before it returns from the callback. QUIC_CONNECTION_EVENT_STREAMS_AVAILABLE This event indicates the number of streams the peer is willing to accept has changed. BidirectionalCount The number of bidirectional streams the peer is willing to accept. UnidirectionalCount The number of unidirectional streams the peer is willing to accept. QUIC_CONNECTION_EVENT_PEER_NEEDS_STREAMS This event indicates the peer is currently blocked on the number of parallel streams the app has configured it is willing to accept. QUIC_CONNECTION_EVENT_IDEAL_PROCESSOR_CHANGED This event indicates the processor or CPU that MsQuic has determined would be the best for processing the given connection. IdealProcessor The processor number that should be ideally used for processing the connection. QUIC_CONNECTION_EVENT_DATAGRAM_STATE_CHANGED This event indicates the current state for sending unreliable datagrams has changed. SendEnabled A flag that indicates datagrams are allowed to be sent. MaxSendLength When enabled, indicates the maximum length of a single datagram that can fit in a packet. QUIC_CONNECTION_EVENT_DATAGRAM_RECEIVED This event indicates a received unreliable datagram from the peer. Buffer Contains a pointer to the received data along with the length of the data. Flags A set of flags indicating describing the received datagram data: Value Meaning QUIC_RECEIVE_FLAG_NONE 0 No special behavior. QUIC_RECEIVE_FLAG_0_RTT 1 The data was received in 0-RTT. QUIC_RECEIVE_FLAG_FIN 2 N/A. Only used for Stream data. Unused for datagrams. QUIC_CONNECTION_EVENT_DATAGRAM_SEND_STATE_CHANGED This event indicates a state change for a previous unreliable datagram send via DatagramSend. ClientContext The context pointer passed into DatagramSend as ClientSendContext. State The latest state for the sent datagram. Value Meaning QUIC_DATAGRAM_SEND_SENT 1 Indicates the datagram has now been sent out on the network. This is the earliest the app may free the Buffers passed into DatagramSend. QUIC_DATAGRAM_SEND_LOST_SUSPECT 2 The sent datagram is suspected to be lost. If desired, the app could retransmit the data now. QUIC_DATAGRAM_SEND_LOST_DISCARDED 3 The sent datagram is lost and no longer tracked by MsQuic. QUIC_DATAGRAM_SEND_ACKNOWLEDGED 4 The sent datagram has been acknowledged. QUIC_DATAGRAM_SEND_ACKNOWLEDGED_SPURIOUS 5 The sent datagram has been acknowledged after previously being suspected as lost. QUIC_DATAGRAM_SEND_CANCELED 6 The queued datagram was canceled; either because the connection was shutdown or the peer did not negotiate the feature. QUIC_CONNECTION_EVENT_RESUMED This event indicates that a previous session has been successfully resumed at the TLS layer. This event is delivered for the server side only. The server app must indicate acceptance or rejection of the resumption ticket by returning a successful or failure status code from the event. If rejected by the server app, then resumption is rejected and a normal handshake will be performed. ResumptionStateLength The length of the ResumptionState buffer. ResumptionState The resumption ticket data previously sent to the client via ConnectionSendResumptionTicket. QUIC_CONNECTION_EVENT_RESUMPTION_TICKET_RECEIVED This event indicates a TLS resumption ticket has been received from the server. ResumptionTicketLength The length of the ResumptionTicket buffer. ResumptionTicket The resumption ticket data received from the server. For a client to later resume the session in a new connection, it must pass this data to the new connection via the QUIC_PARAM_CONN_RESUMPTION_TICKET parameter. QUIC_CONNECTION_EVENT_PEER_CERTIFICATE_RECEIVED This event indicates a certificate has been received from the peer. Certificate Pointer to a platform/TLS specific certificate. Valid only during the callback. If QUIC_CREDENTIAL_FLAG_USE_PORTABLE_CERTIFICATES was specified in the QUIC_CREDENTIAL_CONFIG, this will be a QUIC_BUFFER containing the DER (binary) encoded remote X.509 certificate. DeferredErrorFlags Bit flag of errors encountered when doing deferring validation of the certificate. Valid only with QUIC_CREDENTIAL_FLAG_DEFER_CERTIFICATE_VALIDATION flag specified upfront. Only supported with Schannel currently. DeferredStatus Most severe error status when doing deferred validation of the certificate. Valid only with QUIC_CREDENTIAL_FLAG_DEFER_CERTIFICATE_VALIDATION flag specified upfront. Chain Pointer to a platform/TLS specific certificate chain. Valid only during the callback. If QUIC_CREDENTIAL_FLAG_USE_PORTABLE_CERTIFICATES was specified in the QUIC_CREDENTIAL_CONFIG, this will be a QUIC_BUFFER containing the PKCS #7 DER (binary) encoded certificate chain. See Also ConnectionOpen QUIC_CONNECTION_CALLBACK SetCallbackHandler SetContext QUIC_CREDENTIAL_CONFIG"
  },
  "docs/api/QUIC_CREDENTIAL_CONFIG.html": {
    "href": "docs/api/QUIC_CREDENTIAL_CONFIG.html",
    "title": "QUIC_CREDENTIAL_CONFIG structure",
    "keywords": "QUIC_CREDENTIAL_CONFIG structure The description for the security configuration to load for a configuration object. Syntax typedef struct QUIC_CREDENTIAL_CONFIG { QUIC_CREDENTIAL_TYPE Type; QUIC_CREDENTIAL_FLAGS Flags; union { QUIC_CERTIFICATE_HASH* CertificateHash; QUIC_CERTIFICATE_HASH_STORE* CertificateHashStore; QUIC_CERTIFICATE* CertificateContext; QUIC_CERTIFICATE_FILE* CertificateFile; QUIC_CERTIFICATE_FILE_PROTECTED* CertificateFileProtected; QUIC_CERTIFICATE_PKCS12* CertificatePkcs12; }; const char* Principal; void* Reserved; // Currently unused QUIC_CREDENTIAL_LOAD_COMPLETE_HANDLER AsyncHandler; // Optional QUIC_ALLOWED_CIPHER_SUITE_FLAGS AllowedCipherSuites;// Optional const char* CaCertificateFile; // Optional } QUIC_CREDENTIAL_CONFIG; Members Type Indicates which type of credential is represented. QUIC_CREDENTIAL_TYPE_NONE Only valid for clients. No client authentication is provided. QUIC_CREDENTIAL_TYPE_CERTIFICATE_HASH Search the Windows Current User (Local Machine for kernel mode) My certificate store for the certificate thumbprint pointed to by the CertificateHash member. Only valid on Windows with Schannel. QUIC_CREDENTIAL_TYPE_CERTIFICATE_HASH_STORE Search the Windows Current User (Local Machine for kernel mode) certificate store for the provided store name and certificate thumbprint pointed to by the CertificateHashStore member. Only valid on Windows with Schannel. QUIC_CREDENTIAL_TYPE_CERTIFICATE_CONTEXT Provide a Windows CAPI CERTIFICATE_CONTEXT with the certificate to use in the CertificateContext member. Only valid on Windows in user mode. QUIC_CREDENTIAL_TYPE_CERTIFICATE_FILE Provide file paths to a private key file in PEM format, and a certificate file in PEM or CER format, pointed to by the CertificateFile member. Only valid for OpenSSL. QUIC_CREDENTIAL_TYPE_CERTIFICATE_FILE_PROTECTED Provide file paths to a protected private key file, and a certificate file, and a password to unprotect the private key, pointed to by the CertificateFileProtected member. Only valid for OpenSSL. QUIC_CREDENTIAL_TYPE_CERTIFICATE_PKCS12 Provide an in-memory ASN.1 blob of a PKCS12 (PFX) certificate and private, with optional private key password, pointed to by the CertificatePkcs12 member. Only valid for OpenSSL. Flags Any combination of the following flags which change the credential behavior. QUIC_CREDENTIAL_FLAG_NONE Used with server in default configuration. QUIC_CREDENTIAL_FLAG_CLIENT Presence of this flag indicates this is a client. Absence indicates server. QUIC_CREDENTIAL_FLAG_LOAD_ASYNCHRONOUS Return QUIC_STATUS_PENDING immediately from ConfigurationLoadCredential and load the credentials asynchronously. Completion is indicated via the AsyncHandler callback. QUIC_CREDENTIAL_FLAG_NO_CERTIFICATE_VALIDATION Indicate to the TLS layer that no server certificate validation is to be performed. THIS IS DANGEROUS; DO NOT USE IN PRODUCTION QUIC_CREDENTIAL_FLAG_ENABLE_OCSP Enable OCSP stapling for this connection. Only valid for Schannel. QUIC_CREDENTIAL_FLAG_INDICATE_CERTIFICATE_RECEIVED Receive QUIC_CONNECTION_EVENT_PEER_CERTIFICATE_RECEIVED events when a certificate is received from the peer (client or server). QUIC_CREDENTIAL_FLAG_DEFER_CERTIFICATE_VALIDATION Request the TLS layer perform validation on the received certificate, and provide results to the application via QUIC_CONNECTION_EVENT_PEER_CERTIFICATE_RECEIVED events, and allow the application to override failed validation. Only supported by Schannel. Requires QUIC_CREDENTIAL_FLAG_INDICATE_CERTIFICATE_RECEIVED to also be set. QUIC_CREDENTIAL_FLAG_REQUIRE_CLIENT_AUTHENTICATION Require clients to provide authentication for the handshake to succeed. Not supported on client. QUIC_CREDENTIAL_FLAG_USE_TLS_BUILTIN_CERTIFICATE_VALIDATION Use the built-in TLS library's certificate validation instead of the platform's certificate validation. This is enabled by default on non-Windows systems, and only has effect on Windows when OpenSSL is used. QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_END_CERT Only check the leaf certificate for revocation. Only valid on Windows. QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_CHAIN Check every certificate in the chain for revocation. Only valid on Windows. QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT Check every certificate in the chain, except the root, for revocation. Only valid on Windows. QUIC_CREDENTIAL_FLAG_IGNORE_NO_REVOCATION_CHECK Ignore errors from no revocation check being performed. Only valid on Windows. QUIC_CREDENTIAL_FLAG_IGNORE_REVOCATION_OFFLINE Ignore revocation offline failures. Only valid on Windows. QUIC_CREDENTIAL_FLAG_SET_ALLOWED_CIPHER_SUITES Enables which cipher suites are available for negotiation via the AllowedCipherSuites member. QUIC_CREDENTIAL_FLAG_USE_PORTABLE_CERTIFICATES Provide the remote X.509 certificate as a DER (binary) blob and entire certificate chain to the application as a PKCS #7 DER blob in the QUIC_CONNECTION_EVENT_PEER_CERTIFICATE_RECEIVED event. Not supported in kernel mode. QUIC_CREDENTIAL_FLAG_USE_SUPPLIED_CREDENTIALS Tells the TLS layer (currently only supported by Schannel) to only use the supplied client certificate and not go looking for one on its own if the server asked for a certificate but the client app didn't supply one. More information can be found here. QUIC_CREDENTIAL_FLAG_USE_SYSTEM_MAPPER Tells the TLS layer (only supported by Schannel server) to use the system credential mapper to map the client-supplied credentials to a user account on the system. QUIC_CREDENTIAL_FLAG_CACHE_ONLY_URL_RETRIEVAL Only use certificates already cached when doing URL retrieval to build a certificate chain. Only valid on Windows. QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_CACHE_ONLY Only use cached revocation information when checking a certificate chain. Only valid on Windows. QUIC_CREDENTIAL_FLAG_INPROC_PEER_CERTIFICATE Obtain the peer certificate using a faster in-process API call. Only available on Schannel in the latest Windows 11 builds. QUIC_CREDENTIAL_FLAG_SET_CA_CERTIFICATE_FILE Enable CA certificate file provided in the CaCertificateFile member. CertificateHash Must only use with QUIC_CREDENTIAL_TYPE_CERTIFICATE_HASH type. CertificateHashStore Must only use with QUIC_CREDENTIAL_TYPE_CERTIFICATE_HASH_STORE type. CertificateContext Must only use with QUIC_CREDENTIAL_TYPE_CERTIFICATE_CONTEXT type. CertificateFile Must only use with QUIC_CREDENTIAL_TYPE_CERTIFICATE_FILE type. CertificateFileProtected Must only use with QUIC_CREDENTIAL_TYPE_CERTIFICATE_FILE_PROTECTED type. CertificatePkcs12 Must only use with QUIC_CREDENTIAL_TYPE_CERTIFICATE_PKCS12 type. Principal Principal name string to select certificate by the principal name. Only supported by Schannel. AsyncHandler Optional callback to receive completion of asynchronous credential load. Only used with QUIC_CREDENTIAL_FLAG_LOAD_ASYNCHRONOUS flag. AllowedCipherSuites A set of flags indicating which cipher suites are available to negotiate. Must be used with QUIC_CREDENTIAL_FLAG_SET_ALLOWED_CIPHER_SUITES. CaCertificateFile Optional pointer to CA certificate file that will be used when validating the peer certificate. This allows the use of a private CA. Must be used with QUIC_CREDENTIAL_FLAG_SET_CA_CERTIFICATE_FILE. Remarks TODO typedef _IRQL_requires_max_(PASSIVE_LEVEL) _Function_class_(QUIC_CREDENTIAL_LOAD_COMPLETE) void (QUIC_API QUIC_CREDENTIAL_LOAD_COMPLETE)( _In_ HQUIC Configuration, _In_opt_ void* Context, _In_ QUIC_STATUS Status ); typedef QUIC_CREDENTIAL_LOAD_COMPLETE *QUIC_CREDENTIAL_LOAD_COMPLETE_HANDLER; typedef struct QUIC_CERTIFICATE_HASH { uint8_t ShaHash[20]; } QUIC_CERTIFICATE_HASH; typedef struct QUIC_CERTIFICATE_HASH_STORE { QUIC_CERTIFICATE_HASH_STORE_FLAGS Flags; uint8_t ShaHash[20]; char StoreName[128]; } QUIC_CERTIFICATE_HASH_STORE; typedef struct QUIC_CERTIFICATE_FILE { const char *PrivateKeyFile; const char *CertificateFile; } QUIC_CERTIFICATE_FILE; typedef struct QUIC_CERTIFICATE_FILE_PROTECTED { const char *PrivateKeyFile; const char *CertificateFile; const char *PrivateKeyPassword; } QUIC_CERTIFICATE_FILE_PROTECTED; typedef void QUIC_CERTIFICATE; // Platform specific certificate context object See Also ConfigurationLoadCredential"
  },
  "docs/api/QUIC_LISTENER_CALLBACK.html": {
    "href": "docs/api/QUIC_LISTENER_CALLBACK.html",
    "title": "QUIC_LISTENER_CALLBACK function pointer",
    "keywords": "QUIC_LISTENER_CALLBACK function pointer Handles listener events. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) _Function_class_(QUIC_LISTENER_CALLBACK) QUIC_STATUS (QUIC_API QUIC_LISTENER_CALLBACK)( _In_ HQUIC Listener, _In_opt_ void* Context, _Inout_ QUIC_LISTENER_EVENT* Event ); Parameters Listener The valid handle to the listener object this event is for. Context The application callback context (optionally) supplied in ListenerOpen. Event A pointer to the QUIC_LISTENER_EVENT payload. Remarks This function pointer handles callbacks from MsQuic for listener events. Apps are expected to keep any execution time in the callback to a minimum. See Also ListenerOpen QUIC_LISTENER_EVENT SetCallbackHandler SetContext"
  },
  "docs/api/QUIC_LISTENER_EVENT.html": {
    "href": "docs/api/QUIC_LISTENER_EVENT.html",
    "title": "QUIC_LISTENER_EVENT structure",
    "keywords": "QUIC_LISTENER_EVENT structure The payload for QUIC listener events. Syntax typedef struct QUIC_LISTENER_EVENT { QUIC_LISTENER_EVENT_TYPE Type; union { struct { const QUIC_NEW_CONNECTION_INFO* Info; HQUIC Connection; const uint8_t* NewNegotiatedAlpn; } NEW_CONNECTION; struct { BOOLEAN AppCloseInProgress : 1; BOOLEAN RESERVED : 7; } STOP_COMPLETE; }; } QUIC_LISTENER_EVENT; Parameters Type The QUIC_LISTENER_EVENT_TYPE that indicates which type of event this is, and which payload to reference (if any) for additional information. Remarks QUIC_LISTENER_EVENT_NEW_CONNECTION This event is delivered when a new connection is received by the listener. Info This field indicates the QUIC_NEW_CONNECTION_INFO structure for the new connection. Connection This field indicates the valid handle to the new incoming connection. QUIC_LISTENER_EVENT_STOP_COMPLETE This event is delivered when server app wants to stop receiving new incoming connections. AppCloseInProgress This flag indicates the server has called ListenerClose. RESERVED This field reserved for future use. Do not use. See Also ListenerOpen ListenerStop QUIC_LISTENER_CALLBACK QUIC_NEW_CONNECTION_INFO SetCallbackHandler SetContext"
  },
  "docs/api/QUIC_NEW_CONNECTION_INFO.html": {
    "href": "docs/api/QUIC_NEW_CONNECTION_INFO.html",
    "title": "QUIC_NEW_CONNECTION_INFO structure",
    "keywords": "QUIC_NEW_CONNECTION_INFO structure All available information for new incoming QUIC connection. // // All the available information describing a new incoming connection. // typedef struct QUIC_NEW_CONNECTION_INFO { uint32_t QuicVersion; const QUIC_ADDR* LocalAddress; const QUIC_ADDR* RemoteAddress; uint32_t CryptoBufferLength; uint16_t ClientAlpnListLength; uint16_t ServerNameLength; uint8_t NegotiatedAlpnLength; _Field_size_bytes_(CryptoBufferLength) const uint8_t* CryptoBuffer; _Field_size_bytes_(ClientAlpnListLength) const uint8_t* ClientAlpnList; _Field_size_bytes_(NegotiatedAlpnLength) const uint8_t* NegotiatedAlpn; _Field_size_bytes_opt_(ServerNameLength) const char* ServerName; } QUIC_NEW_CONNECTION_INFO; Parameters QuicVersion The QUIC version negotiated for the new incoming connection. LocalAddress This field indicates the local address of the new incoming connection. RemoteAddress This field indicates the remote address of the new incoming connection. CryptoBufferLength This field indicates the length of the crypto buffer. ClientAlpnListLength This field indicates the total bytes of the client ALPN list. ServerNameLength This field indicates the length of the server name (SNI). NegotiatedAlpnLength This field indicates the length of the negotiated ALPN. CryptoBuffer This pointer indicates the crypto buffer for the new incoming connection. ClientAlpnList This pointer indicates the sent ALPN list from the client via the new incoming connection. NegotiatedAlpn This pointer indicates the negotiated ALPN between server and client. ServerName This pointer indicates the server name (SNI) of the new incoming connection. See Also QUIC_LISTENER_CALLBACK QUIC_LISTENER_EVENT"
  },
  "docs/api/QUIC_REGISTRATION_CONFIG.html": {
    "href": "docs/api/QUIC_REGISTRATION_CONFIG.html",
    "title": "QUIC_REGISTRATION_CONFIG structure",
    "keywords": "QUIC_REGISTRATION_CONFIG structure The structure used to configure the execution context of a application registration. Syntax typedef struct QUIC_REGISTRATION_CONFIG { const char* AppName; QUIC_EXECUTION_PROFILE ExecutionProfile; } QUIC_REGISTRATION_CONFIG; Members AppName An optional (may be NULL), null-terminated string describing the application that created the registration. This field is primarily used for debugging purposes. ExecutionProfile Provides a hint to MsQuic on how to optimize its thread scheduling operations. Value Meaning QUIC_EXECUTION_PROFILE_LOW_LATENCY 0 Indicates that scheduling should be generally optimized for reducing response latency. The default execution profile. QUIC_EXECUTION_PROFILE_TYPE_MAX_THROUGHPUT 1 Indicates that scheduling should be optimized for maximum single connection throughput. QUIC_EXECUTION_PROFILE_TYPE_SCAVENGER 2 Indicates that minimal responsiveness is required by the scheduling logic. For instance, a background transfer or process. QUIC_EXECUTION_PROFILE_TYPE_REAL_TIME 3 Indicates responsiveness is of paramount importance to the scheduler. See Also RegistrationOpen"
  },
  "docs/api/QUIC_SETTINGS.html": {
    "href": "docs/api/QUIC_SETTINGS.html",
    "title": "QUIC_SETTINGS structure",
    "keywords": "QUIC_SETTINGS structure The set of all customizable parameters for the library. Syntax typedef struct QUIC_SETTINGS { union { uint64_t IsSetFlags; struct { uint64_t MaxBytesPerKey : 1; uint64_t HandshakeIdleTimeoutMs : 1; uint64_t IdleTimeoutMs : 1; uint64_t MtuDiscoverySearchCompleteTimeoutUs : 1; uint64_t TlsClientMaxSendBuffer : 1; uint64_t TlsServerMaxSendBuffer : 1; uint64_t StreamRecvWindowDefault : 1; uint64_t StreamRecvBufferDefault : 1; uint64_t ConnFlowControlWindow : 1; uint64_t MaxWorkerQueueDelayUs : 1; uint64_t MaxStatelessOperations : 1; uint64_t InitialWindowPackets : 1; uint64_t SendIdleTimeoutMs : 1; uint64_t InitialRttMs : 1; uint64_t MaxAckDelayMs : 1; uint64_t DisconnectTimeoutMs : 1; uint64_t KeepAliveIntervalMs : 1; uint64_t CongestionControlAlgorithm : 1; uint64_t PeerBidiStreamCount : 1; uint64_t PeerUnidiStreamCount : 1; uint64_t MaxBindingStatelessOperations : 1; uint64_t StatelessOperationExpirationMs : 1; uint64_t MinimumMtu : 1; uint64_t MaximumMtu : 1; uint64_t SendBufferingEnabled : 1; uint64_t PacingEnabled : 1; uint64_t MigrationEnabled : 1; uint64_t DatagramReceiveEnabled : 1; uint64_t ServerResumptionLevel : 1; uint64_t MaxOperationsPerDrain : 1; uint64_t MtuDiscoveryMissingProbeCount : 1; uint64_t DestCidUpdateIdleTimeoutMs : 1; uint64_t GreaseQuicBitEnabled : 1; uint64_t EcnEnabled : 1; uint64_t RESERVED : 30; } IsSet; }; uint64_t MaxBytesPerKey; uint64_t HandshakeIdleTimeoutMs; uint64_t IdleTimeoutMs; uint64_t MtuDiscoverySearchCompleteTimeoutUs; uint32_t TlsClientMaxSendBuffer; uint32_t TlsServerMaxSendBuffer; uint32_t StreamRecvWindowDefault; uint32_t StreamRecvBufferDefault; uint32_t ConnFlowControlWindow; uint32_t MaxWorkerQueueDelayUs; uint32_t MaxStatelessOperations; uint32_t InitialWindowPackets; uint32_t SendIdleTimeoutMs; uint32_t InitialRttMs; uint32_t MaxAckDelayMs; uint32_t DisconnectTimeoutMs; uint32_t KeepAliveIntervalMs; uint16_t CongestionControlAlgorithm; // QUIC_CONGESTION_CONTROL_ALGORITHM uint16_t PeerBidiStreamCount; uint16_t PeerUnidiStreamCount; uint16_t MaxBindingStatelessOperations; uint16_t StatelessOperationExpirationMs; uint16_t MinimumMtu; uint16_t MaximumMtu; uint8_t SendBufferingEnabled : 1; uint8_t PacingEnabled : 1; uint8_t MigrationEnabled : 1; uint8_t DatagramReceiveEnabled : 1; uint8_t ServerResumptionLevel : 2; // QUIC_SERVER_RESUMPTION_LEVEL uint8_t GreaseQuicBitEnabled : 1; uint8_t EcnEnabled : 1; uint8_t MaxOperationsPerDrain; uint8_t MtuDiscoveryMissingProbeCount; uint32_t DestCidUpdateIdleTimeoutMs; } QUIC_SETTINGS; Members IsSetFlags The set of flags that indicate which other struct members are valid. MaxBytesPerKey Maximum number of bytes to encrypt with a single 1-RTT encryption key before initiating key update. Default value: 274,877,906,944 HandshakeIdleTimeoutMs How long a handshake can idle before it is discarded. Default value: 10,000 IdleTimeoutMs How long a connection can go idle before it is gracefully shut down. 0 to disable timeout. Default value: 30,000 TlsClientMaxSendBuffer How much client TLS data to buffer. If the application expects large client certificates, or long client certificate chains, this value should be increased. Default value: 4,096 TlsServerMaxSendBuffer How much server TLS data to buffer. If the application expects very large server certificates, or long server certificate chains, this value should be increased. Default value: 8,192 StreamRecvWindowDefault Initial stream receive window size. Default value: 32,768 StreamRecvBufferDefault Stream initial buffer size. Default value: 4,096 ConnFlowControlWindow Connection-wide flow control window. Default value: 16,777,216 MaxWorkerQueueDelayUs The maximum queue delay (in microseconds) allowed for a worker thread. This affects loss detection and probe timeouts. Default value: 250,000 MaxStatelessOperations The maximum number of stateless operations that may be queued on a worker at any one time. Default value: 16 InitialWindowPackets The size (in packets) of the initial congestion window for a connection. Default value: 10 SendIdleTimeoutMs Reset congestion control after being idle SendIdleTimeoutMs milliseconds. Default value: 1,000 InitialRttMs Initial RTT estimate. Default value: 333 MaxAckDelayMs How long to wait after receiving data before sending an ACK. This controls batch sending ACKs, to get higher throughput with less overhead. Too long causes retransmits from the peer, too short wastefully sends ACKs. Default value: 25 DisconnectTimeoutMs How long to wait for an ACK before declaring a path dead and disconnecting. Default value: 16,000 KeepAliveIntervalMs How often to send PING frames to keep a connection alive. This also helps keep NAT table entries from expiring. Default value: 0 (disabled) PeerBidiStreamCount Number of bidirectional streams to allow the peer to open. Must be non-zero to allow the peer to open any streams at all. Default value: 0 PeerUnidiStreamCount Number of unidirectional streams to allow the peer to open. Must be non-zero to allow the peer to open any streams at all. Default value: 0 RetryMemoryLimit The percentage of available memory usable for handshake connections before stateless retry is used. Calculated as N/65535. Global setting, not per-connection/configuration. Default value: 65 (~0.1%) LoadBalancingMode Global setting, not per-connection/configuration. Default value: 0 (disabled) MaxOperationsPerDrain The maximum number of operations to drain per connection quantum. Default value: 16 SendBufferingEnabled Buffer send data within MsQuic instead of holding application buffers until sent data is acknowledged. Default value: 1 (TRUE) PacingEnabled Pace sending to avoid overfilling buffers on the path. Default value: 1 (TRUE) MigrationEnabled Enable clients to migrate IP addresses and tuples. Requires the server to be behind a cooperative load-balancer, or behind no load-balancer. Default value: 1 (TRUE) DatagramReceiveEnabled Advertise support for QUIC datagram extension. Both sides of a connection need to set this to TRUE for DatagramSend to be functional and supported. Default value: 0 (FALSE) ServerResumptionLevel Server only. Controls resumption tickets and/or 0-RTT server support. QUIC_SERVER_RESUME_ONLY enables sending and receiving TLS resumption tickets. The server app must call ConnectionSendResumptionTicket to send a resumption ticket to the client. QUIC_SERVER_RESUME_AND_ZERORTT enables sending and receiving TLS resumption tickets and generating 0-RTT keys and receiving 0-RTT payloads. The server app may decide accept/reject each 0-RTT payload individually. Default value: QUIC_SERVER_NO_RESUME (disabled) MinimumMtu The minimum MTU supported by a connection. This will be used as the starting MTU. Default value: 1248 MaximumMtu The maximum MTU supported by a connection. This will be the maximum probed value. Default value: 1500 MtuDiscoverySearchCompleteTimeoutUs The time in microseconds to wait before reattempting MTU probing if max was not reached. Default value: 600000000 MtuDiscoveryMissingProbeCount The number of MTU probes to retry before exiting MTU probing. Default value: 3 MaxBindingStatelessOperations The maximum number of stateless operations that may be queued on a binding at any one time. Default value: 100 StatelessOperationExpirationMs The time limit between operations for the same endpoint, in milliseconds. Default value: 100 DestCidUpdateIdleTimeoutMs Idle timeout period after which the destination CID is updated before sending again. Default value: 20,000 GreaseQuicBitEnabled Advertise support for QUIC Grease Bit Extension. Both sides of a connection need to set this to TRUE for receiving and sending necessary transport parameter. Default value: 0 (FALSE) EcnEnabled Enable sender-side ECN support. The connection will validate and react to ECN feedback from peer. Default value: 0 (FALSE) Remarks When setting new values for the settings, the app must set the corresponding .IsSet.* parameter for each actual parameter that is being set or updated. For example: QUIC_SETTINGS Settings {0}; // // Configures the server's idle timeout. // Settings.IdleTimeoutMs = 60000; // 60 seconds Settings.IsSet.IdleTimeoutMs = TRUE; // // Configures the server's resumption level to allow for resumption and 0-RTT. // Settings.ServerResumptionLevel = QUIC_SERVER_RESUME_AND_ZERORTT; Settings.IsSet.ServerResumptionLevel = TRUE; See Also ConfigurationOpen GetParam SetParam"
  },
  "docs/api/QUIC_STATUS.html": {
    "href": "docs/api/QUIC_STATUS.html",
    "title": "QUIC_STATUS type",
    "keywords": "QUIC_STATUS type The status type MsQuic uses for all API return codes. Syntax Windows (User Mode) #define QUIC_STATUS HRESULT #define QUIC_FAILED(X) FAILED(X) #define QUIC_SUCCEEDED(X) SUCCEEDED(X) Linux #define QUIC_STATUS unsigned long #define QUIC_FAILED(X) ((int)(X) > 0) #define QUIC_SUCCEEDED(X) ((int)(X) <= 0) Remarks The QUIC_STATUS type is a cross platform abstraction of the current platform's error code space. It allows for both success and failure values, which can be easily determined by the QUIC_SUCCEEDED and QUIC_FAILED macros. The MsQuic headers define a number of different possible values for this (see below) but this list is not exhaustive. The platform specific functionality (for example UDP sockets) may also return platform specific error codes up to the app. Well-Known Status Codes Value Meaning QUIC_STATUS_SUCCESS The operation completed successfully. QUIC_STATUS_PENDING The operation is pending. QUIC_STATUS_CONTINUE The operation will continue. QUIC_STATUS_OUT_OF_MEMORY Allocation of memory failed. QUIC_STATUS_INVALID_PARAMETER An invalid parameter was encountered. QUIC_STATUS_INVALID_STATE The current state was not valid for this operation. QUIC_STATUS_NOT_SUPPORTED The operation was not supported. QUIC_STATUS_NOT_FOUND The object was not found. QUIC_STATUS_BUFFER_TOO_SMALL The buffer was too small for the operation. QUIC_STATUS_HANDSHAKE_FAILURE The connection handshake failed. QUIC_STATUS_ABORTED The connection or stream was aborted. QUIC_STATUS_ADDRESS_IN_USE The local address is already in use. QUIC_STATUS_INVALID_ADDRESS Binding to socket failed, likely caused by a family mismatch between local and remote address. QUIC_STATUS_CONNECTION_TIMEOUT The connection timed out waiting for a response from the peer. QUIC_STATUS_CONNECTION_IDLE The connection timed out from inactivity. QUIC_STATUS_INTERNAL_ERROR An internal error was encountered. QUIC_STATUS_UNREACHABLE The server is currently unreachable. QUIC_STATUS_CONNECTION_REFUSED The server refused the connection. QUIC_STATUS_PROTOCOL_ERROR A protocol error was encountered. QUIC_STATUS_VER_NEG_ERROR A version negotiation error was encountered. QUIC_STATUS_USER_CANCELED The peer app/user canceled the connection during the handshake. QUIC_STATUS_ALPN_NEG_FAILURE The connection handshake failed to negotiate a common ALPN. QUIC_STATUS_STREAM_LIMIT_REACHED A stream failed to start because the peer doesn't allow any more to be open at this time."
  },
  "docs/api/RegistrationClose.html": {
    "href": "docs/api/RegistrationClose.html",
    "title": "RegistrationClose function",
    "keywords": "RegistrationClose function Closes an existing registration. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_REGISTRATION_CLOSE_FN)( _In_ _Pre_defensive_ __drv_freesMem(Mem) HQUIC Registration ); Parameters Registration A registration handle from a previous call to RegistrationOpen. Remarks The application must close/delete all child configurations and connection objects before closing the registration. This call will block on those outstanding objects being cleaned up. Do no call it on any MsQuic event callback, or it will deadlock. See Also RegistrationOpen"
  },
  "docs/api/RegistrationOpen.html": {
    "href": "docs/api/RegistrationOpen.html",
    "title": "RegistrationOpen function",
    "keywords": "RegistrationOpen function Creates a new registration. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_REGISTRATION_OPEN_FN)( _In_opt_ const QUIC_REGISTRATION_CONFIG* Config, _Outptr_ _At_(*Registration, __drv_allocatesMem(Mem)) _Pre_defensive_ HQUIC* Registration ); Parameters Config An optional QUIC_REGISTRATION_CONFIG to specify how to configure the execution context of the registration. Registration On success, returns a handle to the newly created registration. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks A registration represents an execution context for the application. This consists of one or more system threads that are used to process the protocol logic for the application's connections. Each execution context is completely independent from another. This allows for different applications in the same process (or kernel space) to execute generally independent. A caveat to this independence is that until a packet or connection can be determined to belong to a particular registration there is shared processing. See Also RegistrationClose"
  },
  "docs/api/RegistrationShutdown.html": {
    "href": "docs/api/RegistrationShutdown.html",
    "title": "RegistrationShutdown function",
    "keywords": "RegistrationShutdown function Starts the shutdown process for all connections in the registration. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) void (QUIC_API * QUIC_REGISTRATION_SHUTDOWN_FN)( _In_ _Pre_defensive_ HQUIC Registration, _In_ QUIC_CONNECTION_SHUTDOWN_FLAGS Flags, _In_ _Pre_defensive_ QUIC_UINT62 ErrorCode // Application defined error code ); Parameters Registration The valid handle to an open registration object. Flags The flags that control the behavior of the shutdown. Value Meaning QUIC_CONNECTION_SHUTDOWN_FLAG_NONE 0 The connection is shutdown gracefully and informs the peer. QUIC_CONNECTION_SHUTDOWN_FLAG_SILENT 1 The connection is immediately shutdown without informing the peer. ErrorCode The 62-bit error code to indicate to the peer as the reason for the shutdown. Remarks TODO See Also RegistrationOpen RegistrationClose ConnectionShutdown"
  },
  "docs/api/SetCallbackHandler.html": {
    "href": "docs/api/SetCallbackHandler.html",
    "title": "SetCallbackHandler function",
    "keywords": "SetCallbackHandler function Sets the application context and callback function pointer for the API object. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) void (QUIC_API * QUIC_SET_CALLBACK_HANDLER_FN)( _In_ _Pre_defensive_ HQUIC Handle, _In_ void* Handler, _In_opt_ void* Context ); Parameters Handle The valid handle to any API object that uses callback handlers. This includes handles to listener, connection and stream objects. Handler A new application callback handler to register with the API object. Context A new application context to register with the API object. Remarks This function allows the app to set the application callback handler and context for the API object. The context can be later retrieved by a call to GetContext. It is also passed into all callback handler events for the object. Important There is no internal synchronization for this callback handler or context. If the app calls GetContext, SetContext and/or SetCallbackHandler on different threads, it must provide for the necessary synchronization mechanisms. See Also GetContext SetContext"
  },
  "docs/api/SetContext.html": {
    "href": "docs/api/SetContext.html",
    "title": "SetContext function",
    "keywords": "SetContext function Sets the application context for the API object. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) void (QUIC_API * QUIC_SET_CONTEXT_FN)( _In_ _Pre_defensive_ HQUIC Handle, _In_opt_ void* Context ); Parameters Handle The valid handle to any API object. This includes handles to registration, configuration, listener, connection and stream objects. Context A new application context to register with the API object. Remarks This function allows the app to set the application context for the API object. This context can be later retrieved by a call to GetContext. It is also passed into all callback handler events for the object. Important There is no internal synchronization for this context. If the app calls GetContext, SetContext and/or SetCallbackHandler on different threads, it must provide for the necessary synchronization mechanisms. See Also GetContext SetCallbackHandler"
  },
  "docs/api/SetParam.html": {
    "href": "docs/api/SetParam.html",
    "title": "SetParam function",
    "keywords": "SetParam function Sets a parameter on an API object. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_SET_PARAM_FN)( _When_(QUIC_PARAM_IS_GLOBAL(Param), _Reserved_) _When_(!QUIC_PARAM_IS_GLOBAL(Param), _In_ _Pre_defensive_) HQUIC Handle, _In_ uint32_t Param, _In_ uint32_t BufferLength, _In_reads_bytes_(BufferLength) const void* Buffer ); Parameters Handle The valid handle to any API object. This includes handles to registration, configuration, listener, connection and stream objects. For global parameters, this parameter must be NULL. Param The parameter for which the value is to be set (for example, QUIC_PARAM_CONN_IDLE_TIMEOUT). BufferLength A pointer to the size, in bytes, of the Buffer buffer. Buffer A pointer to the buffer in which the value for the requested option is to be returned. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks TODO See Also Settings GetParam"
  },
  "docs/api/StreamClose.html": {
    "href": "docs/api/StreamClose.html",
    "title": "StreamClose function",
    "keywords": "StreamClose function Closes an existing stream. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) void (QUIC_API * QUIC_STREAM_CLOSE_FN)( _In_ _Pre_defensive_ __drv_freesMem(Mem) HQUIC Stream ); Parameters Stream A Stream handle from a previous call to StreamOpen. Remarks The application should only close a stream after it has been completely shut down or it was never successfully started. Closing a stream before it has been completely shut down produces undefined behavior because clean up of the stream must be reflected on the wire with an application specific error code. When the app closes a stream without first shutting down, MsQuic has to guess which error code to use (currently uses 0) when sending the state change to the peer. If the application needs to quickly discard all stream state and doesn't care about the result, it should first call StreamShutdown with the QUIC_STREAM_SHUTDOWN_FLAG_ABORT and QUIC_STREAM_SHUTDOWN_FLAG_IMMEDIATE flags, specifying an appropriate error code. Then, only after the QUIC_STREAM_EVENT_SHUTDOWN_COMPLETE should the app call close. This event will happen immediately. StreamClose may be called on any callback, including one for the stream being closed. See Also StreamOpen StreamStart StreamShutdown StreamSend StreamReceiveComplete StreamReceiveSetEnabled"
  },
  "docs/api/StreamOpen.html": {
    "href": "docs/api/StreamOpen.html",
    "title": "StreamOpen function",
    "keywords": "StreamOpen function Creates a new stream. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_STREAM_OPEN_FN)( _In_ _Pre_defensive_ HQUIC Connection, _In_ QUIC_STREAM_OPEN_FLAGS Flags, _In_ _Pre_defensive_ QUIC_STREAM_CALLBACK_HANDLER Handler, _In_opt_ void* Context, _Outptr_ _At_(*Stream, __drv_allocatesMem(Mem)) _Pre_defensive_ HQUIC* Stream ); Parameters Connection The valid handle to an open connection object. The connection does not need to be started via ConnectionStart. Flags A set of flags that control the behavior of StreamOpen: Value Meaning QUIC_STREAM_OPEN_FLAG_NONE 0 No special behavior. Defaults to bidirectional stream. QUIC_STREAM_OPEN_FLAG_UNIDIRECTIONAL 1 Opens a unidirectional stream. QUIC_STREAM_OPEN_FLAG_0_RTT 2 Indicates that the stream may be sent in 0-RTT. QUIC_STREAM_OPEN_FLAG_DELAY_ID_FC_UPDATES 4 Indicates stream ID flow control limit updates for the connection should be delayed to StreamClose. Handler A pointer to the app's callback handler to be invoked for all stream events. Context The app context pointer (possibly null) to be associated with the stream object and passed back to the app's handler when invoked. Stream On success, returns a handle to the newly created stream. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks This function is used to allocate a new stream object of the desired directionality; either bidirectional (both sides send and receive) or unidirectional (opener sends and peer receives). This function simply allocates the object and does not assign a stream ID or inform the peer that the stream was created. As indicated above, the parent connection object does not need to be started before the stream can be created. In fact, the MsQuic API is expressly designed to allow for the app to open streams, start them and queue data to be sent before starting the stream. In the 0-RTT scenario, this is practically required to ensure all the data is packed into the same UDP datagram(s). Important - No events are delivered on the stream until the app calls StreamStart (because of the race conditions that could occur) and it succeeds. This means that if the parent connection is shutdown (e.g. idle timeout or peer initiated) before calling StreamStart then the QUIC_STREAM_EVENT_SHUTDOWN_COMPLETE will not be delivered. So, apps that rely on that event to trigger clean up of the stream must handle the case where StreamStart is either not ever called or fails and clean up directly. See Also StreamClose StreamStart StreamShutdown StreamSend StreamReceiveComplete StreamReceiveSetEnabled"
  },
  "docs/api/StreamReceiveComplete.html": {
    "href": "docs/api/StreamReceiveComplete.html",
    "title": "StreamReceiveComplete function",
    "keywords": "StreamReceiveComplete function Completes a receive that was previously pended. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) void (QUIC_API * QUIC_STREAM_RECEIVE_COMPLETE_FN)( _In_ _Pre_defensive_ HQUIC Stream, _In_ uint64_t BufferLength ); Parameters TODO Remarks This is an asynchronous API but can run inline if called in a callback. The application must ensure that one StreamReceiveComplete call corresponds to one QUIC_STREAM_EVENT_RECEIVE event. Duplicate StreamReceiveComplete calls after one QUIC_STREAM_EVENT_RECEIVE event are ignored silently even with different BufferLength. See Also StreamOpen StreamClose StreamStart StreamShutdown StreamSend StreamReceiveSetEnabled"
  },
  "docs/api/StreamReceiveSetEnabled.html": {
    "href": "docs/api/StreamReceiveSetEnabled.html",
    "title": "StreamReceiveSetEnabled function",
    "keywords": "StreamReceiveSetEnabled function Enables or disables receive callbacks on a stream. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_STREAM_RECEIVE_SET_ENABLED_FN)( _In_ _Pre_defensive_ HQUIC Stream, _In_ BOOLEAN IsEnabled ); Parameters TODO Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks This function always delegates to the worker queue, even if called from a quic worker thread. This matters if disabling receives, as there could be a receive in the queue before this call is processed, and that receive would still indicated to the app. To disable receives reliably, reject a receive by draining 0 bytes in the QUIC_STREAM_EVENT_RECEIVE callback. See Also StreamOpen StreamClose StreamStart StreamShutdown StreamSend StreamReceiveComplete"
  },
  "docs/api/StreamSend.html": {
    "href": "docs/api/StreamSend.html",
    "title": "StreamSend function",
    "keywords": "StreamSend function Queues app data to be sent on a stream. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_STREAM_SEND_FN)( _In_ _Pre_defensive_ HQUIC Stream, _In_reads_(BufferCount) _Pre_defensive_ const QUIC_BUFFER* const Buffers, _In_ uint32_t BufferCount, _In_ QUIC_SEND_FLAGS Flags, _In_opt_ void* ClientSendContext ); Parameters Stream The valid handle to an open stream object. Buffers An array of QUIC_BUFFER structs that each contain a pointer and length to app data to send on the stream. This may be NULL only if BufferCount is zero. BufferCount The number of QUIC_BUFFER structs in the Buffers array. This may be zero. Flags The set of flags the controls the behavior of StreamSend: Value Meaning QUIC_SEND_FLAG_NONE 0 No special behavior. Data is not allowed in 0-RTT by default. QUIC_SEND_FLAG_ALLOW_0_RTT 1 Indicates that the data is allowed to be sent in 0-RTT (if available). Makes no guarantee the data will be sent in 0-RTT. Additionally, even if 0-RTT keys are available the data may end up being sent in 1-RTT for multiple reasons. QUIC_SEND_FLAG_START 2 Indicates that the stream should asynchronously start (equivalent to calling StreamStart). QUIC_SEND_FLAG_FIN 4 Indicates the the stream send is the last or final data to be sent on the stream and should be gracefully shutdown (equivalent to calling StreamShutdown with the QUIC_STREAM_SHUTDOWN_FLAG_GRACEFUL flag). QUIC_SEND_FLAG_DGRAM_PRIORITY 8 Unused and ignored for StreamSend QUIC_SEND_FLAG_DELAY_SEND 16 Provides a hint to MsQuic to indicate the data does not need to be sent immediately, likely because more is soon to follow. ClientSendContext The app context pointer (possibly null) to be associated with the send. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks This function is used to queue data on a stream to be sent. The function itself is non-blocking and simply queues the data and returns. The app may pass zero or more buffers of data that will be sent on the stream in the order they are passed. The buffers (both the QUIC_BUFFERs and the memory they reference) are \"owned\" by MsQuic (and must not be modified by the app) until MsQuic indicates the QUIC_STREAM_EVENT_SEND_COMPLETE event for the send. By default, data queued via StreamSend is not allowed to be sent in 0-RTT packets, but the app may override this by passing the QUIC_SEND_FLAG_ALLOW_0_RTT flag. This flag indicates that the data is acceptable to be sent in a 0-RTT packet, but does not guarantee that data will be sent in 0-RTT. There are several reasons it may not be sent in 0-RTT: The 0-RTT keys were not available. The server rejected 0-RTT data for some reason. Too much data was queued and it couldn't all fit. The data was sent, but eventually found to have been lost and retransmitted in a 1-RTT packet. Some apps may open and send on many different streams at a very high rate. In these scenarios, having to call StreamStart and StreamShutdown for every stream adds unwanted performance overhead. In order to optimize these scenarios, StreamStart supports the QUIC_SEND_FLAG_START and QUIC_SEND_FLAG_FIN flags, which allows the app to do something like this: HQUIC Stream; MsQuic->StreamOpen( Connection, QUIC_STREAM_OPEN_FLAG_UNIDIRECTIONAL, AppHandler, AppContext, &Stream); MsQuic->StreamSend( Stream, &AppData, 1, QUIC_SEND_FLAG_START | QUIC_SEND_FLAG_FIN, AppSendContext); Note For the sake of brevity, error handling and clean up has been omitted. This example opens a new unidirectional stream, and queues a send that starts the stream, sends some app data and gracefully closes the stream. In some scenarios, the app may know that additional data (possibly on a different stream) will soon be queued after the current call to StreamSend. In these cases it may be helpful for the app to pass the QUIC_SEND_FLAG_DELAY_SEND flag to hint that MsQuic should wait for more data before flushing the connection-wide send queue. Note that anything else on the connection might still end up triggering the send to flush. The app may call StreamSend (on any stream) with a null/empty buffer with QUIC_SEND_FLAG_DELAY_SEND unset to force a flush. Important: Data queued via StreamSend with the QUIC_SEND_FLAG_DELAY_SEND flag is not guaranteed to be sent until a subsequent StreamSend call on any stream is performed without the QUIC_SEND_FLAG_DELAY_SEND flag. For additional information on sending on streams see here. See Also StreamOpen StreamClose StreamStart StreamShutdown StreamReceiveComplete StreamReceiveSetEnabled"
  },
  "docs/api/StreamShutdown.html": {
    "href": "docs/api/StreamShutdown.html",
    "title": "StreamShutdown function",
    "keywords": "StreamShutdown function Starts the shutdown process on a stream. Syntax typedef _IRQL_requires_max_(DISPATCH_LEVEL) QUIC_STATUS (QUIC_API * QUIC_STREAM_SHUTDOWN_FN)( _In_ _Pre_defensive_ HQUIC Stream, _In_ QUIC_STREAM_SHUTDOWN_FLAGS Flags, _In_ _Pre_defensive_ QUIC_UINT62 ErrorCode // Application defined error code ); Parameters Stream The valid handle to an open and started stream object. Flags The set of flags that controls the type and behavior of shutdown: Value Meaning QUIC_STREAM_SHUTDOWN_FLAG_NONE 0 Invalid option for StreamShutdown. QUIC_STREAM_SHUTDOWN_FLAG_GRACEFUL 1 Indicates the app is gracefully shutting down the stream in the send direction. QUIC_STREAM_SHUTDOWN_FLAG_ABORT_SEND 2 Indicates the app is abortively shutting down the stream in the send direction. QUIC_STREAM_SHUTDOWN_FLAG_ABORT_RECEIVE 4 Indicates the app is abortively shutting down the stream in the receive direction. QUIC_STREAM_SHUTDOWN_FLAG_IMMEDIATE 8 Indicates the app does not want to wait for the acknowledgement of the shutdown before getting the QUIC_STREAM_EVENT_SHUTDOWN_COMPLETE event. Only allowed for abortive shutdowns. QUIC_STREAM_SHUTDOWN_FLAG_ABORT is provided as a helper and is simply a logic OR of QUIC_STREAM_SHUTDOWN_FLAG_ABORT_SEND and QUIC_STREAM_SHUTDOWN_FLAG_ABORT_RECEIVE. ErrorCode Used for the abortive shutdown cases (QUIC_STREAM_SHUTDOWN_FLAG_ABORT_SEND and QUIC_STREAM_SHUTDOWN_FLAG_ABORT_RECEIVE) to indicate the reason why the abort happened to the peer. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks This function allows an app to (either gracefully or abortively) shut down one or both directions of a stream. For abortive shutdowns, the app specifies an ErrorCode that is transmitted to the peer to indicate why the shutdown happened. Graceful shutdowns have no error code as they are implied to be the normal operation of a stream. If the app doesn't care to wait for the acknowledgement of an abortive shutdown, it can use the QUIC_STREAM_SHUTDOWN_FLAG_IMMEDIATE flag, which will result in MsQuic immediately (not necessarily inline to the call though) indicating the QUIC_STREAM_EVENT_SHUTDOWN_COMPLETE event to the app, after which, the app may safely StreamClose the stream. MsQuic will internally maintain the stream for as long as necessary and then clean it up. The stream can also be gracefully shutdown via the QUIC_SEND_FLAG_FIN flag. See StreamSend for more details. Any stream (even one that hasn't been started) may be called to shutdown. If the stream has not been started yet, then the shutdown is effectively queued. If the app never calls StreamStart then the shutdown will never been sent out on the wire. See Also StreamOpen StreamClose StreamStart StreamSend StreamReceiveComplete StreamReceiveSetEnabled"
  },
  "docs/api/StreamStart.html": {
    "href": "docs/api/StreamStart.html",
    "title": "StreamStart function",
    "keywords": "StreamStart function Assigns an ID and starts processing the stream. Syntax typedef _IRQL_requires_max_(PASSIVE_LEVEL) QUIC_STATUS (QUIC_API * QUIC_STREAM_START_FN)( _In_ _Pre_defensive_ HQUIC Stream, _In_ QUIC_STREAM_START_FLAGS Flags ); Parameters Stream The valid handle to an open stream object. Flags The set of flags the controls the behavior of StreamStart: Value Meaning QUIC_STREAM_START_FLAG_NONE 0 No special behavior. Executes as a blocking call, returning only after the operation has completed. The peer is not informed of the stream starting until the app sends data. QUIC_STREAM_START_FLAG_IMMEDIATE 1 Indicates that the peer should be immediately informed of the stream opening (or at least as soon as flow control allows) and not wait for any data to be sent first. QUIC_STREAM_START_FLAG_FAIL_BLOCKED 2 Only opens the stream if flow control (from the peer) allows. If the stream count limit has currently been reached the start will fail with QUIC_STATUS_STREAM_LIMIT_REACHED. QUIC_STREAM_START_FLAG_SHUTDOWN_ON_FAIL 4 Causes the stream to immediate shutdown (abortive) if the start operation fails. QUIC_STREAM_START_FLAG_INDICATE_PEER_ACCEPT 8 Indicates the app wants the QUIC_STREAM_EVENT_PEER_ACCEPTED event to be delivered if the stream isn't initially accepted (allowed by flow control) at start completion. Return Value The function returns a QUIC_STATUS. The app may use QUIC_FAILED or QUIC_SUCCEEDED to determine if the function failed or succeeded. Remarks This function starts the processing of the stream by the connection. Once called, the stream can start receiving events to the handler passed into StreamOpen. If the start operation fails, the only event that will be delivered is QUIC_STREAM_EVENT_START_COMPLETE with the failure status code. The first step of the start process is assigning the stream an identifier (stream ID). The stream ID space is flow controlled, meaning the peer is able to control how many streams the app can open (on-wire). Though, even if the peer won't accept any more streams currently, this API (by default) allows the app to still start the stream and assigns a local stream ID. But in this case, the stream is just queued locally until the peer will accept it. If the app does not want the queuing behavior, and wishes to fail instead, it can use the QUIC_STREAM_START_FLAG_FAIL_BLOCKED flag. If there is not enough flow control to allow the stream to be sent on the wire, then the start will fail (via a QUIC_STREAM_EVENT_START_COMPLETE event) with the QUIC_STATUS_STREAM_LIMIT_REACHED status. The QUIC_STREAM_START_FLAG_INDICATE_PEER_ACCEPT flag can be used to get the QUIC_STREAM_EVENT_PEER_ACCEPTED event to know when the stream becomes unblocked by flow control. If the peer already provided enough flow control to accept the stream when it was initially started, the QUIC_STREAM_EVENT_PEER_ACCEPTED event is not delivered and the QUIC_STREAM_EVENT_START_COMPLETE's PeerAccepted field will be TRUE. If is not initially accepted, if/once the peer provides enough flow control to allow the stream to be sent on the wire, then the QUIC_STREAM_EVENT_PEER_ACCEPTED event will be indicated to the app. The stream can also be started via the QUIC_SEND_FLAG_START flag. See StreamSend for more details. Important - No events are delivered on the stream until the app calls StreamStart (because of the race conditions that could occur) and it succeeds. This means that if the parent connection is shutdown (e.g. idle timeout or peer initiated) before calling StreamStart then the QUIC_STREAM_EVENT_SHUTDOWN_COMPLETE will not be delivered. So, apps that rely on that event to trigger clean up of the stream must handle the case where StreamStart is either not ever called or fails and clean up directly. See Also StreamOpen StreamClose StreamShutdown StreamSend StreamReceiveComplete StreamReceiveSetEnabled"
  },
  "index.html": {
    "href": "index.html",
    "title": "MsQuic DocFx!",
    "keywords": "MsQuic DocFx! Why? A Better Search Experience. Taking Advantage of built-in indexing offered by DocFx, and the nice UI configuration options (light / dark) mode, makes debugging a little less painful. Try out the search feature!"
  },
  "src/fuzzing/README.html": {
    "href": "src/fuzzing/README.html",
    "title": "Fuzzing",
    "keywords": "Fuzzing This directory is used for fuzzing. OSS-Fuzz automatically builds, runs and reports issue if there is any problem. Write fuzzing OSS-Fuzz uses LibFuzzer by default which is included in clang. Refer Libfuzzer official document if you want more detail. Run locally You can build and run code by yourself. OSS-Fuzz offers convenient scripts cd $PATH_TO_OSS_FUZZ # build Docker image python infra/helper.py build_image msquic # build fuzzing code, memory sanitizer is not supported yet python infra/helper.py build_fuzzers --sanitizer <address/memory/undefined> msquic # run fuzzing python infra/helper.py run_fuzzer msquic $YOUR_COOL_FUZZING Refer OSS-Fuzz official document for more detail Reproduce and debug issue Prep Download test case file from oss-fuzz issue ticket from OSS-Fuzz issues Build base image for repro and debug export TESTFILE=$YOUR_TEST_FILE git clone --depth=1 https://github.com/google/oss-fuzz.git cd oss-fuzz python infra/helper.py pull_images python infra/helper.py build_image msquic python infra/helper.py build_fuzzers --sanitizer <address/memory/undefined> msquic Reproduce issue Reproduce issue with spinquic cd oss-fuzz python infra/helper.py reproduce msquic spinquic $TESTFILE Debug issue cd oss-fuzz cp $TESTFILE build/out/msquic/testcase # Launch docker container python3 infra/helper.py shell base-runner-debug # Run gdb in the container gdb --args /out/msquic/spinquic /out/msquic/testcase Refer links for more details Reproduce Debug Monitor your fuzzing Once fuzzing is deployed on OSS-Fuzz infra, it continuously run and report issue if it detects Receive notification List your email under auto_ccs or vendor_ccs section in project.yaml Most of developer should be under vendor_ccs. Please follow instruction in vendor_ccs and feel free to create PR and let us know on issue or discussion. Login OSS-Fuzz dashabord Your email need to be associated with google account Before adding change.... Please go to msquic project directory in OSS-Fuzz whether your change can be run without issue. You might need to change Dockerfile and/or build.sh for installing libraries, COPYing fuzzing source, configuration files and build options."
  },
  "src/perf/readme.html": {
    "href": "src/perf/readme.html",
    "title": "Secured Network Performance Testing",
    "keywords": "Secured Network Performance Testing SecNetPerf is the standard (cross-platform) tool used for performance testing of MsQuic. It implements the protocol defined here. This protocol defines a generic interface that allows for client-driven performance testing. Server The server generally is meant to be run zero or minimal additional arguments. > secnetperf There are a few arguments that can be passed to the server: Argument Usage Meaning bind -bind:<address> Binds to the specified local address. cc -cc:<cubic,bbr> Congestion control algorithm used. cibir -cibir:<hex_bytes> The well-known CIBIR identifier. cipher -cipher:<value> Decimal value of 1 or more QUIC_ALLOWED_CIPHER_SUITE_FLAGS. cpu -cpu:<cpu_indexes> Comma-separated list of CPUs to run on. ecn -ecn:<0,1> Enables sender-side ECN support. exec -exec:<lowlat,maxtput,scavenger,realtime> The execution profile used for the application. pollidle -pollidle:<time_us> The time, in microseconds, to poll while idle before sleeping (falling back to interrupt-driven IO). stats -stats:<0,1> Prints out statistics at the end of each connection. Client Since tests are client-driven, the client side of secnetperf generally has several arguments passed in to specify which test to run. Many of the arguments are also test specific, but the following (overlap with server) do apply to all: Argument Usage Meaning cc -cc:<cubic,bbr> Congestion control algorithm used. cipher -cipher:<value> Decimal value of 1 or more QUIC_ALLOWED_CIPHER_SUITE_FLAGS. cpu -cpu:<cpu_indexes> Comma-separated list of CPUs to run on. ecn -ecn:<0,1> Enables sender-side ECN support. exec -exec:<lowlat,maxtput,scavenger,realtime> The execution profile used for the application. pollidle -pollidle:<time_us> The time, in microseconds, to poll while idle before sleeping (falling back to interrupt-driven IO). Throughput Test To run the throughput test, you must specify the -test:tput option, followed by a number of other arguments (most of which are optional). Examples > secnetperf.exe -exec:maxtput -test:tput -target:127.0.0.1 -download:10000000 > secnetperf.exe -test:tput -target:127.0.0.1 -upload:10000 -timed:1 -stats:1 Required Argument Usage Meaning target,server -target:<hostname_or_IP> The target server to connect to. May be a hostname or an IP address. download -download:<####> The length of data in bytes (or time with -timed:1 arg) to receive. Mutually exclusive with -upload arg. upload -upload:<####> The length of data in bytes (or time with -timed:1 arg) to send. Mutually exclusive with -download arg. Optional Argument Usage Meaning bind -bind:<address> Binds to the specified local address. cc -cc:<cubic,bbr> Congestion control algorithm used. cibir -cibir:<hex_bytes> The well-known CIBIR identifier. comp -comp:<####> The compartment ID to run in. Windows Only core -core:<####> The CPU to use for the main thread. encrypt -encrypt:<0,1> Enables/disables encryption. iosize -iosize:<####> The size of each send request queued. ip -ip:<0,4,6> A hint for the resolving the hostname to an IP address. pacing -pacing:<0,1> Whether to use pacing. port -port:<####> The UDP port of the server. sendbuf -sendbuf:<0,1> Whether to use send buffering. sstats -sstats:<0,1> Prints out stream-level statistics at the end of each stream. stats -stats:<0,1> Prints out statistics at the end of each connection. tcp -tcp:<0,1> Indicates TCP/TLS should be used instead of QUIC. Windows Only timed -timed:<0,1> Indicates the upload & download arg represent time (ms). RPS Test To run the \"request per second\" test, you must specify the -test:rps option, followed by a number of other arguments (most of which are optional). Examples > secnetperf.exe -test:rps -target:127.0.0.1 > secnetperf.exe -test:rps -target:127.0.0.1 -runtime:1000 -response:8096 -stats:1 Required Argument Usage Meaning target,server -target:<hostname_or_IP> The target server to connect to. May be a hostname or an IP address. Optional Argument Usage Meaning addrs -addrs:<####> The number of local addresses to use. affinitize -affinitize:<0,1> Affinitizes threads to a core. bind -bind:<address> Binds to the specified local address. cibir -cibir:<hex_bytes> The well-known CIBIR identifier. conns -conns:<####> The number of connections to use. encrypt -encrypt:<0,1> Enables/disables encryption. inline -inline:<0,1> Configured sending requests inline. ip -ip:<0,4,6> A hint for the resolving the hostname to an IP address. port -port:<####> The UDP port of the server. requests -requests:<####> The number of requests to send at a time. request -request:<####> The length of request payloads. response -response:<####> The length of request payloads. runtime -runtime:<####> The total runtime (in ms). sendbuf -sendbuf:<0,1> Whether to use send buffering. stats -stats:<0,1> Prints out statistics at the end of each connection. threads -threads:<####> The number of threads to use (capped to number of cores). HPS Test To run the \"handshakes per second\" test, you must specify the -test:hps option, followed by a number of other arguments (most of which are optional). Examples > secnetperf.exe -test:hps -target:127.0.0.1 > secnetperf.exe -test:hps -target:127.0.0.1 -runtime:1000 -response:8096 -stats:1 Required Argument Usage Meaning target,server -target:<hostname_or_IP> The target server to connect to. May be a hostname or an IP address. Optional Argument Usage Meaning bind -bind:<address> Binds to the specified local address. incrementtarget -incrementtarget<0,1> Set to 1 to append core index to target. parallel -parallel:<####> The number of parallel connections per core. port -port:<####> The UDP port of the server. runtime -runtime:<####> The total runtime (in ms). threads -threads:<####> The number of threads to use (capped to number of cores)."
  },
  "src/plugins/dbg/readme.html": {
    "href": "src/plugins/dbg/readme.html",
    "title": "quic.dll",
    "keywords": "quic.dll WinDbg debugger extension for the MsQuic library. Publishing Instructions Increment the version number in GalleryManifest.xml. Create a folder with name equal to the version number. Copy GalleryManifest.xml into the folder. To the version folder, add subfolders for x86 and amd64. Copy the corresponding versions of quic.dll in each of those subfolders. Zip it all up. Share it out. Send mail to dex-triage@microsoft.com with the path to the shared folder."
  },
  "src/plugins/trace/README.html": {
    "href": "src/plugins/trace/README.html",
    "title": "Windows Performance Analyzer Plugin",
    "keywords": "Windows Performance Analyzer Plugin This page provides the install, setup and usage instructions for Windows Performance Analyzer (WPA) and use it to analyze MsQuic traces. Install Instructions The following are currently only possible on Windows. Other platforms may be supported by WPA in the future. The easiest way to use WPA is via the ./scripts/wpa.ps1 script, but additional detailed instructions can be found below. Install WPA Download the preview version from the Windows Store. You should then be able to run WPA from: $env:LOCALAPPDATA\\Microsoft\\WindowsApps\\wpa.exe Install MsQuic WPA Plugin Build the plugin via QuicTrace.sln or download it from the latest release (i.e. v1.0.0). Update/create your WPA shortcut by adding -addsearchdir <path_to_quic_plugin_folder>. Usage Instructions WPA is extremely powerful. It can operate very quickly on multi-gigabyte trace files and let you slice & dice the data many different ways to really drill down into what's going on. Load trace file ETW trace Select and Open .etl file LTTng trace Directory Select directory which includes traces. WPA automatically traverses and find trace files. File Compress the directory as zip change the extension to .ctf Select the .ctf file Call stacks and CPU Usage Windows One of the built-in capabilities of WPA is the ability to analyze CPU trace information to see the CPU usage of the various call stacks in the code. For instance, in the above Flame Graph you can easily see that the most expensive function (58% of total CPU usage!) is CxPlatEncrypt. Linux Linux perf command is one of the way to collect such information. # on Linux sudo apt-get install -y linux-tools-`uname -r` # use your own options perf record -a -g -F 10 -o out.perf.data # \".perf.data.txt\" extension is required for later visualize on WPA perf script -i out.perf.data > out.perf.data.txt Visualize perf artifact on WPA The perf command's artifact can be visualized on Windows through WPA. Follow steps below to load perf extension on WPA. # on Windows cd ${WORKDIR} git clone https://github.com/microsoft/Microsoft-Performance-Tools-Linux-Android cd .\\Microsoft-Performance-Tools-Linux-Android\\PerfDataExtensions dotnet build # use absolute path wpa.exe -addsearchdir ${WORKDIR}\\Microsoft-Performance-Tools-Linux-Android\\PerfDataExtensions\\bin\\Debug\\netstandard2.1\\ # Open out.perf.data.txt on WPA. You might need to open multiple time if you see error at opening (known issue?) Change visualization type by drop down menu as shown in image below. Also you can filter in data for each CPU etc. TODO - Add more details/instructions. QUIC Charts and Tables TODO"
  }
}