# Creates the Windows OS build package.

jobs:
- job: git_push
  displayName: Git push to OS Repo
  pool:
    vmImage: windows-2019
  variables:
  - name: runCodesignValidationInjection
    value: false
  - group: VPackDeploymentKeys
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: package
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: vpackmanifestamd64fre
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: vpackmanifestamd64chk
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: vpackmanifestarm64fre
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: vpackmanifestarm64chk
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: vpackmanifestarmfre
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: vpackmanifestarmchk
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: vpackmanifestchpefre
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: vpackmanifestchpechk
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: vpackmanifestx86fre
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: vpackmanifestx86chk
      path: $(Build.SourcesDirectory)/artifacts/package

  - task: PkgESSecComp@10
    displayName: 'Security and Compliance tasks'
    inputs:
      fileNewBugs: false
      areaPath: 'OS\Core\STACK\CoreNet\DPT-Data Path and Transports\QUIC'
      iterationPath: 'OS\Future'
      checkInConfigPath: $(Build.SourcesDirectory)/artifacts/package/FakeGitCheckin.json
      dropOverride: '$(Build.SourcesDirectory)/artifacts/package'
      errOnBugs: false
      failOnStdErr: false
      taskLogVerbosity: Diagnostic
      vpacktoken: $(VPACK_PAT)

  # - task: PkgESFCIBGit@12
  #   displayName: 'Package ES - Submit Files to Git'
  #   inputs:
  #     configPath: '$(Build.SourcesDirectory)/artifacts/package/GitCheckin.json' # the path to the GitCheckin.json config file.
  #     artifactsDirectory: '$(Build.SourcesDirectory)/artifacts/package' # parent directory for the artifacts to submit to the destination repo.
  #     prTimeOut: 5
  #     paToken: '$(GIT_PAT)' # "build token" from the previous wiki section. Ensure this secret isn't stored as plaintext.
