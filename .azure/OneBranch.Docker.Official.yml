#
# Run this OBP will generate a docker image and push it to isolated ACR hosted by Onebranch.
#
# Set enable_isolated_acr_push and enable_service_tree_acr_path to true when the docker(s)
# are ready to be uploaded.
#
# By default, this pipeline does not build dockers if RunFor* is not set.
#

trigger: none # https://aka.ms/obpipelines/triggers

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false
- name: 'RunForLinux'
  displayName: 'Build docker image for Linux'
  type: boolean
  default: false
- name: 'RunForWindows'
  displayName: 'Build docker image for Windows'
  type: boolean
  default: false
- name: 'DockerTag'
  displayName: 'Docker tag'
  type: string
  default: 'latest'

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 1
  DisableDockerDetector: true
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none
  LinuxContainerImage: 'cdpxlinux.azurecr.io/global/ubuntu-1804:latest'

resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    featureFlags:
      skipPoliciesValidation: true
    globalSdl: # https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.

    stages:
      - stage: docker
        jobs:
        - job: download_external_libs
          condition: eq('${{ parameters.RunForWindows }}', 'true')
          displayName: Download external libs
          pool:
            type: linux  # read more about custom job types at https://aka.ms/obpipelines/yaml/jobs
          variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
            ob_outputDirectory: '$(Build.SourcesDirectory)/out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault
          steps:
            - task: DownloadSecureFile@1
              name:  xgameplatformlib
              displayName: 'Download xgameplatform.lib'
              inputs:
                secureFile: 'xgameplatform.lib'
            - script: |
                echo Copying $(xgameplatformlib.secureFilePath) to artifacts...
                mkdir -p $(Build.SourcesDirectory)/out
                cp $(xgameplatformlib.secureFilePath) $(Build.SourcesDirectory)/out
        - job: linuxContainers # build linux images
          condition: eq('${{ parameters.RunForLinux }}', 'true')
          displayName: Build docker image for linux
          variables:
            ob_git_checkout: true
          pool:
            type: docker
            os: linux
          steps:
            - task: onebranch.pipeline.imagebuildinfo@1
              inputs:
                repositoryName: msquicbuild
                dockerFileRelPath: .azure/dockers/ob/linux/Dockerfile
                dockerFileContextPath: .azure/dockers/ob/linux
                saveImageToPath: msquicbuild-linux.tar
                enable_network: true
                build_tag: ${{ parameters.DockerTag }}
                enable_isolated_acr_push: true
                enable_service_tree_acr_path: true
        - job: windowsContainers # build windows images
          dependsOn: download_external_libs
          displayName: Build docker image for windows
          variables:
            ob_git_checkout: true
          pool:
            type: docker
            os: windows
          steps:
            - task: DownloadPipelineArtifact@2
              displayName: 'ðŸ”’ Download artifacts'
              inputs:
                targetPath: $(Build.SourcesDirectory)\dst\.azure\dockers\ob\windows
                artifact: drop_main_download_external_libs
            - task: onebranch.pipeline.imagebuildinfo@1
              inputs:
                repositoryName: msquicbuild
                dockerFileRelPath: .azure\dockers\ob\windows\Dockerfile
                dockerFileContextPath: .azure\dockers\ob\windows
                saveImageToPath: msquicbuild-windows.tar.gz
                enable_network: true
                build_tag: ${{ parameters.DockerTag }}
                compress: true
                enable_isolated_acr_push: true
                enable_service_tree_acr_path: true
