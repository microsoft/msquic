# Continuous integration for Linux and Windows.
# https://aka.ms/yaml

trigger:
- master

strategy:
  matrix:
    linux-stub:
      platform: 'Linux-Stub'
      imageName: 'ubuntu-latest'
      cmakeArgs: '-g ''Linux Makefiles'' -DQUIC_TLS=stub -DQUIC_ENABLE_LOGGING=off'
      testCmd: 'bash ./.azure/test_linux.sh ''*'''
    linux-stub-sanitize:
      platform: 'Linux-Stub-Sanitize'
      imageName: 'ubuntu-latest'
      cmakeArgs: '-g ''Linux Makefiles'' -DQUIC_TLS=stub -DQUIC_ENABLE_LOGGING=off -DQUIC_SANITIZE_ADDRESS=on'
      testCmd: 'bash ./.azure/test_linux.sh AppData/WithSendArgs2.SendLarge/0'
    linux-openssl:
      platform: 'Linux-OpenSSL'
      imageName: 'ubuntu-latest'
      cmakeArgs: '-g ''Linux Makefiles'' -DQUIC_TLS=openssl -DQUIC_ENABLE_LOGGING=off'
      testCmd: 'bash ./.azure/test_linux.sh ''*'''
    windows-x64-stub:
      platform: 'Windows-x64-Stub'
      imageName: 'windows-latest'
      cmakeArgs: '-g ''Visual Studio 16 2019'' -A x64 -DQUIC_TLS=stub'
      testCmd: '.\.azure\test_windows.cmd *'
    windows-x64-mitls:
      platform: 'Windows-x64-miTLS'
      imageName: 'windows-latest'
      cmakeArgs: '-g ''Visual Studio 16 2019'' -A x64 -DQUIC_TLS=mitls'
      testCmd: '.\.azure\test_windows.cmd *'
    windows-x64-schannel:
      platform: 'Windows-x64-Schannel'
      imageName: 'windows-latest'
      cmakeArgs: '-g ''Visual Studio 16 2019'' -A x64 -DQUIC_TLS=schannel'
      testCmd: '.\.azure\test_windows.cmd ParameterValidation.*'

pool:
  vmImage: $(imageName)

steps:
- checkout: self
  submodules: recursive
  persistCredentials: true

- task: CMake@1
  displayName: 'CMake Generator'
  inputs:
    cmakeArgs: '$(cmakeArgs) ..'

- task: CMake@1
  displayName: 'CMake Build'
  inputs:
    cmakeArgs: '--build . --config RELEASE'

- task: CmdLine@2
  displayName: 'Run Tests'
  inputs:
    script: '$(testCmd)'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/*test-results.xml'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: 'artifacts'
    ArtifactName: '$(platform)-Artifacts'
    publishLocation: 'Container'
