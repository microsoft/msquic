# Continuous integration for Linux and Windows.
# https://aka.ms/yaml

trigger:
- master

strategy:
  matrix:
    linux-stub:
      platform: 'Linux-Stub'
      imageName: 'ubuntu-latest'
      buildArgs: '-Tls stub -DisableLogs'
      testCmd: 'bash ./.azure/test_linux.sh ''*'''
    linux-stub-sanitize:
      platform: 'Linux-Stub-Sanitize'
      imageName: 'ubuntu-latest'
      buildArgs: '-Tls stub -DisableLogs -SanitizeAddress'
      testCmd: 'bash ./.azure/test_linux.sh AppData/WithSendArgs2.SendLarge/0'
    linux-stub-spin:
      platform: 'Linux-Stub-Spin'
      imageName: 'ubuntu-latest'
      buildArgs: '-Tls stub -DisableLogs -SanitizeAddress'
      testCmd: 'bash ./.azure/spin_linux.sh'
    linux-openssl:
      platform: 'Linux-OpenSSL'
      imageName: 'ubuntu-latest'
      buildArgs: '-Tls openssl -DisableLogs'
      testCmd: 'bash ./.azure/test_linux.sh ''*'''
    windows-x64-stub:
      platform: 'Windows-x64-Stub'
      imageName: 'windows-latest'
      buildArgs: '-Tls stub'
      testCmd: '.\.azure\test_windows.cmd -*Unreachable/0'
    windows-x64-stub-spin:
      platform: 'Windows-x64-Stub-Spin'
      imageName: 'windows-latest'
      buildArgs: '-Tls stub'
      testCmd: '.\.azure\spin_windows.cmd'
    windows-x64-mitls:
      platform: 'Windows-x64-miTLS'
      imageName: 'windows-latest'
      buildArgs: '-Tls mitls'
      testCmd: '.\.azure\test_windows.cmd -*Unreachable/0'
    windows-x64-schannel:
      platform: 'Windows-x64-Schannel'
      imageName: 'windows-latest'
      buildArgs: '-Tls schannel'
      testCmd: '.\.azure\test_windows.cmd ParameterValidation.*'

pool:
  vmImage: $(imageName)

steps:
- checkout: self
  submodules: recursive
  persistCredentials: true

- task: PowerShell@2
  displayName: 'Build'
  inputs:
    pwsh: true
    filePath: './build.ps1'
    arguments: '-InstallDependencies $(buildArgs)'

- task: CmdLine@2
  displayName: 'Run Tests'
  timeoutInMinutes: 10
  inputs:
    script: '$(testCmd)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: 'artifacts'
    ArtifactName: '$(platform)-Artifacts'
    publishLocation: 'Container'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/*test-results.xml'
    failTaskOnFailedTests: true
